
Projeto 03 - FDCAN Normal Operating Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24000000  08003d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  2400001c  08003d94  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000154  08003d94  00020154  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c417  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000179e  00000000  00000000  0002c461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a70  00000000  00000000  0002dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009b8  00000000  00000000  0002e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002ed28  00000000  00000000  0002f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000af76  00000000  00000000  0005dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00134b7a  00000000  00000000  00068cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0019d840  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b70  00000000  00000000  0019d890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400001c 	.word	0x2400001c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08003cec 	.word	0x08003cec

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000020 	.word	0x24000020
 80002e8:	08003cec 	.word	0x08003cec

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 fac0 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f87e 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 f950 	bl	800059c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002fc:	f000 f8e8 	bl	80004d0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Configure Tx buffer message */
  TxHeader.Identifier = 0x1;
 8000300:	4b36      	ldr	r3, [pc, #216]	; (80003dc <main+0xf0>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <main+0xf0>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800030c:	4b33      	ldr	r3, [pc, #204]	; (80003dc <main+0xf0>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000312:	4b32      	ldr	r3, [pc, #200]	; (80003dc <main+0xf0>)
 8000314:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000318:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800031a:	4b30      	ldr	r3, [pc, #192]	; (80003dc <main+0xf0>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <main+0xf0>)
 8000322:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000326:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000328:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <main+0xf0>)
 800032a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800032e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <main+0xf0>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <main+0xf0>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_FDCAN_AddMessageToTxBuffer(&hfdcan1, &TxHeader, TxData_Node1_To_Node2, FDCAN_TX_BUFFER0) != HAL_OK)
 800033c:	2301      	movs	r3, #1
 800033e:	4a28      	ldr	r2, [pc, #160]	; (80003e0 <main+0xf4>)
 8000340:	4926      	ldr	r1, [pc, #152]	; (80003dc <main+0xf0>)
 8000342:	4828      	ldr	r0, [pc, #160]	; (80003e4 <main+0xf8>)
 8000344:	f000 fe8b 	bl	800105e <HAL_FDCAN_AddMessageToTxBuffer>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <main+0x66>
  {
	  Error_Handler();
 800034e:	f000 f93f 	bl	80005d0 <Error_Handler>
  }

  /* Configure standard ID reception filter to Rx buffer 0 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <main+0xfc>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterType = 0;
 8000358:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <main+0xfc>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
#if 0
  sFilterConfig.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFER
#endif
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <main+0xfc>)
 8000360:	2207      	movs	r2, #7
 8000362:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x2; // ID Node2
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <main+0xfc>)
 8000366:	2202      	movs	r2, #2
 8000368:	611a      	str	r2, [r3, #16]
#if 0
  sFilterConfig.FilterID2 = 0x0; // Ignore because FDCAN_FILTER_TO_RXBUFFER
#endif
  sFilterConfig.RxBufferIndex = 0;
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <main+0xfc>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000370:	491d      	ldr	r1, [pc, #116]	; (80003e8 <main+0xfc>)
 8000372:	481c      	ldr	r0, [pc, #112]	; (80003e4 <main+0xf8>)
 8000374:	f000 fdd2 	bl	8000f1c <HAL_FDCAN_ConfigFilter>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <main+0x96>
  {
	  Error_Handler();
 800037e:	f000 f927 	bl	80005d0 <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000382:	4818      	ldr	r0, [pc, #96]	; (80003e4 <main+0xf8>)
 8000384:	f000 fe40 	bl	8001008 <HAL_FDCAN_Start>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <main+0xa6>
  {
	  Error_Handler();
 800038e:	f000 f91f 	bl	80005d0 <Error_Handler>
  }

  /* Send Tx buffer message */
  if (HAL_FDCAN_EnableTxBufferRequest(&hfdcan1, FDCAN_TX_BUFFER0) != HAL_OK)
 8000392:	2101      	movs	r1, #1
 8000394:	4813      	ldr	r0, [pc, #76]	; (80003e4 <main+0xf8>)
 8000396:	f000 fed2 	bl	800113e <HAL_FDCAN_EnableTxBufferRequest>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d014      	beq.n	80003ca <main+0xde>
  {
	  Error_Handler();
 80003a0:	f000 f916 	bl	80005d0 <Error_Handler>
  }

  /* Polling for transmission complete on buffer index 0 */
  while (HAL_FDCAN_IsTxBufferMessagePending(&hfdcan1, FDCAN_TX_BUFFER0) == 1)
 80003a4:	e011      	b.n	80003ca <main+0xde>

  /* Polling for reception complete on buffer index 0 */
  while (HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan1, FDCAN_RX_BUFFER0) == 0)

  /* Retrieve message from Rx buffer 0. Rec msg from Node 2 */
  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_BUFFER0, &RxHeader, RxData_From_Node2) != HAL_OK)
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <main+0x100>)
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <main+0x104>)
 80003aa:	2100      	movs	r1, #0
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <main+0xf8>)
 80003ae:	f000 fee7 	bl	8001180 <HAL_FDCAN_GetRxMessage>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <main+0xd0>
  {
	  Error_Handler();
 80003b8:	f000 f90a 	bl	80005d0 <Error_Handler>
  while (HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan1, FDCAN_RX_BUFFER0) == 0)
 80003bc:	2100      	movs	r1, #0
 80003be:	4809      	ldr	r0, [pc, #36]	; (80003e4 <main+0xf8>)
 80003c0:	f001 f84c 	bl	800145c <HAL_FDCAN_IsRxBufferMessageAvailable>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0ed      	beq.n	80003a6 <main+0xba>
  while (HAL_FDCAN_IsTxBufferMessagePending(&hfdcan1, FDCAN_TX_BUFFER0) == 1)
 80003ca:	2101      	movs	r1, #1
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <main+0xf8>)
 80003ce:	f001 f88b 	bl	80014e8 <HAL_FDCAN_IsTxBufferMessagePending>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d0f1      	beq.n	80003bc <main+0xd0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <main+0xec>
 80003da:	bf00      	nop
 80003dc:	240000f8 	.word	0x240000f8
 80003e0:	24000000 	.word	0x24000000
 80003e4:	24000038 	.word	0x24000038
 80003e8:	240000d8 	.word	0x240000d8
 80003ec:	24000144 	.word	0x24000144
 80003f0:	2400011c 	.word	0x2400011c

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b09c      	sub	sp, #112	; 0x70
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fe:	224c      	movs	r2, #76	; 0x4c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fc6a 	bl	8003cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2220      	movs	r2, #32
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f003 fc64 	bl	8003cdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000414:	2004      	movs	r0, #4
 8000416:	f001 fc31 	bl	8001c7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <SystemClock_Config+0xd8>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <SystemClock_Config+0xd8>)
 8000424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <SystemClock_Config+0xd8>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000436:	bf00      	nop
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <SystemClock_Config+0xd8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000444:	d1f8      	bne.n	8000438 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000446:	2302      	movs	r3, #2
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800044a:	2301      	movs	r3, #1
 800044c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044e:	2340      	movs	r3, #64	; 0x40
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000456:	2300      	movs	r3, #0
 8000458:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800045a:	2304      	movs	r3, #4
 800045c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800045e:	2309      	movs	r3, #9
 8000460:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000462:	2302      	movs	r3, #2
 8000464:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000466:	2303      	movs	r3, #3
 8000468:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800046a:	2302      	movs	r3, #2
 800046c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800046e:	230c      	movs	r3, #12
 8000470:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000472:	2300      	movs	r3, #0
 8000474:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000476:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800047a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000480:	4618      	mov	r0, r3
 8000482:	f001 fc55 	bl	8001d30 <HAL_RCC_OscConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800048c:	f000 f8a0 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000490:	233f      	movs	r3, #63	; 0x3f
 8000492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	2303      	movs	r3, #3
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2101      	movs	r1, #1
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 f83f 	bl	8002538 <HAL_RCC_ClockConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80004c0:	f000 f886 	bl	80005d0 <Error_Handler>
  }
}
 80004c4:	bf00      	nop
 80004c6:	3770      	adds	r7, #112	; 0x70
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	58024800 	.word	0x58024800

080004d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004d4:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004d6:	4a30      	ldr	r2, [pc, #192]	; (8000598 <MX_FDCAN1_Init+0xc8>)
 80004d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80004da:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004e0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80004e8:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000502:	220d      	movs	r2, #13
 8000504:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000508:	2256      	movs	r2, #86	; 0x56
 800050a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800050e:	220d      	movs	r2, #13
 8000510:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000514:	2202      	movs	r2, #2
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 12;
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800051a:	220c      	movs	r2, #12
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000520:	220c      	movs	r2, #12
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 12;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000526:	220c      	movs	r2, #12
 8000528:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800052c:	2200      	movs	r2, #0
 800052e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000532:	2201      	movs	r2, #1
 8000534:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000538:	2200      	movs	r2, #0
 800053a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800053e:	2200      	movs	r2, #0
 8000540:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000544:	2204      	movs	r2, #4
 8000546:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800054a:	2200      	movs	r2, #0
 800054c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000550:	2204      	movs	r2, #4
 8000552:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000556:	2201      	movs	r2, #1
 8000558:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800055c:	2205      	movs	r2, #5
 800055e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 1;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000568:	2201      	movs	r2, #1
 800056a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800056e:	2200      	movs	r2, #0
 8000570:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000574:	2200      	movs	r2, #0
 8000576:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 800057a:	2205      	movs	r2, #5
 800057c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_FDCAN1_Init+0xc4>)
 8000580:	f000 faee 	bl	8000b60 <HAL_FDCAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800058a:	f000 f821 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	24000038 	.word	0x24000038
 8000598:	4000a000 	.word	0x4000a000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_GPIO_Init+0x30>)
 80005a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <MX_GPIO_Init+0x30>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_GPIO_Init+0x30>)
 80005b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	58024400 	.word	0x58024400

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_MspInit+0x30>)
 80005e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <HAL_MspInit+0x30>)
 80005ea:	f043 0302 	orr.w	r3, r3, #2
 80005ee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_MspInit+0x30>)
 80005f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	58024400 	.word	0x58024400

08000610 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0b8      	sub	sp, #224	; 0xe0
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	22b8      	movs	r2, #184	; 0xb8
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fb53 	bl	8003cdc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <HAL_FDCAN_MspInit+0xc0>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d143      	bne.n	80006c8 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000644:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800064a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f002 faa0 	bl	8002b98 <HAL_RCCEx_PeriphCLKConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800065e:	f7ff ffb7 	bl	80005d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_FDCAN_MspInit+0xc4>)
 8000664:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <HAL_FDCAN_MspInit+0xc4>)
 800066a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_FDCAN_MspInit+0xc4>)
 8000674:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_FDCAN_MspInit+0xc4>)
 8000682:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <HAL_FDCAN_MspInit+0xc4>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_FDCAN_MspInit+0xc4>)
 8000692:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800069e:	2303      	movs	r3, #3
 80006a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006b6:	2309      	movs	r3, #9
 80006b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_FDCAN_MspInit+0xc8>)
 80006c4:	f001 f92a 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	37e0      	adds	r7, #224	; 0xe0
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	4000a000 	.word	0x4000a000
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020c00 	.word	0x58020c00

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f916 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <SystemInit+0xd0>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a31      	ldr	r2, [pc, #196]	; (8000800 <SystemInit+0xd0>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <SystemInit+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	2b02      	cmp	r3, #2
 800074e:	d807      	bhi.n	8000760 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000750:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <SystemInit+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 030f 	bic.w	r3, r3, #15
 8000758:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <SystemInit+0xd4>)
 800075a:	f043 0303 	orr.w	r3, r3, #3
 800075e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemInit+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <SystemInit+0xd8>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemInit+0xd8>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <SystemInit+0xd8>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4924      	ldr	r1, [pc, #144]	; (8000808 <SystemInit+0xd8>)
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <SystemInit+0xdc>)
 800077a:	4013      	ands	r3, r2
 800077c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <SystemInit+0xd4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 030c 	and.w	r3, r3, #12
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <SystemInit+0xd4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f023 030f 	bic.w	r3, r3, #15
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <SystemInit+0xd4>)
 8000794:	f043 0303 	orr.w	r3, r3, #3
 8000798:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <SystemInit+0xd8>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <SystemInit+0xd8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <SystemInit+0xd8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <SystemInit+0xd8>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <SystemInit+0xe0>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <SystemInit+0xd8>)
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <SystemInit+0xe4>)
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <SystemInit+0xd8>)
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <SystemInit+0xe8>)
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <SystemInit+0xd8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <SystemInit+0xd8>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <SystemInit+0xe8>)
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <SystemInit+0xd8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <SystemInit+0xd8>)
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <SystemInit+0xe8>)
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <SystemInit+0xd8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <SystemInit+0xd8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <SystemInit+0xd8>)
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <SystemInit+0xd8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <SystemInit+0xec>)
 80007f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	52002000 	.word	0x52002000
 8000808:	58024400 	.word	0x58024400
 800080c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000810:	02020200 	.word	0x02020200
 8000814:	01ff0000 	.word	0x01ff0000
 8000818:	01010280 	.word	0x01010280
 800081c:	52004000 	.word	0x52004000

08000820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000824:	f7ff ff84 	bl	8000730 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	; (800086c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800084e:	f003 fa13 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000852:	f7ff fd4b 	bl	80002ec <main>
  bx  lr
 8000856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800085c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000860:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000864:	08003d78 	.word	0x08003d78
  ldr r2, =_sbss
 8000868:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 800086c:	24000154 	.word	0x24000154

08000870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f93e 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000880:	f002 f810 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8000884:	4602      	mov	r2, r0
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_Init+0x68>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	4913      	ldr	r1, [pc, #76]	; (80008e0 <HAL_Init+0x6c>)
 8000892:	5ccb      	ldrb	r3, [r1, r3]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	fa22 f303 	lsr.w	r3, r2, r3
 800089c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_Init+0x68>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_Init+0x6c>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	fa22 f303 	lsr.w	r3, r2, r3
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_Init+0x70>)
 80008b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <HAL_Init+0x74>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f814 	bl	80008ec <HAL_InitTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e002      	b.n	80008d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ce:	f7ff fe85 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024400 	.word	0x58024400
 80008e0:	08003d50 	.word	0x08003d50
 80008e4:	24000010 	.word	0x24000010
 80008e8:	2400000c 	.word	0x2400000c

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_InitTick+0x60>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e021      	b.n	8000944 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_InitTick+0x64>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f915 	bl	8000b46 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f8ed 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x68>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	24000018 	.word	0x24000018
 8000950:	2400000c 	.word	0x2400000c
 8000954:	24000014 	.word	0x24000014

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	24000018 	.word	0x24000018
 800097c:	24000150 	.word	0x24000150

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	24000150 	.word	0x24000150

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <__NVIC_SetPriorityGrouping+0x40>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	4313      	orrs	r3, r2
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x40>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00
 80009dc:	05fa0000 	.word	0x05fa0000

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f7ff ff8e 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff47 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff90 	bl	8000a50 <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5f 	bl	80009fc <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb2 	bl	8000ab8 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b098      	sub	sp, #96	; 0x60
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000b68:	4a84      	ldr	r2, [pc, #528]	; (8000d7c <HAL_FDCAN_Init+0x21c>)
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4611      	mov	r1, r2
 8000b70:	224c      	movs	r2, #76	; 0x4c
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f8a4 	bl	8003cc0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e1c6      	b.n	8000f10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a7e      	ldr	r2, [pc, #504]	; (8000d80 <HAL_FDCAN_Init+0x220>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fd2e 	bl	8000610 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0210 	bic.w	r2, r2, #16
 8000bc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bc4:	f7ff fedc 	bl	8000980 <HAL_GetTick>
 8000bc8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000bca:	e014      	b.n	8000bf6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000bcc:	f7ff fed8 	bl	8000980 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b0a      	cmp	r3, #10
 8000bd8:	d90d      	bls.n	8000bf6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000be0:	f043 0201 	orr.w	r2, r3, #1
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2203      	movs	r2, #3
 8000bee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e18c      	b.n	8000f10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d0e3      	beq.n	8000bcc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	699a      	ldr	r2, [r3, #24]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c14:	f7ff feb4 	bl	8000980 <HAL_GetTick>
 8000c18:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c1a:	e014      	b.n	8000c46 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c1c:	f7ff feb0 	bl	8000980 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	d90d      	bls.n	8000c46 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c30:	f043 0201 	orr.w	r2, r3, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e164      	b.n	8000f10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0e3      	beq.n	8000c1c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0202 	orr.w	r2, r2, #2
 8000c62:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7c1b      	ldrb	r3, [r3, #16]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d108      	bne.n	8000c7e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	699a      	ldr	r2, [r3, #24]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c7a:	619a      	str	r2, [r3, #24]
 8000c7c:	e007      	b.n	8000c8e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	699a      	ldr	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7c5b      	ldrb	r3, [r3, #17]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d108      	bne.n	8000ca8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	699a      	ldr	r2, [r3, #24]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca4:	619a      	str	r2, [r3, #24]
 8000ca6:	e007      	b.n	8000cb8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000cb6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7c9b      	ldrb	r3, [r3, #18]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	699a      	ldr	r2, [r3, #24]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	e007      	b.n	8000ce2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ce0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	699a      	ldr	r2, [r3, #24]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000d06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	691a      	ldr	r2, [r3, #16]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0210 	bic.w	r2, r2, #16
 8000d16:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d108      	bne.n	8000d32 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0204 	orr.w	r2, r2, #4
 8000d2e:	619a      	str	r2, [r3, #24]
 8000d30:	e030      	b.n	8000d94 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d02c      	beq.n	8000d94 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d020      	beq.n	8000d84 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	699a      	ldr	r2, [r3, #24]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d50:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0210 	orr.w	r2, r2, #16
 8000d60:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d114      	bne.n	8000d94 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0220 	orr.w	r2, r2, #32
 8000d78:	619a      	str	r2, [r3, #24]
 8000d7a:	e00b      	b.n	8000d94 <HAL_FDCAN_Init+0x234>
 8000d7c:	08003d04 	.word	0x08003d04
 8000d80:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	699a      	ldr	r2, [r3, #24]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000da4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000dac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000dbc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000dbe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000dc8:	d115      	bne.n	8000df6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000dd8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	3b01      	subs	r3, #1
 8000de0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000de2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	3b01      	subs	r3, #1
 8000dec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000df2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000df4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00a      	beq.n	8000e14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d011      	beq.n	8000e46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e2a:	f023 0107 	bic.w	r1, r3, #7
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	3360      	adds	r3, #96	; 0x60
 8000e36:	443b      	add	r3, r7
 8000e38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d011      	beq.n	8000e72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000e56:	f023 0107 	bic.w	r1, r3, #7
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	3360      	adds	r3, #96	; 0x60
 8000e62:	443b      	add	r3, r7
 8000e64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d012      	beq.n	8000ea0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000e82:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3360      	adds	r3, #96	; 0x60
 8000e8e:	443b      	add	r3, r7
 8000e90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000e94:	011a      	lsls	r2, r3, #4
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d012      	beq.n	8000ece <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000eb0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	3360      	adds	r3, #96	; 0x60
 8000ebc:	443b      	add	r3, r7
 8000ebe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000ec2:	021a      	lsls	r2, r3, #8
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_FDCAN_Init+0x3b8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d107      	bne.n	8000ee8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f022 0203 	bic.w	r2, r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 fb07 	bl	8001514 <FDCAN_CalcultateRamBlockAddresses>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8000f0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3760      	adds	r7, #96	; 0x60
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	4000a000 	.word	0x4000a000

08000f1c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000f2c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d002      	beq.n	8000f3a <HAL_FDCAN_ConfigFilter+0x1e>
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d157      	bne.n	8000fea <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d12b      	bne.n	8000f9a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	d10d      	bne.n	8000f66 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8000f56:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8000f5c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8000f5e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e00e      	b.n	8000f84 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f72:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8000f7a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e025      	b.n	8000fe6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	075a      	lsls	r2, r3, #29
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d103      	bne.n	8000fb8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e006      	b.n	8000fc6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	079a      	lsls	r2, r3, #30
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e008      	b.n	8000ffc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ff0:	f043 0202 	orr.w	r2, r3, #2
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
  }
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d111      	bne.n	8001040 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2202      	movs	r2, #2
 8001020:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e008      	b.n	8001052 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001046:	f043 0204 	orr.w	r2, r3, #4
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
  }
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_FDCAN_AddMessageToTxBuffer>:
  * @param  BufferIndex index of the buffer to be configured.
  *         This parameter can be a value of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxBuffer(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b08c      	sub	sp, #48	; 0x30
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
  assert_param(IS_FDCAN_TX_LOCATION(BufferIndex));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800107a:	2b01      	cmp	r3, #1
 800107c:	d003      	beq.n	8001086 <HAL_FDCAN_AddMessageToTxBuffer+0x28>
 800107e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001082:	2b02      	cmp	r3, #2
 8001084:	d14e      	bne.n	8001124 <HAL_FDCAN_AddMessageToTxBuffer+0xc6>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_FDCAN_AddMessageToTxBuffer+0x42>
  {
    return 32U;
 800109c:	2320      	movs	r3, #32
 800109e:	e003      	b.n	80010a8 <HAL_FDCAN_AddMessageToTxBuffer+0x4a>
  }
  return __builtin_clz(value);
 80010a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
  {
    /* Check that the selected buffer has an allocated area into the RAM */
    if (POSITION_VAL(BufferIndex) >= ((hfdcan->Instance->TXBC & FDCAN_TXBC_NDTB) >> FDCAN_TXBC_NDTB_Pos))
 80010a8:	461a      	mov	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d309      	bcc.n	80010d0 <HAL_FDCAN_AddMessageToTxBuffer+0x72>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010c2:	f043 0220 	orr.w	r2, r3, #32
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e032      	b.n	8001136 <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
    }

    /* Check that there is no transmission request pending for the selected buffer */
    if ((hfdcan->Instance->TXBRP & BufferIndex) != 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <HAL_FDCAN_AddMessageToTxBuffer+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PENDING;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e020      	b.n	8001136 <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	617b      	str	r3, [r7, #20]
  return result;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_FDCAN_AddMessageToTxBuffer+0xb0>
    return 32U;
 800110a:	2320      	movs	r3, #32
 800110c:	e003      	b.n	8001116 <HAL_FDCAN_AddMessageToTxBuffer+0xb8>
  return __builtin_clz(value);
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	b2db      	uxtb	r3, r3
    }
    else
    {
      /* Add the message to the Tx buffer */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, POSITION_VAL(BufferIndex));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fb80 	bl	8001820 <FDCAN_CopyMessageToRAM>
    }

    /* Return function status */
    return HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	e008      	b.n	8001136 <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800112a:	f043 0202 	orr.w	r2, r3, #2
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
  }
}
 8001136:	4618      	mov	r0, r3
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_FDCAN_EnableTxBufferRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxBufferRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d106      	bne.n	8001162 <HAL_FDCAN_EnableTxBufferRequest+0x24>
  {
    /* Add transmission request */
    hfdcan->Instance->TXBAR = BufferIndex;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Return function status */
    return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e008      	b.n	8001174 <HAL_FDCAN_EnableTxBufferRequest+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001168:	f043 0208 	orr.w	r2, r3, #8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
  }
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001198:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800119a:	7efb      	ldrb	r3, [r7, #27]
 800119c:	2b02      	cmp	r3, #2
 800119e:	f040 814b 	bne.w	8001438 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b40      	cmp	r3, #64	; 0x40
 80011a6:	d14d      	bne.n	8001244 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80011b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011be:	f043 0220 	orr.w	r2, r3, #32
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e13e      	b.n	800144a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e12c      	b.n	800144a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10b      	bne.n	800121a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800120a:	0fdb      	lsrs	r3, r3, #31
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001214:	d101      	bne.n	800121a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	4413      	add	r3, r2
 800122c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	69f9      	ldr	r1, [r7, #28]
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
 8001242:	e069      	b.n	8001318 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b41      	cmp	r3, #65	; 0x41
 8001248:	d14d      	bne.n	80012e6 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001252:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001260:	f043 0220 	orr.w	r2, r3, #32
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0ed      	b.n	800144a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0db      	b.n	800144a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800129a:	0e1b      	lsrs	r3, r3, #24
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10b      	bne.n	80012bc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80012ac:	0fdb      	lsrs	r3, r3, #31
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012b6:	d101      	bne.n	80012bc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	69f9      	ldr	r1, [r7, #28]
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
 80012e4:	e018      	b.n	8001318 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d309      	bcc.n	8001304 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0a2      	b.n	800144a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	fb01 f303 	mul.w	r3, r1, r3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e005      	b.n	8001348 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	3304      	adds	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0e1b      	lsrs	r3, r3, #24
 800139a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0fda      	lsrs	r2, r3, #31
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	3304      	adds	r3, #4
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	e00a      	b.n	80013d2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	441a      	add	r2, r3
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	440b      	add	r3, r1
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	3301      	adds	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d3eb      	bcc.n	80013bc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b40      	cmp	r3, #64	; 0x40
 80013e8:	d105      	bne.n	80013f6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80013f4:	e01e      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b41      	cmp	r3, #65	; 0x41
 80013fa:	d105      	bne.n	8001408 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001406:	e015      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b1f      	cmp	r3, #31
 800140c:	d808      	bhi.n	8001420 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2101      	movs	r1, #1
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800141e:	e009      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f003 021f 	and.w	r2, r3, #31
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e008      	b.n	800144a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800143e:	f043 0208 	orr.w	r2, r3, #8
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	372c      	adds	r7, #44	; 0x2c
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08003d60 	.word	0x08003d60

0800145c <HAL_FDCAN_IsRxBufferMessageAvailable>:
  * @retval Status
  *          - 0 : No new message on RxBufferIndex.
  *          - 1 : New message received on RxBufferIndex.
  */
uint32_t HAL_FDCAN_IsRxBufferMessageAvailable(FDCAN_HandleTypeDef *hfdcan, uint32_t RxBufferIndex)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(RxBufferIndex, 63U));
  uint32_t NewData1 = hfdcan->Instance->NDAT1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800146e:	60fb      	str	r3, [r7, #12]
  uint32_t NewData2 = hfdcan->Instance->NDAT2;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001478:	60bb      	str	r3, [r7, #8]

  /* Check new message reception on the selected buffer */
  if (((RxBufferIndex < 32U) && ((NewData1 & (uint32_t)((uint32_t)1 << RxBufferIndex)) == 0U)) ||
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b1f      	cmp	r3, #31
 800147e:	d807      	bhi.n	8001490 <HAL_FDCAN_IsRxBufferMessageAvailable+0x34>
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <HAL_FDCAN_IsRxBufferMessageAvailable+0x4e>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b1f      	cmp	r3, #31
 8001494:	d90b      	bls.n	80014ae <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
      ((RxBufferIndex >= 32U) && ((NewData2 & (uint32_t)((uint32_t)1 << (RxBufferIndex & 0x1FU))) == 0U)))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
  {
    return 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e016      	b.n	80014dc <HAL_FDCAN_IsRxBufferMessageAvailable+0x80>
  }

  /* Clear the New Data flag of the current Rx buffer */
  if (RxBufferIndex < 32U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b1f      	cmp	r3, #31
 80014b2:	d808      	bhi.n	80014c6 <HAL_FDCAN_IsRxBufferMessageAvailable+0x6a>
  {
    hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxBufferIndex);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80014c4:	e009      	b.n	80014da <HAL_FDCAN_IsRxBufferMessageAvailable+0x7e>
  }
  else /* 32 <= RxBufferIndex <= 63 */
  {
    hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxBufferIndex & 0x1FU));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex.
  *          - 1 : Pending transmission request on TxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  {
    return 0;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_FDCAN_IsTxBufferMessagePending+0x20>
  }
  return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800152a:	4ba7      	ldr	r3, [pc, #668]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800152c:	4013      	ands	r3, r2
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	0091      	lsls	r1, r2, #2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	430b      	orrs	r3, r1
 8001538:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001544:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	4413      	add	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800156a:	4b97      	ldr	r3, [pc, #604]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800156c:	4013      	ands	r3, r2
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	0091      	lsls	r1, r2, #2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	430b      	orrs	r3, r1
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001584:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80015ac:	4b86      	ldr	r3, [pc, #536]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	0091      	lsls	r1, r2, #2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	041a      	lsls	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	0091      	lsls	r1, r2, #2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800160e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	041a      	lsls	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800163c:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800163e:	4013      	ands	r3, r2
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	0091      	lsls	r1, r2, #2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001668:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800166a:	4013      	ands	r3, r2
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	0091      	lsls	r1, r2, #2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	430b      	orrs	r3, r1
 8001676:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001682:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	4413      	add	r3, r2
 80016a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	0091      	lsls	r1, r2, #2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	430b      	orrs	r3, r1
 80016b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016c4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016e0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e8:	061a      	lsls	r2, r3, #24
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80016fa:	4413      	add	r3, r2
 80016fc:	009a      	lsls	r2, r3, #2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	441a      	add	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	441a      	add	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	441a      	add	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	441a      	add	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	441a      	add	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	441a      	add	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	441a      	add	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d915      	bls.n	80017f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80017c4:	e006      	b.n	80017d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80017c6:	bf00      	nop
 80017c8:	ffff0003 	.word	0xffff0003
 80017cc:	10002b00 	.word	0x10002b00
 80017d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e010      	b.n	8001812 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e005      	b.n	8001804 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3304      	adds	r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d3f3      	bcc.n	80017f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800183e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001846:	4313      	orrs	r3, r2
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e00a      	b.n	8001862 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001854:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800185a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800185c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001860:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800186c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001872:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001878:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	3304      	adds	r3, #4
 80018a2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	3304      	adds	r3, #4
 80018ae:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e020      	b.n	80018f8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3303      	adds	r3, #3
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3302      	adds	r3, #2
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	440b      	add	r3, r1
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80018ce:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	440b      	add	r3, r1
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80018dc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	440a      	add	r2, r1
 80018e4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80018e6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	3304      	adds	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <FDCAN_CopyMessageToRAM+0xf8>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	461a      	mov	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4293      	cmp	r3, r2
 8001908:	d3d5      	bcc.n	80018b6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	08003d60 	.word	0x08003d60

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_GPIO_Init+0x234>)
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800192e:	e194      	b.n	8001c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8186 	beq.w	8001c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d005      	beq.n	8001960 <HAL_GPIO_Init+0x44>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 0201 	and.w	r2, r3, #1
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d017      	beq.n	80019fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80e0 	beq.w	8001c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001a96:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001a9a:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_GPIO_Init+0x238>)
 8001aa6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x23c>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_GPIO_Init+0x240>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d052      	beq.n	8001b84 <HAL_GPIO_Init+0x268>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_GPIO_Init+0x244>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_GPIO_Init+0x248>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x22a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_GPIO_Init+0x24c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_GPIO_Init+0x250>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x254>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x258>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x21a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x25c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x216>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_GPIO_Init+0x260>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x212>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_GPIO_Init+0x264>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e02d      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e02b      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e029      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e027      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e025      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e023      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e021      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e01f      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e01d      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e01b      	b.n	8001b86 <HAL_GPIO_Init+0x26a>
 8001b4e:	bf00      	nop
 8001b50:	58000080 	.word	0x58000080
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58000400 	.word	0x58000400
 8001b5c:	58020000 	.word	0x58020000
 8001b60:	58020400 	.word	0x58020400
 8001b64:	58020800 	.word	0x58020800
 8001b68:	58020c00 	.word	0x58020c00
 8001b6c:	58021000 	.word	0x58021000
 8001b70:	58021400 	.word	0x58021400
 8001b74:	58021800 	.word	0x58021800
 8001b78:	58021c00 	.word	0x58021c00
 8001b7c:	58022000 	.word	0x58022000
 8001b80:	58022400 	.word	0x58022400
 8001b84:	2300      	movs	r3, #0
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b96:	4938      	ldr	r1, [pc, #224]	; (8001c78 <HAL_GPIO_Init+0x35c>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f ae63 	bne.w	8001930 <HAL_GPIO_Init+0x14>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58000400 	.word	0x58000400

08001c7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d00a      	beq.n	8001ca6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e040      	b.n	8001d24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e03e      	b.n	8001d24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001cae:	491f      	ldr	r1, [pc, #124]	; (8001d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cb6:	f7fe fe63 	bl	8000980 <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cbc:	e009      	b.n	8001cd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cbe:	f7fe fe5f 	bl	8000980 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ccc:	d901      	bls.n	8001cd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e028      	b.n	8001d24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cde:	d1ee      	bne.n	8001cbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b1e      	cmp	r3, #30
 8001ce4:	d008      	beq.n	8001cf8 <HAL_PWREx_ConfigSupply+0x7c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8001cea:	d005      	beq.n	8001cf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b1d      	cmp	r3, #29
 8001cf0:	d002      	beq.n	8001cf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8001cf6:	d114      	bne.n	8001d22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001cf8:	f7fe fe42 	bl	8000980 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cfe:	e009      	b.n	8001d14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d00:	f7fe fe3e 	bl	8000980 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d0e:	d901      	bls.n	8001d14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e007      	b.n	8001d24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d20:	d1ee      	bne.n	8001d00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58024800 	.word	0x58024800

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e3f4      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80b3 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d50:	4b95      	ldr	r3, [pc, #596]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d5a:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d007      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46>
 8001d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d68:	2b18      	cmp	r3, #24
 8001d6a:	d112      	bne.n	8001d92 <HAL_RCC_OscConfig+0x62>
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d10d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8098 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x184>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 8093 	bne.w	8001eb4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e3cc      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x7a>
 8001d9c:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a81      	ldr	r2, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e058      	b.n	8001e5c <HAL_RCC_OscConfig+0x12c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xa8>
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7c      	ldr	r2, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b7a      	ldr	r3, [pc, #488]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a79      	ldr	r2, [pc, #484]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001dc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b77      	ldr	r3, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a76      	ldr	r2, [pc, #472]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e041      	b.n	8001e5c <HAL_RCC_OscConfig+0x12c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de0:	d112      	bne.n	8001e08 <HAL_RCC_OscConfig+0xd8>
 8001de2:	4b71      	ldr	r3, [pc, #452]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a70      	ldr	r2, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b6e      	ldr	r3, [pc, #440]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6d      	ldr	r2, [pc, #436]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001df4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6a      	ldr	r2, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e029      	b.n	8001e5c <HAL_RCC_OscConfig+0x12c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001e10:	d112      	bne.n	8001e38 <HAL_RCC_OscConfig+0x108>
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a61      	ldr	r2, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a5e      	ldr	r2, [pc, #376]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e011      	b.n	8001e5c <HAL_RCC_OscConfig+0x12c>
 8001e38:	4b5b      	ldr	r3, [pc, #364]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a5a      	ldr	r2, [pc, #360]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fd8c 	bl	8000980 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7fe fd88 	bl	8000980 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e356      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x13c>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fd78 	bl	8000980 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe fd74 	bl	8000980 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e342      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x164>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 808d 	beq.w	8001fde <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ecc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_RCC_OscConfig+0x1ba>
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	2b18      	cmp	r3, #24
 8001ede:	d137      	bne.n	8001f50 <HAL_RCC_OscConfig+0x220>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d132      	bne.n	8001f50 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1d2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e314      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0219 	bic.w	r2, r3, #25
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4926      	ldr	r1, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f14:	f7fe fd34 	bl	8000980 <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fd30 	bl	8000980 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e2fe      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	4917      	ldr	r1, [pc, #92]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4e:	e046      	b.n	8001fde <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d029      	beq.n	8001fac <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0219 	bic.w	r2, r3, #25
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4910      	ldr	r1, [pc, #64]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7fe fd09 	bl	8000980 <HAL_GetTick>
 8001f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f72:	f7fe fd05 	bl	8000980 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e2d3      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	4902      	ldr	r1, [pc, #8]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x2ae>
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fac:	4b97      	ldr	r3, [pc, #604]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fce2 	bl	8000980 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fcde 	bl	8000980 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e2ac      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd2:	4b8e      	ldr	r3, [pc, #568]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d06a      	beq.n	80020c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ff4:	4b85      	ldr	r3, [pc, #532]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d007      	beq.n	8002010 <HAL_RCC_OscConfig+0x2e0>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b18      	cmp	r3, #24
 8002004:	d11b      	bne.n	800203e <HAL_RCC_OscConfig+0x30e>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002010:	4b7e      	ldr	r3, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x2f8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e281      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002028:	4b78      	ldr	r3, [pc, #480]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	4975      	ldr	r1, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800203c:	e040      	b.n	80020c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d023      	beq.n	800208e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002046:	4b71      	ldr	r3, [pc, #452]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a70      	ldr	r2, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fc95 	bl	8000980 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800205a:	f7fe fc91 	bl	8000980 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e25f      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	4961      	ldr	r1, [pc, #388]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002088:	4313      	orrs	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e018      	b.n	80020c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fc71 	bl	8000980 <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80020a2:	f7fe fc6d 	bl	8000980 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e23b      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d036      	beq.n	800213a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d019      	beq.n	8002108 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7fe fc4e 	bl	8000980 <HAL_GetTick>
 80020e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e8:	f7fe fc4a 	bl	8000980 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e218      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020fa:	4b44      	ldr	r3, [pc, #272]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 80020fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x3b8>
 8002106:	e018      	b.n	800213a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	4a3f      	ldr	r2, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fc34 	bl	8000980 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe fc30 	bl	8000980 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1fe      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d036      	beq.n	80021b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d019      	beq.n	8002182 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2e      	ldr	r2, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002158:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800215a:	f7fe fc11 	bl	8000980 <HAL_GetTick>
 800215e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002162:	f7fe fc0d 	bl	8000980 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e1db      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x432>
 8002180:	e018      	b.n	80021b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800218c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800218e:	f7fe fbf7 	bl	8000980 <HAL_GetTick>
 8002192:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002196:	f7fe fbf3 	bl	8000980 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1c1      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80af 	beq.w	8002320 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_RCC_OscConfig+0x4e0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_RCC_OscConfig+0x4e0>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fbd7 	bl	8000980 <HAL_GetTick>
 80021d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe fbd3 	bl	8000980 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1a1      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_OscConfig+0x4e0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10b      	bne.n	8002214 <HAL_RCC_OscConfig+0x4e4>
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a02      	ldr	r2, [pc, #8]	; (800220c <HAL_RCC_OscConfig+0x4dc>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	e05b      	b.n	80022c2 <HAL_RCC_OscConfig+0x592>
 800220a:	bf00      	nop
 800220c:	58024400 	.word	0x58024400
 8002210:	58024800 	.word	0x58024800
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d112      	bne.n	8002242 <HAL_RCC_OscConfig+0x512>
 800221c:	4b9d      	ldr	r3, [pc, #628]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a9c      	ldr	r2, [pc, #624]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	4b9a      	ldr	r3, [pc, #616]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a99      	ldr	r2, [pc, #612]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800222e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	4b97      	ldr	r3, [pc, #604]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4a96      	ldr	r2, [pc, #600]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
 8002240:	e03f      	b.n	80022c2 <HAL_RCC_OscConfig+0x592>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d112      	bne.n	8002270 <HAL_RCC_OscConfig+0x540>
 800224a:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a91      	ldr	r2, [pc, #580]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a8e      	ldr	r2, [pc, #568]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800225c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a8b      	ldr	r2, [pc, #556]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	e028      	b.n	80022c2 <HAL_RCC_OscConfig+0x592>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b85      	cmp	r3, #133	; 0x85
 8002276:	d112      	bne.n	800229e <HAL_RCC_OscConfig+0x56e>
 8002278:	4b86      	ldr	r3, [pc, #536]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a85      	ldr	r2, [pc, #532]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	4b83      	ldr	r3, [pc, #524]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	4a82      	ldr	r2, [pc, #520]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800228a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228e:	6713      	str	r3, [r2, #112]	; 0x70
 8002290:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a7f      	ldr	r2, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	e011      	b.n	80022c2 <HAL_RCC_OscConfig+0x592>
 800229e:	4b7d      	ldr	r3, [pc, #500]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a7c      	ldr	r2, [pc, #496]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	4b7a      	ldr	r3, [pc, #488]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a79      	ldr	r2, [pc, #484]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b77      	ldr	r3, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d015      	beq.n	80022f6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7fe fb59 	bl	8000980 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fb55 	bl	8000980 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e121      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ee      	beq.n	80022d2 <HAL_RCC_OscConfig+0x5a2>
 80022f4:	e014      	b.n	8002320 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe fb43 	bl	8000980 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe fb3f 	bl	8000980 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	; 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e10b      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002314:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8100 	beq.w	800252a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800232a:	4b5a      	ldr	r3, [pc, #360]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002332:	2b18      	cmp	r3, #24
 8002334:	f000 80bb 	beq.w	80024ae <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b02      	cmp	r3, #2
 800233e:	f040 8095 	bne.w	800246c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b54      	ldr	r3, [pc, #336]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a53      	ldr	r2, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe fb17 	bl	8000980 <HAL_GetTick>
 8002352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe fb13 	bl	8000980 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0e1      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002378:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_OscConfig+0x768>)
 800237a:	4013      	ands	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	430a      	orrs	r2, r1
 8002388:	4942      	ldr	r1, [pc, #264]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800238a:	4313      	orrs	r3, r2
 800238c:	628b      	str	r3, [r1, #40]	; 0x28
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	3b01      	subs	r3, #1
 8002394:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	3b01      	subs	r3, #1
 800239e:	025b      	lsls	r3, r3, #9
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	3b01      	subs	r3, #1
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	3b01      	subs	r3, #1
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023be:	4935      	ldr	r1, [pc, #212]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCC_OscConfig+0x76c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023dc:	00d2      	lsls	r2, r2, #3
 80023de:	492d      	ldr	r1, [pc, #180]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f023 020c 	bic.w	r2, r3, #12
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4928      	ldr	r1, [pc, #160]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f023 0202 	bic.w	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4924      	ldr	r1, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002404:	4313      	orrs	r3, r2
 8002406:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002420:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	4a18      	ldr	r2, [pc, #96]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a15      	ldr	r2, [pc, #84]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fa9c 	bl	8000980 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fa98 	bl	8000980 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e066      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x71c>
 800246a:	e05e      	b.n	800252a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_RCC_OscConfig+0x764>)
 8002472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fa82 	bl	8000980 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fa7e 	bl	8000980 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e04c      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
 8002492:	bf00      	nop
 8002494:	58024400 	.word	0x58024400
 8002498:	fffffc0c 	.word	0xfffffc0c
 800249c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x804>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e9      	bne.n	8002480 <HAL_RCC_OscConfig+0x750>
 80024ac:	e03d      	b.n	800252a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x804>)
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_RCC_OscConfig+0x804>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d031      	beq.n	8002526 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d12a      	bne.n	8002526 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d122      	bne.n	8002526 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d11a      	bne.n	8002526 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0a5b      	lsrs	r3, r3, #9
 80024f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d111      	bne.n	8002526 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d108      	bne.n	8002526 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	0e1b      	lsrs	r3, r3, #24
 8002518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	58024400 	.word	0x58024400

08002538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e19c      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d910      	bls.n	800257c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b87      	ldr	r3, [pc, #540]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020f 	bic.w	r2, r3, #15
 8002562:	4985      	ldr	r1, [pc, #532]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b83      	ldr	r3, [pc, #524]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e184      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002594:	429a      	cmp	r2, r3
 8002596:	d908      	bls.n	80025aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002598:	4b78      	ldr	r3, [pc, #480]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4975      	ldr	r1, [pc, #468]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d908      	bls.n	80025d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	496a      	ldr	r1, [pc, #424]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d010      	beq.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d908      	bls.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	495e      	ldr	r1, [pc, #376]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002602:	4313      	orrs	r3, r2
 8002604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800261e:	429a      	cmp	r2, r3
 8002620:	d908      	bls.n	8002634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4953      	ldr	r1, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002630:	4313      	orrs	r3, r2
 8002632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	429a      	cmp	r2, r3
 800264e:	d908      	bls.n	8002662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f023 020f 	bic.w	r2, r3, #15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4947      	ldr	r1, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800265e:	4313      	orrs	r3, r2
 8002660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d055      	beq.n	800271a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4940      	ldr	r1, [pc, #256]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800267c:	4313      	orrs	r3, r2
 800267e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d121      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0f6      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d115      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ea      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0de      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d6      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f023 0207 	bic.w	r2, r3, #7
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe f949 	bl	8000980 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f2:	f7fe f945 	bl	8000980 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0be      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	429a      	cmp	r2, r3
 8002718:	d1eb      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	429a      	cmp	r2, r3
 8002734:	d208      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f023 020f 	bic.w	r2, r3, #15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x244>)
 8002744:	4313      	orrs	r3, r2
 8002746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d214      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	4906      	ldr	r1, [pc, #24]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_RCC_ClockConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e086      	b.n	8002886 <HAL_RCC_ClockConfig+0x34e>
 8002778:	52002000 	.word	0x52002000
 800277c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002798:	429a      	cmp	r2, r3
 800279a:	d208      	bcs.n	80027ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800279c:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4939      	ldr	r1, [pc, #228]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d208      	bcs.n	80027dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	492e      	ldr	r1, [pc, #184]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d208      	bcs.n	800280a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4922      	ldr	r1, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002806:	4313      	orrs	r3, r2
 8002808:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002822:	429a      	cmp	r2, r3
 8002824:	d208      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4917      	ldr	r1, [pc, #92]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002838:	f000 f834 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	4912      	ldr	r1, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x35c>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCC_ClockConfig+0x358>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_RCC_ClockConfig+0x35c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x360>)
 800286e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x364>)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x368>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f836 	bl	80008ec <HAL_InitTick>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58024400 	.word	0x58024400
 8002894:	08003d50 	.word	0x08003d50
 8002898:	24000010 	.word	0x24000010
 800289c:	2400000c 	.word	0x2400000c
 80028a0:	24000014 	.word	0x24000014

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028aa:	4bb3      	ldr	r3, [pc, #716]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	f200 8155 	bhi.w	8002b62 <HAL_RCC_GetSysClockFreq+0x2be>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	08002925 	.word	0x08002925
 80028c4:	08002b63 	.word	0x08002b63
 80028c8:	08002b63 	.word	0x08002b63
 80028cc:	08002b63 	.word	0x08002b63
 80028d0:	08002b63 	.word	0x08002b63
 80028d4:	08002b63 	.word	0x08002b63
 80028d8:	08002b63 	.word	0x08002b63
 80028dc:	08002b63 	.word	0x08002b63
 80028e0:	0800294b 	.word	0x0800294b
 80028e4:	08002b63 	.word	0x08002b63
 80028e8:	08002b63 	.word	0x08002b63
 80028ec:	08002b63 	.word	0x08002b63
 80028f0:	08002b63 	.word	0x08002b63
 80028f4:	08002b63 	.word	0x08002b63
 80028f8:	08002b63 	.word	0x08002b63
 80028fc:	08002b63 	.word	0x08002b63
 8002900:	08002951 	.word	0x08002951
 8002904:	08002b63 	.word	0x08002b63
 8002908:	08002b63 	.word	0x08002b63
 800290c:	08002b63 	.word	0x08002b63
 8002910:	08002b63 	.word	0x08002b63
 8002914:	08002b63 	.word	0x08002b63
 8002918:	08002b63 	.word	0x08002b63
 800291c:	08002b63 	.word	0x08002b63
 8002920:	08002957 	.word	0x08002957
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002924:	4b94      	ldr	r3, [pc, #592]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002930:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	08db      	lsrs	r3, r3, #3
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	4a90      	ldr	r2, [pc, #576]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002942:	e111      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002944:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002946:	61bb      	str	r3, [r7, #24]
    break;
 8002948:	e10e      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800294a:	4b8d      	ldr	r3, [pc, #564]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800294c:	61bb      	str	r3, [r7, #24]
    break;
 800294e:	e10b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002950:	4b8c      	ldr	r3, [pc, #560]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002952:	61bb      	str	r3, [r7, #24]
    break;
 8002954:	e108      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002960:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800296a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002976:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80e1 	beq.w	8002b5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b02      	cmp	r3, #2
 800299e:	f000 8083 	beq.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x204>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f200 80a1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x248>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x114>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d056      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029b6:	e099      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80029c4:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	4a6b      	ldr	r2, [pc, #428]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ee:	4b62      	ldr	r3, [pc, #392]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002a1e:	e087      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a62:	e065      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aa6:	e043      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aea:	e021      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b54:	ee17 3a90 	vmov	r3, s15
 8002b58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002b5a:	e005      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
    break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b64:	61bb      	str	r3, [r7, #24]
    break;
 8002b66:	bf00      	nop
  }

  return sysclockfreq;
 8002b68:	69bb      	ldr	r3, [r7, #24]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	03d09000 	.word	0x03d09000
 8002b80:	003d0900 	.word	0x003d0900
 8002b84:	007a1200 	.word	0x007a1200
 8002b88:	46000000 	.word	0x46000000
 8002b8c:	4c742400 	.word	0x4c742400
 8002b90:	4a742400 	.word	0x4a742400
 8002b94:	4af42400 	.word	0x4af42400

08002b98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03f      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bbc:	d02a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bc2:	d824      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc8:	d018      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bce:	d81e      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bd8:	d007      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bda:	e018      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bdc:	4b9f      	ldr	r3, [pc, #636]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4a9e      	ldr	r2, [pc, #632]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002be8:	e015      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fedd 	bl	80039b0 <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	2102      	movs	r1, #2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 ff86 	bl	8003b14 <RCCEx_PLL3_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c0c:	e003      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
      break;
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c1c:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c28:	498c      	ldr	r1, [pc, #560]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c2e:	e001      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03d      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d826      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c65 	.word	0x08002c65
 8002c54:	08002c73 	.word	0x08002c73
 8002c58:	08002c85 	.word	0x08002c85
 8002c5c:	08002c9d 	.word	0x08002c9d
 8002c60:	08002c9d 	.word	0x08002c9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c64:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	4a7c      	ldr	r2, [pc, #496]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c70:	e015      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fe99 	bl	80039b0 <RCCEx_PLL2_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3324      	adds	r3, #36	; 0x24
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 ff42 	bl	8003b14 <RCCEx_PLL3_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca8:	f023 0207 	bic.w	r2, r3, #7
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	496a      	ldr	r1, [pc, #424]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8002cb6:	e001      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d04a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002cd0:	d031      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002cd2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002cd6:	d82b      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cdc:	d02d      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d825      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ce4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ce6:	d02a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ce8:	2bc0      	cmp	r3, #192	; 0xc0
 8002cea:	d821      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d016      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d81d      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d007      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002cfc:	e018      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002d0a:	e019      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fe4c 	bl	80039b0 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002d1c:	e010      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3324      	adds	r3, #36	; 0x24
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fef5 	bl	8003b14 <RCCEx_PLL3_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002d2e:	e007      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]
      break;
 8002d34:	e004      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	4942      	ldr	r1, [pc, #264]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	650b      	str	r3, [r1, #80]	; 0x50
 8002d58:	e001      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04f      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002d72:	d036      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002d74:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002d78:	d830      	bhi.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7e:	d032      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d84:	d82a      	bhi.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002d86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d8a:	d02e      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002d8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d90:	d824      	bhi.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d018      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d81e      	bhi.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da6:	d007      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002da8:	e018      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002daa:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a2b      	ldr	r2, [pc, #172]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002db6:	e019      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fdf6 	bl	80039b0 <RCCEx_PLL2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002dc8:	e010      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3324      	adds	r3, #36	; 0x24
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fe9f 	bl	8003b14 <RCCEx_PLL3_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002dda:	e007      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]
      break;
 8002de0:	e004      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	4917      	ldr	r1, [pc, #92]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	650b      	str	r3, [r1, #80]	; 0x50
 8002e04:	e001      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d034      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	2b30      	cmp	r3, #48	; 0x30
 8002e1c:	d01c      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002e1e:	2b30      	cmp	r3, #48	; 0x30
 8002e20:	d817      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d813      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d10f      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002e3e:	e010      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fdb2 	bl	80039b0 <RCCEx_PLL2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002e50:	e007      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
      break;
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e002      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e5c:	58024400 	.word	0x58024400
      break;
 8002e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e68:	4b9b      	ldr	r3, [pc, #620]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e74:	4998      	ldr	r1, [pc, #608]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e7a:	e001      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d047      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e94:	d030      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e9a:	d82a      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002e9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea0:	d02c      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea6:	d824      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d018      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	d81e      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d007      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec0:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	4a84      	ldr	r2, [pc, #528]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ecc:	e017      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fd6b 	bl	80039b0 <RCCEx_PLL2_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ede:	e00e      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3324      	adds	r3, #36	; 0x24
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fe14 	bl	8003b14 <RCCEx_PLL3_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e005      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f04:	4b74      	ldr	r3, [pc, #464]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f10:	4971      	ldr	r1, [pc, #452]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	650b      	str	r3, [r1, #80]	; 0x50
 8002f16:	e001      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d049      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d02e      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f36:	d828      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f3c:	d02a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f42:	d822      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002f44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f48:	d026      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f4e:	d81c      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f54:	d010      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f5a:	d816      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01d      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d111      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fd1f 	bl	80039b0 <RCCEx_PLL2_Config>
 8002f72:	4603      	mov	r3, r0
 8002f74:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f76:	e012      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fdc8 	bl	8003b14 <RCCEx_PLL3_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f88:	e009      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8e:	e006      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002f90:	bf00      	nop
 8002f92:	e004      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002f94:	bf00      	nop
 8002f96:	e002      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb0:	4949      	ldr	r1, [pc, #292]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	650b      	str	r3, [r1, #80]	; 0x50
 8002fb6:	e001      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d053      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002fd2:	d034      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002fd4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002fd8:	d82e      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fde:	d030      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe4:	d828      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d02c      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d822      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ff6:	d028      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002ff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ffc:	d81c      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003002:	d010      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003008:	d816      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01f      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800300e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003012:	d111      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fcc8 	bl	80039b0 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003024:	e014      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd71 	bl	8003b14 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003036:	e00b      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e008      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800303e:	bf00      	nop
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003042:	bf00      	nop
 8003044:	e004      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003046:	bf00      	nop
 8003048:	e002      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800304e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003064:	491c      	ldr	r1, [pc, #112]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003066:	4313      	orrs	r3, r2
 8003068:	658b      	str	r3, [r1, #88]	; 0x58
 800306a:	e001      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d031      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d00e      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308a:	d814      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d015      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003094:	d10f      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030a2:	e00c      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fc80 	bl	80039b0 <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	4901      	ldr	r1, [pc, #4]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	650b      	str	r3, [r1, #80]	; 0x50
 80030d6:	e003      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80030d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d032      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d81b      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	08003133 	.word	0x08003133
 8003100:	0800310d 	.word	0x0800310d
 8003104:	0800311b 	.word	0x0800311b
 8003108:	08003133 	.word	0x08003133
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310c:	4bb2      	ldr	r3, [pc, #712]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4ab1      	ldr	r2, [pc, #708]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003118:	e00c      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fc45 	bl	80039b0 <RCCEx_PLL2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800312a:	e003      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	75fb      	strb	r3, [r7, #23]
      break;
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800313a:	4ba7      	ldr	r3, [pc, #668]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	49a4      	ldr	r1, [pc, #656]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003148:	4313      	orrs	r3, r2
 800314a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800314c:	e001      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8086 	beq.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003160:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a9d      	ldr	r2, [pc, #628]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800316c:	f7fd fc08 	bl	8000980 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003172:	e009      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fd fc04 	bl	8000980 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d902      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	75fb      	strb	r3, [r7, #23]
        break;
 8003186:	e005      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003188:	4b94      	ldr	r3, [pc, #592]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ef      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d166      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800319a:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800319c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031a4:	4053      	eors	r3, r2
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d013      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b8:	4b87      	ldr	r3, [pc, #540]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a86      	ldr	r2, [pc, #536]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c4:	4b84      	ldr	r3, [pc, #528]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a83      	ldr	r2, [pc, #524]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031d0:	4a81      	ldr	r2, [pc, #516]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e0:	d115      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fd fbcd 	bl	8000980 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e8:	e00b      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd fbc9 	bl	8000980 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d902      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003202:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ed      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d126      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003222:	d10d      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003224:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003232:	0919      	lsrs	r1, r3, #4
 8003234:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003236:	400b      	ands	r3, r1
 8003238:	4967      	ldr	r1, [pc, #412]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800323a:	4313      	orrs	r3, r2
 800323c:	610b      	str	r3, [r1, #16]
 800323e:	e005      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003240:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003246:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800324a:	6113      	str	r3, [r2, #16]
 800324c:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800324e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325a:	495f      	ldr	r1, [pc, #380]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800325c:	4313      	orrs	r3, r2
 800325e:	670b      	str	r3, [r1, #112]	; 0x70
 8003260:	e004      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	75bb      	strb	r3, [r7, #22]
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d07f      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327e:	2b28      	cmp	r3, #40	; 0x28
 8003280:	d866      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003357 	.word	0x08003357
 800328c:	08003351 	.word	0x08003351
 8003290:	08003351 	.word	0x08003351
 8003294:	08003351 	.word	0x08003351
 8003298:	08003351 	.word	0x08003351
 800329c:	08003351 	.word	0x08003351
 80032a0:	08003351 	.word	0x08003351
 80032a4:	08003351 	.word	0x08003351
 80032a8:	0800332d 	.word	0x0800332d
 80032ac:	08003351 	.word	0x08003351
 80032b0:	08003351 	.word	0x08003351
 80032b4:	08003351 	.word	0x08003351
 80032b8:	08003351 	.word	0x08003351
 80032bc:	08003351 	.word	0x08003351
 80032c0:	08003351 	.word	0x08003351
 80032c4:	08003351 	.word	0x08003351
 80032c8:	0800333f 	.word	0x0800333f
 80032cc:	08003351 	.word	0x08003351
 80032d0:	08003351 	.word	0x08003351
 80032d4:	08003351 	.word	0x08003351
 80032d8:	08003351 	.word	0x08003351
 80032dc:	08003351 	.word	0x08003351
 80032e0:	08003351 	.word	0x08003351
 80032e4:	08003351 	.word	0x08003351
 80032e8:	08003357 	.word	0x08003357
 80032ec:	08003351 	.word	0x08003351
 80032f0:	08003351 	.word	0x08003351
 80032f4:	08003351 	.word	0x08003351
 80032f8:	08003351 	.word	0x08003351
 80032fc:	08003351 	.word	0x08003351
 8003300:	08003351 	.word	0x08003351
 8003304:	08003351 	.word	0x08003351
 8003308:	08003357 	.word	0x08003357
 800330c:	08003351 	.word	0x08003351
 8003310:	08003351 	.word	0x08003351
 8003314:	08003351 	.word	0x08003351
 8003318:	08003351 	.word	0x08003351
 800331c:	08003351 	.word	0x08003351
 8003320:	08003351 	.word	0x08003351
 8003324:	08003351 	.word	0x08003351
 8003328:	08003357 	.word	0x08003357
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fb3c 	bl	80039b0 <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800333c:	e00c      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fbe5 	bl	8003b14 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	75fb      	strb	r3, [r7, #23]
      break;
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8003356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336c:	491a      	ldr	r1, [pc, #104]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800336e:	4313      	orrs	r3, r2
 8003370:	654b      	str	r3, [r1, #84]	; 0x54
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03f      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003388:	2b05      	cmp	r3, #5
 800338a:	d821      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033e5 	.word	0x080033e5
 8003398:	080033ad 	.word	0x080033ad
 800339c:	080033bf 	.word	0x080033bf
 80033a0:	080033e5 	.word	0x080033e5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033e5 	.word	0x080033e5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fafc 	bl	80039b0 <RCCEx_PLL2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033bc:	e013      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3324      	adds	r3, #36	; 0x24
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fba5 	bl	8003b14 <RCCEx_PLL3_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033ce:	e00a      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
      break;
 80033d4:	e007      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
 80033dc:	58024800 	.word	0x58024800
 80033e0:	00ffffcf 	.word	0x00ffffcf
      break;
 80033e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033ec:	4b9f      	ldr	r3, [pc, #636]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f023 0207 	bic.w	r2, r3, #7
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f8:	499c      	ldr	r1, [pc, #624]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	654b      	str	r3, [r1, #84]	; 0x54
 80033fe:	e001      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d039      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003416:	2b05      	cmp	r3, #5
 8003418:	d820      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003463 	.word	0x08003463
 8003424:	08003439 	.word	0x08003439
 8003428:	0800344b 	.word	0x0800344b
 800342c:	08003463 	.word	0x08003463
 8003430:	08003463 	.word	0x08003463
 8003434:	08003463 	.word	0x08003463
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fab6 	bl	80039b0 <RCCEx_PLL2_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003448:	e00c      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3324      	adds	r3, #36	; 0x24
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fb5f 	bl	8003b14 <RCCEx_PLL3_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800345a:	e003      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
      break;
 8003460:	e000      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800346a:	4b80      	ldr	r3, [pc, #512]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	497c      	ldr	r1, [pc, #496]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	658b      	str	r3, [r1, #88]	; 0x58
 800347e:	e001      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d04b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800349a:	d02e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800349c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a0:	d828      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d02a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x966>
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d822      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80034ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034b2:	d026      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80034b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034b8:	d81c      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80034ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034be:	d010      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80034c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c4:	d816      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01d      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80034ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fa6a 	bl	80039b0 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034e0:	e012      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3324      	adds	r3, #36	; 0x24
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fb13 	bl	8003b14 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034f2:	e009      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
      break;
 80034f8:	e006      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80034fa:	bf00      	nop
 80034fc:	e004      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350e:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351c:	4953      	ldr	r1, [pc, #332]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	654b      	str	r3, [r1, #84]	; 0x54
 8003522:	e001      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d04b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800353a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800353e:	d02e      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003540:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003544:	d828      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	d02a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d822      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003556:	d026      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800355c:	d81c      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800355e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003562:	d010      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003568:	d816      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01d      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d111      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa18 	bl	80039b0 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003584:	e012      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3324      	adds	r3, #36	; 0x24
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fac1 	bl	8003b14 <RCCEx_PLL3_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003596:	e009      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	75fb      	strb	r3, [r7, #23]
      break;
 800359c:	e006      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80035aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035b2:	4b2e      	ldr	r3, [pc, #184]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035c0:	492a      	ldr	r1, [pc, #168]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	658b      	str	r3, [r1, #88]	; 0x58
 80035c6:	e001      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d04d      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035e2:	d02e      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80035e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035e8:	d828      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d02a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f4:	d822      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80035f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035fa:	d026      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80035fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003600:	d81c      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003606:	d010      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360c:	d816      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01d      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003616:	d111      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f9c6 	bl	80039b0 <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003628:	e012      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3324      	adds	r3, #36	; 0x24
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa6f 	bl	8003b14 <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800363a:	e009      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
      break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003642:	bf00      	nop
 8003644:	e004      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800364e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003664:	4901      	ldr	r1, [pc, #4]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	658b      	str	r3, [r1, #88]	; 0x58
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800366c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	d10a      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3324      	adds	r3, #36	; 0x24
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa3e 	bl	8003b14 <RCCEx_PLL3_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80036a2:	4b8c      	ldr	r3, [pc, #560]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	4988      	ldr	r1, [pc, #544]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3324      	adds	r3, #36	; 0x24
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa1d 	bl	8003b14 <RCCEx_PLL3_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036e4:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f2:	4978      	ldr	r1, [pc, #480]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d034      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800370a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800370e:	d01d      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003714:	d817      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d009      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003720:	e011      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f941 	bl	80039b0 <RCCEx_PLL2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003732:	e00c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3324      	adds	r3, #36	; 0x24
 8003738:	2102      	movs	r1, #2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f9ea 	bl	8003b14 <RCCEx_PLL3_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
      break;
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003754:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003762:	495c      	ldr	r1, [pc, #368]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	658b      	str	r3, [r1, #88]	; 0x58
 8003768:	e001      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d033      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003780:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003784:	d01c      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800378a:	d816      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800378c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003790:	d003      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003796:	d007      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003798:	e00f      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379a:	4b4e      	ldr	r3, [pc, #312]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	4a4d      	ldr	r2, [pc, #308]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80037a6:	e00c      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3324      	adds	r3, #36	; 0x24
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f9b0 	bl	8003b14 <RCCEx_PLL3_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80037b8:	e003      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
      break;
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80037c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d6:	493f      	ldr	r1, [pc, #252]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	654b      	str	r3, [r1, #84]	; 0x54
 80037dc:	e001      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d029      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d007      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80037fc:	e00f      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fe:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800380a:	e00b      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	2102      	movs	r1, #2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f8cc 	bl	80039b0 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
      break;
 8003822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	4927      	ldr	r1, [pc, #156]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003838:	4313      	orrs	r3, r2
 800383a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800383c:	e001      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3324      	adds	r3, #36	; 0x24
 8003852:	2102      	movs	r1, #2
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f95d 	bl	8003b14 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d035      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800387a:	d017      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800387c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003880:	d811      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003886:	d013      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d80b      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d106      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80038a4:	e007      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
      break;
 80038aa:	e004      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80038ac:	bf00      	nop
 80038ae:	e002      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80038b0:	bf00      	nop
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ca:	4902      	ldr	r1, [pc, #8]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	654b      	str	r3, [r1, #84]	; 0x54
 80038d0:	e004      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038e8:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f4:	492d      	ldr	r1, [pc, #180]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003912:	4926      	ldr	r1, [pc, #152]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003914:	4313      	orrs	r3, r2
 8003916:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	491e      	ldr	r1, [pc, #120]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003932:	4313      	orrs	r3, r2
 8003934:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800394c:	6113      	str	r3, [r2, #16]
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003958:	4914      	ldr	r1, [pc, #80]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800395a:	4313      	orrs	r3, r2
 800395c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	da08      	bge.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003974:	4313      	orrs	r3, r2
 8003976:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4906      	ldr	r1, [pc, #24]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003994:	4313      	orrs	r3, r2
 8003996:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003998:	7dbb      	ldrb	r3, [r7, #22]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58024400 	.word	0x58024400

080039b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d101      	bne.n	80039ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e099      	b.n	8003b02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80039ce:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4e      	ldr	r2, [pc, #312]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 80039d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039da:	f7fc ffd1 	bl	8000980 <HAL_GetTick>
 80039de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039e2:	f7fc ffcd 	bl	8000980 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e086      	b.n	8003b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a00:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	031b      	lsls	r3, r3, #12
 8003a0e:	493f      	ldr	r1, [pc, #252]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	628b      	str	r3, [r1, #40]	; 0x28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	025b      	lsls	r3, r3, #9
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a44:	4931      	ldr	r1, [pc, #196]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a4a:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	492d      	ldr	r1, [pc, #180]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f023 0220 	bic.w	r2, r3, #32
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	4928      	ldr	r1, [pc, #160]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a74:	f023 0310 	bic.w	r3, r3, #16
 8003a78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <RCCEx_PLL2_Config+0x160>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	69d2      	ldr	r2, [r2, #28]
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	4920      	ldr	r1, [pc, #128]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003aac:	e00f      	b.n	8003ace <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ac0:	e005      	b.n	8003ace <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ada:	f7fc ff51 	bl	8000980 <HAL_GetTick>
 8003ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ae0:	e008      	b.n	8003af4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ae2:	f7fc ff4d 	bl	8000980 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e006      	b.n	8003b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <RCCEx_PLL2_Config+0x15c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	ffff0007 	.word	0xffff0007

08003b14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b22:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d101      	bne.n	8003b32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e099      	b.n	8003c66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b32:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3e:	f7fc ff1f 	bl	8000980 <HAL_GetTick>
 8003b42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b44:	e008      	b.n	8003b58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b46:	f7fc ff1b 	bl	8000980 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e086      	b.n	8003c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b58:	4b45      	ldr	r3, [pc, #276]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b64:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	051b      	lsls	r3, r3, #20
 8003b72:	493f      	ldr	r1, [pc, #252]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	628b      	str	r3, [r1, #40]	; 0x28
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	025b      	lsls	r3, r3, #9
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ba8:	4931      	ldr	r1, [pc, #196]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	492d      	ldr	r1, [pc, #180]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4928      	ldr	r1, [pc, #160]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <RCCEx_PLL3_Config+0x160>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	69d2      	ldr	r2, [r2, #28]
 8003bea:	00d2      	lsls	r2, r2, #3
 8003bec:	4920      	ldr	r1, [pc, #128]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c10:	e00f      	b.n	8003c32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c18:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c24:	e005      	b.n	8003c32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3e:	f7fc fe9f 	bl	8000980 <HAL_GetTick>
 8003c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c44:	e008      	b.n	8003c58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c46:	f7fc fe9b 	bl	8000980 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e006      	b.n	8003c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <RCCEx_PLL3_Config+0x15c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
 8003c74:	ffff0007 	.word	0xffff0007

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4d0d      	ldr	r5, [pc, #52]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7c:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	2600      	movs	r6, #0
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	4d0b      	ldr	r5, [pc, #44]	; (8003cb8 <__libc_init_array+0x40>)
 8003c8a:	4c0c      	ldr	r4, [pc, #48]	; (8003cbc <__libc_init_array+0x44>)
 8003c8c:	f000 f82e 	bl	8003cec <_init>
 8003c90:	1b64      	subs	r4, r4, r5
 8003c92:	10a4      	asrs	r4, r4, #2
 8003c94:	2600      	movs	r6, #0
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08003d70 	.word	0x08003d70
 8003cb4:	08003d70 	.word	0x08003d70
 8003cb8:	08003d70 	.word	0x08003d70
 8003cbc:	08003d74 	.word	0x08003d74

08003cc0 <memcpy>:
 8003cc0:	440a      	add	r2, r1
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cc8:	d100      	bne.n	8003ccc <memcpy+0xc>
 8003cca:	4770      	bx	lr
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cd6:	4291      	cmp	r1, r2
 8003cd8:	d1f9      	bne.n	8003cce <memcpy+0xe>
 8003cda:	bd10      	pop	{r4, pc}

08003cdc <memset>:
 8003cdc:	4402      	add	r2, r0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <memset+0xa>
 8003ce4:	4770      	bx	lr
 8003ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cea:	e7f9      	b.n	8003ce0 <memset+0x4>

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
