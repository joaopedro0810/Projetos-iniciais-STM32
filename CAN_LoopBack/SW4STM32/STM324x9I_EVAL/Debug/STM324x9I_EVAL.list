
STM324x9I_EVAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001630  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080017dc  080017dc  000117dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001818  08001818  00011818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  20000000  08001820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
  8 .bss          00000090  20000034  20000034  00020034  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c4  200000c4  00020034  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000901d  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001c5c  00000000  00000000  00029081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00002b42  00000000  00000000  0002acdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  0002d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002219a  00000000  00000000  0002e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086dd  00000000  00000000  000506fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6730  00000000  00000000  00058dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000efc  00000000  00000000  0012f558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080017c4 	.word	0x080017c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	080017c4 	.word	0x080017c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004f2:	4604      	mov	r4, r0
{
 80004f4:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 80004f6:	bb08      	cbnz	r0, 800053c <BSP_LED_Init+0x4c>
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <BSP_LED_Init+0xa8>)
 80004fa:	9001      	str	r0, [sp, #4]
 80004fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000510:	4e23      	ldr	r6, [pc, #140]	; (80005a0 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000512:	f833 7014 	ldrh.w	r7, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000516:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800051a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800051c:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000520:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000522:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	e9cd 5506 	strd	r5, r5, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000528:	f000 fc40 	bl	8000dac <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800052c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8000530:	462a      	mov	r2, r5
 8000532:	4639      	mov	r1, r7
 8000534:	f000 fd20 	bl	8000f78 <HAL_GPIO_WritePin>
}
 8000538:	b00b      	add	sp, #44	; 0x2c
 800053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800053c:	2801      	cmp	r0, #1
 800053e:	d10c      	bne.n	800055a <BSP_LED_Init+0x6a>
 8000540:	2300      	movs	r3, #0
 8000542:	9302      	str	r3, [sp, #8]
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <BSP_LED_Init+0xa8>)
 8000546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	9b02      	ldr	r3, [sp, #8]
 8000558:	e7d9      	b.n	800050e <BSP_LED_Init+0x1e>
 800055a:	2802      	cmp	r0, #2
 800055c:	d10c      	bne.n	8000578 <BSP_LED_Init+0x88>
 800055e:	2300      	movs	r3, #0
 8000560:	9303      	str	r3, [sp, #12]
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <BSP_LED_Init+0xa8>)
 8000564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000572:	9303      	str	r3, [sp, #12]
 8000574:	9b03      	ldr	r3, [sp, #12]
 8000576:	e7ca      	b.n	800050e <BSP_LED_Init+0x1e>
 8000578:	2803      	cmp	r0, #3
 800057a:	d1c8      	bne.n	800050e <BSP_LED_Init+0x1e>
 800057c:	2300      	movs	r3, #0
 800057e:	9304      	str	r3, [sp, #16]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <BSP_LED_Init+0xa8>)
 8000582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000590:	9304      	str	r3, [sp, #16]
 8000592:	9b04      	ldr	r3, [sp, #16]
 8000594:	e7bb      	b.n	800050e <BSP_LED_Init+0x1e>
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	080017dc 	.word	0x080017dc
 80005a0:	20000000 	.word	0x20000000

080005a4 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <BSP_LED_On+0x14>)
 80005a6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <BSP_LED_On+0x18>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005b2:	f000 bce1 	b.w	8000f78 <HAL_GPIO_WritePin>
 80005b6:	bf00      	nop
 80005b8:	080017dc 	.word	0x080017dc
 80005bc:	20000000 	.word	0x20000000

080005c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c0:	490f      	ldr	r1, [pc, #60]	; (8000600 <SystemInit+0x40>)
 80005c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <SystemInit+0x44>)
 80005d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80005d4:	f042 0201 	orr.w	r2, r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <SystemInit+0x48>)
 80005ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005f4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005fa:	608b      	str	r3, [r1, #8]
#endif
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	40023800 	.word	0x40023800
 8000608:	24003010 	.word	0x24003010

0800060c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800060c:	4770      	bx	lr
	...

08000610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_InitTick+0x3c>)
 8000614:	4e0e      	ldr	r6, [pc, #56]	; (8000650 <HAL_InitTick+0x40>)
{
 8000616:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	7830      	ldrb	r0, [r6, #0]
 800061e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000622:	6810      	ldr	r0, [r2, #0]
 8000624:	fbb0 f0f3 	udiv	r0, r0, r3
 8000628:	f000 fbac 	bl	8000d84 <HAL_SYSTICK_Config>
 800062c:	4604      	mov	r4, r0
 800062e:	b950      	cbnz	r0, 8000646 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000630:	2d0f      	cmp	r5, #15
 8000632:	d808      	bhi.n	8000646 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	4602      	mov	r2, r0
 8000636:	4629      	mov	r1, r5
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 fb70 	bl	8000d20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	6075      	str	r5, [r6, #4]
 8000642:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000644:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000646:	2001      	movs	r0, #1
 8000648:	e7fc      	b.n	8000644 <HAL_InitTick+0x34>
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	2000002c 	.word	0x2000002c

08000654 <HAL_Init>:
{
 8000654:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_Init+0x30>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800065e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000666:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800066e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 fb43 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f7ff ffca 	bl	8000610 <HAL_InitTick>
  HAL_MspInit();
 800067c:	f7ff ffc6 	bl	800060c <HAL_MspInit>
}
 8000680:	2000      	movs	r0, #0
 8000682:	bd08      	pop	{r3, pc}
 8000684:	40023c00 	.word	0x40023c00

08000688 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x10>)
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_IncTick+0x14>)
 800068c:	6811      	ldr	r1, [r2, #0]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	440b      	add	r3, r1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000050 	.word	0x20000050
 800069c:	2000002c 	.word	0x2000002c

080006a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <HAL_GetTick+0x8>)
 80006a2:	6818      	ldr	r0, [r3, #0]
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000050 	.word	0x20000050

080006ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006ae:	4604      	mov	r4, r0
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d06e      	beq.n	8000792 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006b4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80006b8:	b90b      	cbnz	r3, 80006be <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006ba:	f001 f80b 	bl	80016d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006be:	6822      	ldr	r2, [r4, #0]
 80006c0:	6813      	ldr	r3, [r2, #0]
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006c8:	f7ff ffea 	bl	80006a0 <HAL_GetTick>
 80006cc:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	07d1      	lsls	r1, r2, #31
 80006d4:	d551      	bpl.n	800077a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	f022 0202 	bic.w	r2, r2, #2
 80006dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006de:	f7ff ffdf 	bl	80006a0 <HAL_GetTick>
 80006e2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	0792      	lsls	r2, r2, #30
 80006ea:	d454      	bmi.n	8000796 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006ec:	7e22      	ldrb	r2, [r4, #24]
 80006ee:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	bf0c      	ite	eq
 80006f4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006f8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006fe:	7e62      	ldrb	r2, [r4, #25]
 8000700:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	bf0c      	ite	eq
 8000706:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800070a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800070e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000710:	7ea2      	ldrb	r2, [r4, #26]
 8000712:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	bf0c      	ite	eq
 8000718:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800071c:	f022 0220 	bicne.w	r2, r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000722:	7ee2      	ldrb	r2, [r4, #27]
 8000724:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	bf0c      	ite	eq
 800072a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800072e:	f042 0210 	orrne.w	r2, r2, #16
 8000732:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000734:	7f22      	ldrb	r2, [r4, #28]
 8000736:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	bf0c      	ite	eq
 800073c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000740:	f022 0208 	bicne.w	r2, r2, #8
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000746:	7f62      	ldrb	r2, [r4, #29]
 8000748:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	bf0c      	ite	eq
 800074e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000752:	f022 0204 	bicne.w	r2, r2, #4
 8000756:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000758:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800075c:	430a      	orrs	r2, r1
 800075e:	6921      	ldr	r1, [r4, #16]
 8000760:	430a      	orrs	r2, r1
 8000762:	6961      	ldr	r1, [r4, #20]
 8000764:	430a      	orrs	r2, r1
 8000766:	6861      	ldr	r1, [r4, #4]
 8000768:	3901      	subs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800076e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000770:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000772:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000774:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000778:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800077a:	f7ff ff91 	bl	80006a0 <HAL_GetTick>
 800077e:	1b40      	subs	r0, r0, r5
 8000780:	280a      	cmp	r0, #10
 8000782:	d9a4      	bls.n	80006ce <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800078c:	2305      	movs	r3, #5
 800078e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000792:	2001      	movs	r0, #1
 8000794:	e7f0      	b.n	8000778 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000796:	f7ff ff83 	bl	80006a0 <HAL_GetTick>
 800079a:	1b40      	subs	r0, r0, r5
 800079c:	280a      	cmp	r0, #10
 800079e:	d9a1      	bls.n	80006e4 <HAL_CAN_Init+0x38>
 80007a0:	e7f0      	b.n	8000784 <HAL_CAN_Init+0xd8>
	...

080007a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007a4:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007a6:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80007aa:	3b01      	subs	r3, #1
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d878      	bhi.n	80008a2 <HAL_CAN_ConfigFilter+0xfe>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007b0:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <HAL_CAN_ConfigFilter+0x10c>)
 80007b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80007be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007c2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80007c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80007ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007ce:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80007d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80007d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80007d8:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80007da:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80007de:	2401      	movs	r4, #1
 80007e0:	f002 001f 	and.w	r0, r2, #31
 80007e4:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80007e8:	ea25 0500 	bic.w	r5, r5, r0
 80007ec:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80007f0:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80007f2:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d135      	bne.n	8000864 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80007f8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80007fc:	4025      	ands	r5, r4
 80007fe:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000802:	68cb      	ldr	r3, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000804:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000806:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800080a:	00d3      	lsls	r3, r2, #3
 800080c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000810:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000814:	880a      	ldrh	r2, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000816:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800081a:	688d      	ldr	r5, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800081c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000820:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000824:	698a      	ldr	r2, [r1, #24]
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <HAL_CAN_ConfigFilter+0x10c>)
 8000828:	bb8a      	cbnz	r2, 800088e <HAL_CAN_ConfigFilter+0xea>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800082a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800082e:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000830:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000834:	690a      	ldr	r2, [r1, #16]
 8000836:	bb72      	cbnz	r2, 8000896 <HAL_CAN_ConfigFilter+0xf2>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000838:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800083c:	4014      	ands	r4, r2
 800083e:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000842:	6a0b      	ldr	r3, [r1, #32]
 8000844:	2b01      	cmp	r3, #1
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_CAN_ConfigFilter+0x10c>)
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000848:	bf02      	ittt	eq
 800084a:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800084e:	4310      	orreq	r0, r2
 8000850:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000854:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000858:	f022 0201 	bic.w	r2, r2, #1
 800085c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000860:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000862:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000864:	2d01      	cmp	r5, #1
 8000866:	d1dd      	bne.n	8000824 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000868:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 800086c:	4305      	orrs	r5, r0
 800086e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000872:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000874:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000876:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800087a:	00d3      	lsls	r3, r2, #3
 800087c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000880:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000884:	898a      	ldrh	r2, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000886:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800088a:	688d      	ldr	r5, [r1, #8]
 800088c:	e7c6      	b.n	800081c <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800088e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000892:	4302      	orrs	r2, r0
 8000894:	e7cc      	b.n	8000830 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000896:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800089a:	4302      	orrs	r2, r0
 800089c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80008a0:	e7cf      	b.n	8000842 <HAL_CAN_ConfigFilter+0x9e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a8:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80008aa:	2001      	movs	r0, #1
 80008ac:	e7d9      	b.n	8000862 <HAL_CAN_ConfigFilter+0xbe>
 80008ae:	bf00      	nop
 80008b0:	40006400 	.word	0x40006400

080008b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80008b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80008b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80008ba:	2b01      	cmp	r3, #1
{
 80008bc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80008be:	b2dd      	uxtb	r5, r3
 80008c0:	d120      	bne.n	8000904 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008c2:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80008d2:	f7ff fee5 	bl	80006a0 <HAL_GetTick>
 80008d6:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f013 0301 	ands.w	r3, r3, #1
 80008e0:	d102      	bne.n	80008e8 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008e2:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80008e4:	461d      	mov	r5, r3
 80008e6:	e00b      	b.n	8000900 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008e8:	f7ff feda 	bl	80006a0 <HAL_GetTick>
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	280a      	cmp	r0, #10
 80008f0:	d9f2      	bls.n	80008d8 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80008fa:	2305      	movs	r3, #5
 80008fc:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000900:	4628      	mov	r0, r5
 8000902:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800090a:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800090c:	2501      	movs	r5, #1
 800090e:	e7f7      	b.n	8000900 <HAL_CAN_Start+0x4c>

08000910 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000912:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000916:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000918:	3d01      	subs	r5, #1
 800091a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800091c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800091e:	d843      	bhi.n	80009a8 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000920:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000924:	d03c      	beq.n	80009a0 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000926:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800092a:	2c03      	cmp	r4, #3
 800092c:	f04f 0501 	mov.w	r5, #1
 8000930:	d105      	bne.n	800093e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000932:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000938:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800093a:	2001      	movs	r0, #1
 800093c:	e02a      	b.n	8000994 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800093e:	40a5      	lsls	r5, r4
 8000940:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000942:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000946:	f104 0318 	add.w	r3, r4, #24
 800094a:	bb20      	cbnz	r0, 8000996 <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800094c:	6808      	ldr	r0, [r1, #0]
 800094e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000956:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 800095a:	690d      	ldr	r5, [r1, #16]
 800095c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000960:	7d09      	ldrb	r1, [r1, #20]
 8000962:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000964:	bf08      	it	eq
 8000966:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800096a:	ea4f 1004 	mov.w	r0, r4, lsl #4
 800096e:	bf04      	itt	eq
 8000970:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000974:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000978:	4406      	add	r6, r0
 800097a:	6851      	ldr	r1, [r2, #4]
 800097c:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000986:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800098a:	f042 0201 	orr.w	r2, r2, #1
 800098e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000992:	2000      	movs	r0, #0
  }
}
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000996:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000998:	4338      	orrs	r0, r7
 800099a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 800099e:	e7d8      	b.n	8000952 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a6:	e7c7      	b.n	8000938 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ae:	e7c3      	b.n	8000938 <HAL_CAN_AddTxMessage+0x28>

080009b0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009b0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80009b4:	3b01      	subs	r3, #1
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d80c      	bhi.n	80009d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80009ba:	6803      	ldr	r3, [r0, #0]
 80009bc:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80009be:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80009c0:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80009c2:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80009c4:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 80009c8:	bf48      	it	mi
 80009ca:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	d502      	bpl.n	80009d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 80009d0:	3001      	adds	r0, #1
 80009d2:	4770      	bx	lr
  uint32_t freelevel = 0U;
 80009d4:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80009d6:	4770      	bx	lr

080009d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80009da:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80009de:	3c01      	subs	r4, #1
 80009e0:	2c01      	cmp	r4, #1
 80009e2:	d86c      	bhi.n	8000abe <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80009e4:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009e6:	b941      	cbnz	r1, 80009fa <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80009e8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80009ea:	07a4      	lsls	r4, r4, #30
 80009ec:	d107      	bne.n	80009fe <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009f4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80009f6:	2001      	movs	r0, #1
 80009f8:	e056      	b.n	8000aa8 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80009fa:	6934      	ldr	r4, [r6, #16]
 80009fc:	e7f5      	b.n	80009ea <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80009fe:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000a02:	010c      	lsls	r4, r1, #4
 8000a04:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000a08:	f007 0704 	and.w	r7, r7, #4
 8000a0c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000a0e:	2f00      	cmp	r7, #0
 8000a10:	d14b      	bne.n	8000aaa <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000a12:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000a16:	0d7f      	lsrs	r7, r7, #21
 8000a18:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000a1a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000a1e:	f007 0702 	and.w	r7, r7, #2
 8000a22:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000a24:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000a28:	f007 070f 	and.w	r7, r7, #15
 8000a2c:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a2e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a32:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a36:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a38:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a3c:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a3e:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a40:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a42:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000a46:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a48:	6802      	ldr	r2, [r0, #0]
 8000a4a:	4422      	add	r2, r4
 8000a4c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000a50:	0a12      	lsrs	r2, r2, #8
 8000a52:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a54:	6802      	ldr	r2, [r0, #0]
 8000a56:	4422      	add	r2, r4
 8000a58:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000a5c:	0c12      	lsrs	r2, r2, #16
 8000a5e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a60:	6802      	ldr	r2, [r0, #0]
 8000a62:	4422      	add	r2, r4
 8000a64:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000a68:	0e12      	lsrs	r2, r2, #24
 8000a6a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a6c:	6802      	ldr	r2, [r0, #0]
 8000a6e:	4422      	add	r2, r4
 8000a70:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a74:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a76:	6802      	ldr	r2, [r0, #0]
 8000a78:	4422      	add	r2, r4
 8000a7a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a7e:	0a12      	lsrs	r2, r2, #8
 8000a80:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a82:	6802      	ldr	r2, [r0, #0]
 8000a84:	4422      	add	r2, r4
 8000a86:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a8a:	0c12      	lsrs	r2, r2, #16
 8000a8c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a8e:	6802      	ldr	r2, [r0, #0]
 8000a90:	4422      	add	r2, r4
 8000a92:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a9a:	6803      	ldr	r3, [r0, #0]
 8000a9c:	b951      	cbnz	r1, 8000ab4 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	f042 0220 	orr.w	r2, r2, #32
 8000aa4:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000aa6:	2000      	movs	r0, #0
  }
}
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000aaa:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000aae:	08ff      	lsrs	r7, r7, #3
 8000ab0:	6057      	str	r7, [r2, #4]
 8000ab2:	e7b2      	b.n	8000a1a <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	f042 0220 	orr.w	r2, r2, #32
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	e7f3      	b.n	8000aa6 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000abe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac4:	e796      	b.n	80009f4 <HAL_CAN_GetRxMessage+0x1c>

08000ac6 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ac6:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000aca:	3b01      	subs	r3, #1
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d807      	bhi.n	8000ae0 <HAL_CAN_GetRxFifoFillLevel+0x1a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000ad0:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 8000ad2:	b919      	cbnz	r1, 8000adc <HAL_CAN_GetRxFifoFillLevel+0x16>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000ad4:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000ad6:	f000 0003 	and.w	r0, r0, #3
 8000ada:	4770      	bx	lr
 8000adc:	6918      	ldr	r0, [r3, #16]
 8000ade:	e7fa      	b.n	8000ad6 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8000ae0:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000ae4:	4770      	bx	lr

08000ae6 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000ae8:	4770      	bx	lr

08000aea <HAL_CAN_TxMailbox0AbortCallback>:
 8000aea:	4770      	bx	lr

08000aec <HAL_CAN_TxMailbox1AbortCallback>:
 8000aec:	4770      	bx	lr

08000aee <HAL_CAN_TxMailbox2AbortCallback>:
 8000aee:	4770      	bx	lr

08000af0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000af0:	4770      	bx	lr

08000af2 <HAL_CAN_RxFifo0FullCallback>:
 8000af2:	4770      	bx	lr

08000af4 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000af4:	4770      	bx	lr

08000af6 <HAL_CAN_RxFifo1FullCallback>:
 8000af6:	4770      	bx	lr

08000af8 <HAL_CAN_SleepCallback>:
 8000af8:	4770      	bx	lr

08000afa <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000afa:	4770      	bx	lr

08000afc <HAL_CAN_ErrorCallback>:
 8000afc:	4770      	bx	lr

08000afe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000afe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b02:	6803      	ldr	r3, [r0, #0]
 8000b04:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000b06:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000b0a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000b0c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000b10:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b14:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b18:	f016 0401 	ands.w	r4, r6, #1
{
 8000b1c:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b1e:	d022      	beq.n	8000b66 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b20:	f017 0401 	ands.w	r4, r7, #1
 8000b24:	d007      	beq.n	8000b36 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b26:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b28:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b2c:	f140 80a5 	bpl.w	8000c7a <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b30:	f7ff ffd8 	bl	8000ae4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b34:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b36:	05fb      	lsls	r3, r7, #23
 8000b38:	d509      	bpl.n	8000b4e <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b40:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b42:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b44:	f140 80a7 	bpl.w	8000c96 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f7ff ffcc 	bl	8000ae6 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b4e:	03fb      	lsls	r3, r7, #15
 8000b50:	d509      	bpl.n	8000b66 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b58:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b5a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b5c:	f140 80a9 	bpl.w	8000cb2 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b60:	4628      	mov	r0, r5
 8000b62:	f7ff ffc1 	bl	8000ae8 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000b66:	0733      	lsls	r3, r6, #28
 8000b68:	d507      	bpl.n	8000b7a <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000b6a:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b6e:	bf1f      	itttt	ne
 8000b70:	682b      	ldrne	r3, [r5, #0]
 8000b72:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000b74:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b78:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000b7a:	0777      	lsls	r7, r6, #29
 8000b7c:	d508      	bpl.n	8000b90 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000b7e:	f01b 0f08 	tst.w	fp, #8
 8000b82:	d005      	beq.n	8000b90 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b84:	682b      	ldr	r3, [r5, #0]
 8000b86:	2208      	movs	r2, #8
 8000b88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f7ff ffb1 	bl	8000af2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000b90:	07b0      	lsls	r0, r6, #30
 8000b92:	d506      	bpl.n	8000ba2 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0799      	lsls	r1, r3, #30
 8000b9a:	d002      	beq.n	8000ba2 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f7ff ffa7 	bl	8000af0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ba2:	0672      	lsls	r2, r6, #25
 8000ba4:	d507      	bpl.n	8000bb6 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ba6:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000baa:	bf1f      	itttt	ne
 8000bac:	682b      	ldrne	r3, [r5, #0]
 8000bae:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000bb0:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000bb4:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000bb6:	06b3      	lsls	r3, r6, #26
 8000bb8:	d508      	bpl.n	8000bcc <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000bba:	f01a 0f08 	tst.w	sl, #8
 8000bbe:	d005      	beq.n	8000bcc <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	f7ff ff95 	bl	8000af6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000bcc:	06f7      	lsls	r7, r6, #27
 8000bce:	d506      	bpl.n	8000bde <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	0798      	lsls	r0, r3, #30
 8000bd6:	d002      	beq.n	8000bde <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f7ff ff8b 	bl	8000af4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000bde:	03b1      	lsls	r1, r6, #14
 8000be0:	d508      	bpl.n	8000bf4 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000be2:	f019 0f10 	tst.w	r9, #16
 8000be6:	d005      	beq.n	8000bf4 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	2210      	movs	r2, #16
 8000bec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000bee:	4628      	mov	r0, r5
 8000bf0:	f7ff ff82 	bl	8000af8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000bf4:	03f2      	lsls	r2, r6, #15
 8000bf6:	d508      	bpl.n	8000c0a <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000bf8:	f019 0f08 	tst.w	r9, #8
 8000bfc:	d005      	beq.n	8000c0a <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	2208      	movs	r2, #8
 8000c02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000c04:	4628      	mov	r0, r5
 8000c06:	f7ff ff78 	bl	8000afa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000c0a:	0433      	lsls	r3, r6, #16
 8000c0c:	d52c      	bpl.n	8000c68 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000c0e:	f019 0f04 	tst.w	r9, #4
 8000c12:	682a      	ldr	r2, [r5, #0]
 8000c14:	d026      	beq.n	8000c64 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c16:	05f7      	lsls	r7, r6, #23
 8000c18:	d504      	bpl.n	8000c24 <HAL_CAN_IRQHandler+0x126>
 8000c1a:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000c1e:	bf18      	it	ne
 8000c20:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c24:	05b0      	lsls	r0, r6, #22
 8000c26:	d504      	bpl.n	8000c32 <HAL_CAN_IRQHandler+0x134>
 8000c28:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c2c:	bf18      	it	ne
 8000c2e:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c32:	0571      	lsls	r1, r6, #21
 8000c34:	d504      	bpl.n	8000c40 <HAL_CAN_IRQHandler+0x142>
 8000c36:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000c3a:	bf18      	it	ne
 8000c3c:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c40:	0533      	lsls	r3, r6, #20
 8000c42:	d50f      	bpl.n	8000c64 <HAL_CAN_IRQHandler+0x166>
 8000c44:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000c48:	d00c      	beq.n	8000c64 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000c4a:	2b40      	cmp	r3, #64	; 0x40
 8000c4c:	d04f      	beq.n	8000cee <HAL_CAN_IRQHandler+0x1f0>
 8000c4e:	d83e      	bhi.n	8000cce <HAL_CAN_IRQHandler+0x1d0>
 8000c50:	2b20      	cmp	r3, #32
 8000c52:	d046      	beq.n	8000ce2 <HAL_CAN_IRQHandler+0x1e4>
 8000c54:	2b30      	cmp	r3, #48	; 0x30
 8000c56:	d047      	beq.n	8000ce8 <HAL_CAN_IRQHandler+0x1ea>
 8000c58:	2b10      	cmp	r3, #16
 8000c5a:	d03f      	beq.n	8000cdc <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c5c:	6993      	ldr	r3, [r2, #24]
 8000c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c62:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c64:	2304      	movs	r3, #4
 8000c66:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c68:	b12c      	cbz	r4, 8000c76 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c6c:	431c      	orrs	r4, r3
 8000c6e:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c70:	4628      	mov	r0, r5
 8000c72:	f7ff ff43 	bl	8000afc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c7a:	077a      	lsls	r2, r7, #29
 8000c7c:	d405      	bmi.n	8000c8a <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c7e:	f017 0408 	ands.w	r4, r7, #8
 8000c82:	d105      	bne.n	8000c90 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c84:	f7ff ff31 	bl	8000aea <HAL_CAN_TxMailbox0AbortCallback>
 8000c88:	e755      	b.n	8000b36 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c8a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000c8e:	e752      	b.n	8000b36 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c90:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000c94:	e74f      	b.n	8000b36 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c96:	0579      	lsls	r1, r7, #21
 8000c98:	d502      	bpl.n	8000ca0 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c9a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000c9e:	e756      	b.n	8000b4e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ca0:	053a      	lsls	r2, r7, #20
 8000ca2:	d502      	bpl.n	8000caa <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ca4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ca8:	e751      	b.n	8000b4e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000caa:	4628      	mov	r0, r5
 8000cac:	f7ff ff1e 	bl	8000aec <HAL_CAN_TxMailbox1AbortCallback>
 8000cb0:	e74d      	b.n	8000b4e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000cb2:	0379      	lsls	r1, r7, #13
 8000cb4:	d502      	bpl.n	8000cbc <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000cb6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000cba:	e754      	b.n	8000b66 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000cbc:	033a      	lsls	r2, r7, #12
 8000cbe:	d502      	bpl.n	8000cc6 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000cc0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000cc4:	e74f      	b.n	8000b66 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f7ff ff11 	bl	8000aee <HAL_CAN_TxMailbox2AbortCallback>
 8000ccc:	e74b      	b.n	8000b66 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000cce:	2b50      	cmp	r3, #80	; 0x50
 8000cd0:	d010      	beq.n	8000cf4 <HAL_CAN_IRQHandler+0x1f6>
 8000cd2:	2b60      	cmp	r3, #96	; 0x60
 8000cd4:	d1c2      	bne.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000cd6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000cda:	e7bf      	b.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000cdc:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000ce0:	e7bc      	b.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ce2:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000ce6:	e7b9      	b.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ce8:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000cec:	e7b6      	b.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000cee:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000cf2:	e7b3      	b.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000cf4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000cf8:	e7b0      	b.n	8000c5c <HAL_CAN_IRQHandler+0x15e>
	...

08000cfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cfe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d18:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b530      	push	{r4, r5, lr}
 8000d24:	68dc      	ldr	r4, [r3, #12]
 8000d26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	2d04      	cmp	r5, #4
 8000d32:	bf28      	it	cs
 8000d34:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3c:	bf8c      	ite	hi
 8000d3e:	3c03      	subhi	r4, #3
 8000d40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d42:	fa03 f505 	lsl.w	r5, r3, r5
 8000d46:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4a:	40a3      	lsls	r3, r4
 8000d4c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000d52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	bfac      	ite	ge
 8000d5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	4a08      	ldrlt	r2, [pc, #32]	; (8000d80 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	bfb8      	it	lt
 8000d66:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	bfaa      	itet	ge
 8000d6e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d78:	bd30      	pop	{r4, r5, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	e000ed14 	.word	0xe000ed14

08000d84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	3801      	subs	r0, #1
 8000d86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d8a:	d20b      	bcs.n	8000da4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	21f0      	movs	r1, #240	; 0xf0
 8000d96:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000da4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000f74 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db4:	4a6d      	ldr	r2, [pc, #436]	; (8000f6c <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000dba:	2401      	movs	r4, #1
 8000dbc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000dc2:	43ac      	bics	r4, r5
 8000dc4:	f040 80b9 	bne.w	8000f3a <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc8:	684d      	ldr	r5, [r1, #4]
 8000dca:	f005 0403 	and.w	r4, r5, #3
 8000dce:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de0:	d834      	bhi.n	8000e4c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000de2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de8:	68cf      	ldr	r7, [r1, #12]
 8000dea:	fa07 f708 	lsl.w	r7, r7, r8
 8000dee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000df2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000df4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000dfe:	409f      	lsls	r7, r3
 8000e00:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000e04:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000e06:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e08:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	688f      	ldr	r7, [r1, #8]
 8000e0e:	fa07 f708 	lsl.w	r7, r7, r8
 8000e12:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000e18:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	d119      	bne.n	8000e50 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e20:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e24:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e30:	f04f 0e0f 	mov.w	lr, #15
 8000e34:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000e38:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	690f      	ldr	r7, [r1, #16]
 8000e3e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	f8ca 7020 	str.w	r7, [sl, #32]
 8000e4a:	e001      	b.n	8000e50 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	2c03      	cmp	r4, #3
 8000e4e:	d1da      	bne.n	8000e06 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000e50:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e52:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e56:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e5a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000e5e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e60:	d06b      	beq.n	8000f3a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	f04f 0a00 	mov.w	sl, #0
 8000e66:	f8cd a004 	str.w	sl, [sp, #4]
 8000e6a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6e:	4c40      	ldr	r4, [pc, #256]	; (8000f70 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000e74:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000e78:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000e7c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000e80:	9601      	str	r6, [sp, #4]
 8000e82:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e84:	f023 0603 	bic.w	r6, r3, #3
 8000e88:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000e8c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e94:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e9c:	270f      	movs	r7, #15
 8000e9e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea8:	d04e      	beq.n	8000f48 <HAL_GPIO_Init+0x19c>
 8000eaa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000eae:	42a0      	cmp	r0, r4
 8000eb0:	d04c      	beq.n	8000f4c <HAL_GPIO_Init+0x1a0>
 8000eb2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000eb6:	42a0      	cmp	r0, r4
 8000eb8:	d04a      	beq.n	8000f50 <HAL_GPIO_Init+0x1a4>
 8000eba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ebe:	42a0      	cmp	r0, r4
 8000ec0:	d048      	beq.n	8000f54 <HAL_GPIO_Init+0x1a8>
 8000ec2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ec6:	42a0      	cmp	r0, r4
 8000ec8:	d046      	beq.n	8000f58 <HAL_GPIO_Init+0x1ac>
 8000eca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ece:	42a0      	cmp	r0, r4
 8000ed0:	d044      	beq.n	8000f5c <HAL_GPIO_Init+0x1b0>
 8000ed2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ed6:	42a0      	cmp	r0, r4
 8000ed8:	d042      	beq.n	8000f60 <HAL_GPIO_Init+0x1b4>
 8000eda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ede:	42a0      	cmp	r0, r4
 8000ee0:	d040      	beq.n	8000f64 <HAL_GPIO_Init+0x1b8>
 8000ee2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ee6:	42a0      	cmp	r0, r4
 8000ee8:	d03e      	beq.n	8000f68 <HAL_GPIO_Init+0x1bc>
 8000eea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000eee:	42a0      	cmp	r0, r4
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2409      	moveq	r4, #9
 8000ef4:	240a      	movne	r4, #10
 8000ef6:	fa04 f40e 	lsl.w	r4, r4, lr
 8000efa:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efc:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000efe:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f04:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000f06:	bf54      	ite	pl
 8000f08:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000f0a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000f0e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f12:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000f14:	bf54      	ite	pl
 8000f16:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000f18:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000f1c:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f20:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000f22:	bf54      	ite	pl
 8000f24:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000f26:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000f2a:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f2e:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000f30:	bf54      	ite	pl
 8000f32:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000f34:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000f38:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	2b10      	cmp	r3, #16
 8000f3e:	f47f af3b 	bne.w	8000db8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000f42:	b003      	add	sp, #12
 8000f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f48:	4654      	mov	r4, sl
 8000f4a:	e7d4      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f4c:	2401      	movs	r4, #1
 8000f4e:	e7d2      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f50:	2402      	movs	r4, #2
 8000f52:	e7d0      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f54:	2403      	movs	r4, #3
 8000f56:	e7ce      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f58:	2404      	movs	r4, #4
 8000f5a:	e7cc      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f5c:	2405      	movs	r4, #5
 8000f5e:	e7ca      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f60:	2406      	movs	r4, #6
 8000f62:	e7c8      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f64:	2407      	movs	r4, #7
 8000f66:	e7c6      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f68:	2408      	movs	r4, #8
 8000f6a:	e7c4      	b.n	8000ef6 <HAL_GPIO_Init+0x14a>
 8000f6c:	40013c00 	.word	0x40013c00
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	b10a      	cbz	r2, 8000f7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7a:	6181      	str	r1, [r0, #24]
  }
}
 8000f7c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	0409      	lsls	r1, r1, #16
 8000f80:	e7fb      	b.n	8000f7a <HAL_GPIO_WritePin+0x2>
	...

08000f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f8c:	4d18      	ldr	r5, [pc, #96]	; (8000ff0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_PWREx_EnableOverDrive+0x70>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000fa6:	f7ff fb7b 	bl	80006a0 <HAL_GetTick>
 8000faa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fac:	686b      	ldr	r3, [r5, #4]
 8000fae:	03da      	lsls	r2, r3, #15
 8000fb0:	d50b      	bpl.n	8000fca <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fb4:	4d0e      	ldr	r5, [pc, #56]	; (8000ff0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8000fba:	f7ff fb71 	bl	80006a0 <HAL_GetTick>
 8000fbe:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fc0:	686b      	ldr	r3, [r5, #4]
 8000fc2:	039b      	lsls	r3, r3, #14
 8000fc4:	d50a      	bpl.n	8000fdc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e006      	b.n	8000fd8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fca:	f7ff fb69 	bl	80006a0 <HAL_GetTick>
 8000fce:	1b00      	subs	r0, r0, r4
 8000fd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fd4:	d9ea      	bls.n	8000fac <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000fd6:	2003      	movs	r0, #3
}
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fdc:	f7ff fb60 	bl	80006a0 <HAL_GetTick>
 8000fe0:	1b00      	subs	r0, r0, r4
 8000fe2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fe6:	d9eb      	bls.n	8000fc0 <HAL_PWREx_EnableOverDrive+0x3c>
 8000fe8:	e7f5      	b.n	8000fd6 <HAL_PWREx_EnableOverDrive+0x52>
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	420e0000 	.word	0x420e0000

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	b340      	cbz	r0, 8001052 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001000:	6803      	ldr	r3, [r0, #0]
 8001002:	07dd      	lsls	r5, r3, #31
 8001004:	d410      	bmi.n	8001028 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	0798      	lsls	r0, r3, #30
 800100a:	d45e      	bmi.n	80010ca <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	071a      	lsls	r2, r3, #28
 8001010:	f100 80a0 	bmi.w	8001154 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	075b      	lsls	r3, r3, #29
 8001018:	f100 80c0 	bmi.w	800119c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101c:	69a0      	ldr	r0, [r4, #24]
 800101e:	2800      	cmp	r0, #0
 8001020:	f040 8128 	bne.w	8001274 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001024:	2000      	movs	r0, #0
 8001026:	e02b      	b.n	8001080 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001028:	4b8f      	ldr	r3, [pc, #572]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	f002 020c 	and.w	r2, r2, #12
 8001030:	2a04      	cmp	r2, #4
 8001032:	d007      	beq.n	8001044 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103a:	2a08      	cmp	r2, #8
 800103c:	d10b      	bne.n	8001056 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	0251      	lsls	r1, r2, #9
 8001042:	d508      	bpl.n	8001056 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	039a      	lsls	r2, r3, #14
 800104a:	d5dc      	bpl.n	8001006 <HAL_RCC_OscConfig+0xe>
 800104c:	6863      	ldr	r3, [r4, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1d9      	bne.n	8001006 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001052:	2001      	movs	r0, #1
 8001054:	e014      	b.n	8001080 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001056:	6862      	ldr	r2, [r4, #4]
 8001058:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800105c:	d113      	bne.n	8001086 <HAL_RCC_OscConfig+0x8e>
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001064:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001066:	f7ff fb1b 	bl	80006a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4e7f      	ldr	r6, [pc, #508]	; (8001268 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800106c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	6833      	ldr	r3, [r6, #0]
 8001070:	039b      	lsls	r3, r3, #14
 8001072:	d4c8      	bmi.n	8001006 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fb14 	bl	80006a0 <HAL_GetTick>
 8001078:	1b40      	subs	r0, r0, r5
 800107a:	2864      	cmp	r0, #100	; 0x64
 800107c:	d9f7      	bls.n	800106e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800107e:	2003      	movs	r0, #3
}
 8001080:	b002      	add	sp, #8
 8001082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	4d78      	ldr	r5, [pc, #480]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001088:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	d107      	bne.n	80010a0 <HAL_RCC_OscConfig+0xa8>
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	602b      	str	r3, [r5, #0]
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800109e:	e7e2      	b.n	8001066 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a4:	602b      	str	r3, [r5, #0]
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ac:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d1d9      	bne.n	8001066 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80010b2:	f7ff faf5 	bl	80006a0 <HAL_GetTick>
 80010b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	039f      	lsls	r7, r3, #14
 80010bc:	d5a3      	bpl.n	8001006 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010be:	f7ff faef 	bl	80006a0 <HAL_GetTick>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	2864      	cmp	r0, #100	; 0x64
 80010c6:	d9f7      	bls.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 80010c8:	e7d9      	b.n	800107e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ca:	4b67      	ldr	r3, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	f012 0f0c 	tst.w	r2, #12
 80010d2:	d007      	beq.n	80010e4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010da:	2a08      	cmp	r2, #8
 80010dc:	d111      	bne.n	8001102 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	025e      	lsls	r6, r3, #9
 80010e2:	d40e      	bmi.n	8001102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e4:	4a60      	ldr	r2, [pc, #384]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	079d      	lsls	r5, r3, #30
 80010ea:	d502      	bpl.n	80010f2 <HAL_RCC_OscConfig+0xfa>
 80010ec:	68e3      	ldr	r3, [r4, #12]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d1af      	bne.n	8001052 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	6921      	ldr	r1, [r4, #16]
 80010f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010fe:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001100:	e784      	b.n	800100c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001102:	68e2      	ldr	r2, [r4, #12]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <HAL_RCC_OscConfig+0x274>)
 8001106:	b1b2      	cbz	r2, 8001136 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800110c:	f7ff fac8 	bl	80006a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	4d55      	ldr	r5, [pc, #340]	; (8001268 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001112:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	0798      	lsls	r0, r3, #30
 8001118:	d507      	bpl.n	800112a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	6922      	ldr	r2, [r4, #16]
 800111e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001122:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001126:	602b      	str	r3, [r5, #0]
 8001128:	e770      	b.n	800100c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fab9 	bl	80006a0 <HAL_GetTick>
 800112e:	1b80      	subs	r0, r0, r6
 8001130:	2802      	cmp	r0, #2
 8001132:	d9ef      	bls.n	8001114 <HAL_RCC_OscConfig+0x11c>
 8001134:	e7a3      	b.n	800107e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001136:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001138:	f7ff fab2 	bl	80006a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113c:	4e4a      	ldr	r6, [pc, #296]	; (8001268 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800113e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001140:	6833      	ldr	r3, [r6, #0]
 8001142:	0799      	lsls	r1, r3, #30
 8001144:	f57f af62 	bpl.w	800100c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff faaa 	bl	80006a0 <HAL_GetTick>
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	2802      	cmp	r0, #2
 8001150:	d9f6      	bls.n	8001140 <HAL_RCC_OscConfig+0x148>
 8001152:	e794      	b.n	800107e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001154:	6962      	ldr	r2, [r4, #20]
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <HAL_RCC_OscConfig+0x274>)
 8001158:	b182      	cbz	r2, 800117c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800115a:	2201      	movs	r2, #1
 800115c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001160:	f7ff fa9e 	bl	80006a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001164:	4e40      	ldr	r6, [pc, #256]	; (8001268 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001166:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001168:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800116a:	079f      	lsls	r7, r3, #30
 800116c:	f53f af52 	bmi.w	8001014 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fa96 	bl	80006a0 <HAL_GetTick>
 8001174:	1b40      	subs	r0, r0, r5
 8001176:	2802      	cmp	r0, #2
 8001178:	d9f6      	bls.n	8001168 <HAL_RCC_OscConfig+0x170>
 800117a:	e780      	b.n	800107e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800117c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001180:	f7ff fa8e 	bl	80006a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001184:	4e38      	ldr	r6, [pc, #224]	; (8001268 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001186:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001188:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800118a:	0798      	lsls	r0, r3, #30
 800118c:	f57f af42 	bpl.w	8001014 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fa86 	bl	80006a0 <HAL_GetTick>
 8001194:	1b40      	subs	r0, r0, r5
 8001196:	2802      	cmp	r0, #2
 8001198:	d9f6      	bls.n	8001188 <HAL_RCC_OscConfig+0x190>
 800119a:	e770      	b.n	800107e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800119e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011a4:	d128      	bne.n	80011f8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	9201      	str	r2, [sp, #4]
 80011a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011ba:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	4d2c      	ldr	r5, [pc, #176]	; (8001270 <HAL_RCC_OscConfig+0x278>)
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	05d9      	lsls	r1, r3, #23
 80011c2:	d51b      	bpl.n	80011fc <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	68a3      	ldr	r3, [r4, #8]
 80011c6:	4d28      	ldr	r5, [pc, #160]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d127      	bne.n	800121c <HAL_RCC_OscConfig+0x224>
 80011cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011d4:	f7ff fa64 	bl	80006a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d8:	4e23      	ldr	r6, [pc, #140]	; (8001268 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80011da:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011dc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80011e2:	079b      	lsls	r3, r3, #30
 80011e4:	d539      	bpl.n	800125a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80011e6:	2f00      	cmp	r7, #0
 80011e8:	f43f af18 	beq.w	800101c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	e711      	b.n	800101c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80011f8:	2700      	movs	r7, #0
 80011fa:	e7df      	b.n	80011bc <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001204:	f7ff fa4c 	bl	80006a0 <HAL_GetTick>
 8001208:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	05da      	lsls	r2, r3, #23
 800120e:	d4d9      	bmi.n	80011c4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001210:	f7ff fa46 	bl	80006a0 <HAL_GetTick>
 8001214:	1b80      	subs	r0, r0, r6
 8001216:	2802      	cmp	r0, #2
 8001218:	d9f7      	bls.n	800120a <HAL_RCC_OscConfig+0x212>
 800121a:	e730      	b.n	800107e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	2b05      	cmp	r3, #5
 800121e:	d104      	bne.n	800122a <HAL_RCC_OscConfig+0x232>
 8001220:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	672b      	str	r3, [r5, #112]	; 0x70
 8001228:	e7d0      	b.n	80011cc <HAL_RCC_OscConfig+0x1d4>
 800122a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	672a      	str	r2, [r5, #112]	; 0x70
 8001232:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001234:	f022 0204 	bic.w	r2, r2, #4
 8001238:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ca      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800123e:	f7ff fa2f 	bl	80006a0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001246:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800124a:	0798      	lsls	r0, r3, #30
 800124c:	d5cb      	bpl.n	80011e6 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fa27 	bl	80006a0 <HAL_GetTick>
 8001252:	1b80      	subs	r0, r0, r6
 8001254:	4540      	cmp	r0, r8
 8001256:	d9f7      	bls.n	8001248 <HAL_RCC_OscConfig+0x250>
 8001258:	e711      	b.n	800107e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f7ff fa21 	bl	80006a0 <HAL_GetTick>
 800125e:	1b40      	subs	r0, r0, r5
 8001260:	4540      	cmp	r0, r8
 8001262:	d9bd      	bls.n	80011e0 <HAL_RCC_OscConfig+0x1e8>
 8001264:	e70b      	b.n	800107e <HAL_RCC_OscConfig+0x86>
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	42470000 	.word	0x42470000
 8001270:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001274:	4d36      	ldr	r5, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x358>)
 8001276:	68ab      	ldr	r3, [r5, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d03d      	beq.n	80012fc <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x35c>)
 8001282:	2200      	movs	r2, #0
 8001284:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001286:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001288:	d12b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800128a:	f7ff fa09 	bl	80006a0 <HAL_GetTick>
 800128e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001290:	682b      	ldr	r3, [r5, #0]
 8001292:	0199      	lsls	r1, r3, #6
 8001294:	d41f      	bmi.n	80012d6 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001296:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800129a:	4313      	orrs	r3, r2
 800129c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800129e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012aa:	0852      	lsrs	r2, r2, #1
 80012ac:	3a01      	subs	r2, #1
 80012ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012b2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b6:	4d26      	ldr	r5, [pc, #152]	; (8001350 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80012b8:	2201      	movs	r2, #1
 80012ba:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80012bc:	f7ff f9f0 	bl	80006a0 <HAL_GetTick>
 80012c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	019a      	lsls	r2, r3, #6
 80012c6:	f53f aead 	bmi.w	8001024 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff f9e9 	bl	80006a0 <HAL_GetTick>
 80012ce:	1b00      	subs	r0, r0, r4
 80012d0:	2802      	cmp	r0, #2
 80012d2:	d9f6      	bls.n	80012c2 <HAL_RCC_OscConfig+0x2ca>
 80012d4:	e6d3      	b.n	800107e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d6:	f7ff f9e3 	bl	80006a0 <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	2802      	cmp	r0, #2
 80012de:	d9d7      	bls.n	8001290 <HAL_RCC_OscConfig+0x298>
 80012e0:	e6cd      	b.n	800107e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80012e2:	f7ff f9dd 	bl	80006a0 <HAL_GetTick>
 80012e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	019b      	lsls	r3, r3, #6
 80012ec:	f57f ae9a 	bpl.w	8001024 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff f9d6 	bl	80006a0 <HAL_GetTick>
 80012f4:	1b00      	subs	r0, r0, r4
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9f6      	bls.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
 80012fa:	e6c0      	b.n	800107e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fc:	2801      	cmp	r0, #1
 80012fe:	f43f aebf 	beq.w	8001080 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001302:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001304:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800130a:	4291      	cmp	r1, r2
 800130c:	f47f aea1 	bne.w	8001052 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001310:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	428a      	cmp	r2, r1
 8001318:	f47f ae9b 	bne.w	8001052 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800131c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800131e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001322:	401a      	ands	r2, r3
 8001324:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001328:	f47f ae93 	bne.w	8001052 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800132c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800132e:	0852      	lsrs	r2, r2, #1
 8001330:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001334:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001336:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800133a:	f47f ae8a 	bne.w	8001052 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800133e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001340:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001344:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001348:	f43f ae6c 	beq.w	8001024 <HAL_RCC_OscConfig+0x2c>
 800134c:	e681      	b.n	8001052 <HAL_RCC_OscConfig+0x5a>
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	42470000 	.word	0x42470000

08001358 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001358:	4913      	ldr	r1, [pc, #76]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800135a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135c:	688b      	ldr	r3, [r1, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d01c      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x48>
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800136a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800136c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001370:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001374:	bf14      	ite	ne
 8001376:	480d      	ldrne	r0, [pc, #52]	; (80013ac <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	480d      	ldreq	r0, [pc, #52]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800137e:	bf18      	it	ne
 8001380:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001382:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001386:	fba1 0100 	umull	r0, r1, r1, r0
 800138a:	f7fe ff2f 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001396:	3301      	adds	r3, #1
 8001398:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800139a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800139e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <HAL_RCC_GetSysClockFreq+0x54>)
 80013a2:	e7fc      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80013a6:	e7fa      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x46>
 80013a8:	40023800 	.word	0x40023800
 80013ac:	017d7840 	.word	0x017d7840
 80013b0:	00f42400 	.word	0x00f42400

080013b4 <HAL_RCC_ClockConfig>:
{
 80013b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013ba:	4604      	mov	r4, r0
 80013bc:	b910      	cbnz	r0, 80013c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013be:	2001      	movs	r0, #1
}
 80013c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <HAL_RCC_ClockConfig+0x124>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	f002 020f 	and.w	r2, r2, #15
 80013cc:	428a      	cmp	r2, r1
 80013ce:	d328      	bcc.n	8001422 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	6822      	ldr	r2, [r4, #0]
 80013d2:	0797      	lsls	r7, r2, #30
 80013d4:	d42d      	bmi.n	8001432 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d6:	07d0      	lsls	r0, r2, #31
 80013d8:	d441      	bmi.n	800145e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <HAL_RCC_ClockConfig+0x124>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f002 020f 	and.w	r2, r2, #15
 80013e2:	42aa      	cmp	r2, r5
 80013e4:	d866      	bhi.n	80014b4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	0751      	lsls	r1, r2, #29
 80013ea:	d46c      	bmi.n	80014c6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ec:	0713      	lsls	r3, r2, #28
 80013ee:	d507      	bpl.n	8001400 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f0:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 80013f2:	6921      	ldr	r1, [r4, #16]
 80013f4:	6893      	ldr	r3, [r2, #8]
 80013f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013fe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001400:	f7ff ffaa 	bl	8001358 <HAL_RCC_GetSysClockFreq>
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 8001406:	4a36      	ldr	r2, [pc, #216]	; (80014e0 <HAL_RCC_ClockConfig+0x12c>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	40d8      	lsrs	r0, r3
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <HAL_RCC_ClockConfig+0x130>)
 8001414:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001416:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_ClockConfig+0x134>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f7ff f8f9 	bl	8000610 <HAL_InitTick>
  return HAL_OK;
 800141e:	2000      	movs	r0, #0
 8001420:	e7ce      	b.n	80013c0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	428b      	cmp	r3, r1
 800142e:	d1c6      	bne.n	80013be <HAL_RCC_ClockConfig+0xa>
 8001430:	e7ce      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 8001434:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	bf1e      	ittt	ne
 800143a:	6899      	ldrne	r1, [r3, #8]
 800143c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001440:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001442:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001444:	bf42      	ittt	mi
 8001446:	6899      	ldrmi	r1, [r3, #8]
 8001448:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800144c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144e:	4923      	ldr	r1, [pc, #140]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 8001450:	68a0      	ldr	r0, [r4, #8]
 8001452:	688b      	ldr	r3, [r1, #8]
 8001454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001458:	4303      	orrs	r3, r0
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e7bb      	b.n	80013d6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	6862      	ldr	r2, [r4, #4]
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 8001462:	2a01      	cmp	r2, #1
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	d0a7      	beq.n	80013be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4e1b      	ldr	r6, [pc, #108]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 8001470:	68b3      	ldr	r3, [r6, #8]
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	4313      	orrs	r3, r2
 8001478:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800147a:	f7ff f911 	bl	80006a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001482:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001484:	68b3      	ldr	r3, [r6, #8]
 8001486:	6862      	ldr	r2, [r4, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001490:	d0a3      	beq.n	80013da <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f905 	bl	80006a0 <HAL_GetTick>
 8001496:	1bc0      	subs	r0, r0, r7
 8001498:	4540      	cmp	r0, r8
 800149a:	d9f3      	bls.n	8001484 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800149c:	2003      	movs	r0, #3
 800149e:	e78f      	b.n	80013c0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a0:	1e91      	subs	r1, r2, #2
 80014a2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a6:	d802      	bhi.n	80014ae <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014ac:	e7de      	b.n	800146c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	e7db      	b.n	800146c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b4:	b2ea      	uxtb	r2, r5
 80014b6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	42ab      	cmp	r3, r5
 80014c0:	f47f af7d 	bne.w	80013be <HAL_RCC_ClockConfig+0xa>
 80014c4:	e78f      	b.n	80013e6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c6:	4905      	ldr	r1, [pc, #20]	; (80014dc <HAL_RCC_ClockConfig+0x128>)
 80014c8:	68e0      	ldr	r0, [r4, #12]
 80014ca:	688b      	ldr	r3, [r1, #8]
 80014cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014d0:	4303      	orrs	r3, r0
 80014d2:	608b      	str	r3, [r1, #8]
 80014d4:	e78a      	b.n	80013ec <HAL_RCC_ClockConfig+0x38>
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	080017f8 	.word	0x080017f8
 80014e4:	20000028 	.word	0x20000028
 80014e8:	20000030 	.word	0x20000030

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014f2:	e003      	b.n	80014fc <LoopCopyDataInit>

080014f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014fa:	3104      	adds	r1, #4

080014fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001500:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001502:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001504:	d3f6      	bcc.n	80014f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001508:	e002      	b.n	8001510 <LoopFillZerobss>

0800150a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800150a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800150c:	f842 3b04 	str.w	r3, [r2], #4

08001510 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001512:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001514:	d3f9      	bcc.n	800150a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001516:	f7ff f853 	bl	80005c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f000 f92f 	bl	800177c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f000 f813 	bl	8001548 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001524:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001528:	08001820 	.word	0x08001820
  ldr  r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001530:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 8001534:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8001538:	200000c4 	.word	0x200000c4

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>

0800153e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800153e:	b508      	push	{r3, lr}
  /* User may add here some code to deal with this error */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8001540:	2002      	movs	r0, #2
 8001542:	f7ff f82f 	bl	80005a4 <BSP_LED_On>
  while(1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x8>

08001548 <main>:
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 800154c:	f7ff f882 	bl	8000654 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2500      	movs	r5, #0
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <main+0x178>)
 8001554:	9501      	str	r5, [sp, #4]
 8001556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  CanHandle.Instance = CANx;
 8001558:	4c5a      	ldr	r4, [pc, #360]	; (80016c4 <main+0x17c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156a:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <main+0x180>)
 800156c:	9502      	str	r5, [sp, #8]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001580:	2701      	movs	r7, #1
 8001582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001586:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001588:	e9cd 7308 	strd	r7, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001590:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001592:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001596:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800159a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800159e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015a0:	2307      	movs	r3, #7
 80015a2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015a6:	f7ff fd27 	bl	8000ff8 <HAL_RCC_OscConfig>
  HAL_PWREx_EnableOverDrive();
 80015aa:	f7ff fceb 	bl	8000f84 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80015ae:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	e9cd 3603 	strd	r3, r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80015b4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80015c0:	a803      	add	r0, sp, #12
 80015c2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c4:	9505      	str	r5, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80015c6:	f7ff fef5 	bl	80013b4 <HAL_RCC_ClockConfig>
  BSP_LED_Init(LED1);
 80015ca:	4628      	mov	r0, r5
 80015cc:	f7fe ff90 	bl	80004f0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80015d0:	4638      	mov	r0, r7
 80015d2:	f7fe ff8d 	bl	80004f0 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80015d6:	4630      	mov	r0, r6
 80015d8:	f7fe ff8a 	bl	80004f0 <BSP_LED_Init>
  CanHandle.Init.Prescaler = 5;
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <main+0x184>)
  CanHandle.Init.ReceiveFifoLocked = DISABLE;
 80015de:	83a5      	strh	r5, [r4, #28]
  CanHandle.Init.Prescaler = 5;
 80015e0:	2305      	movs	r3, #5
 80015e2:	e9c4 0300 	strd	r0, r3, [r4]
  CanHandle.Init.Mode = CAN_MODE_LOOPBACK;
 80015e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  CanHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ea:	e9c4 3502 	strd	r3, r5, [r4, #8]
  CanHandle.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015ee:	f44f 2ca0 	mov.w	ip, #327680	; 0x50000
 80015f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015f6:	e9c4 c304 	strd	ip, r3, [r4, #16]
  if(HAL_CAN_Init(&CanHandle) != HAL_OK)
 80015fa:	4620      	mov	r0, r4
  CanHandle.Init.TimeTriggeredMode = DISABLE;
 80015fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001600:	61a3      	str	r3, [r4, #24]
  if(HAL_CAN_Init(&CanHandle) != HAL_OK)
 8001602:	f7ff f853 	bl	80006ac <HAL_CAN_Init>
 8001606:	b108      	cbz	r0, 800160c <main+0xc4>
    Error_Handler();
 8001608:	f7ff ff99 	bl	800153e <Error_Handler>
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800160c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sFilterConfig.FilterIdLow = 0x0000;
 8001610:	e9cd 0008 	strd	r0, r0, [sp, #32]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001614:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001618:	900c      	str	r0, [sp, #48]	; 0x30
  sFilterConfig.SlaveStartFilterBank = 14;
 800161a:	230e      	movs	r3, #14
  if(HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
 800161c:	a908      	add	r1, sp, #32
 800161e:	4620      	mov	r0, r4
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001620:	970f      	str	r7, [sp, #60]	; 0x3c
  sFilterConfig.FilterActivation = ENABLE;
 8001622:	9710      	str	r7, [sp, #64]	; 0x40
  sFilterConfig.SlaveStartFilterBank = 14;
 8001624:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
 8001626:	f7ff f8bd 	bl	80007a4 <HAL_CAN_ConfigFilter>
 800162a:	2800      	cmp	r0, #0
 800162c:	d1ec      	bne.n	8001608 <main+0xc0>
  if (HAL_CAN_Start(&CanHandle) != HAL_OK)
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff f940 	bl	80008b4 <HAL_CAN_Start>
 8001634:	2800      	cmp	r0, #0
 8001636:	d1e7      	bne.n	8001608 <main+0xc0>
  TxHeader.StdId = 0x11;
 8001638:	2311      	movs	r3, #17
 800163a:	62a3      	str	r3, [r4, #40]	; 0x28
  TxData[0] = 0xCA;
 800163c:	23ca      	movs	r3, #202	; 0xca
 800163e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TxData[1] = 0xFE;
 8001642:	23fe      	movs	r3, #254	; 0xfe
  TxHeader.IDE = CAN_ID_STD;
 8001644:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  TxHeader.TransmitGlobalTime = DISABLE;
 8001648:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  TxData[1] = 0xFE;
 800164c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001650:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8001654:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8001658:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800165c:	4620      	mov	r0, r4
  TxHeader.DLC = 2;
 800165e:	63a6      	str	r6, [r4, #56]	; 0x38
  if(HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001660:	f7ff f956 	bl	8000910 <HAL_CAN_AddTxMessage>
 8001664:	2800      	cmp	r0, #0
 8001666:	d1cf      	bne.n	8001608 <main+0xc0>
  while(HAL_CAN_GetTxMailboxesFreeLevel(&CanHandle) != 3) {}
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff f9a1 	bl	80009b0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800166e:	2803      	cmp	r0, #3
 8001670:	d1fa      	bne.n	8001668 <main+0x120>
  if(HAL_CAN_GetRxFifoFillLevel(&CanHandle, CAN_RX_FIFO0) != 1)
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <main+0x17c>)
 8001674:	2100      	movs	r1, #0
 8001676:	f7ff fa26 	bl	8000ac6 <HAL_CAN_GetRxFifoFillLevel>
 800167a:	2801      	cmp	r0, #1
 800167c:	d1c4      	bne.n	8001608 <main+0xc0>
  if(HAL_CAN_GetRxMessage(&CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <main+0x188>)
 8001680:	2100      	movs	r1, #0
 8001682:	f103 0208 	add.w	r2, r3, #8
 8001686:	f1a3 004c 	sub.w	r0, r3, #76	; 0x4c
 800168a:	f7ff f9a5 	bl	80009d8 <HAL_CAN_GetRxMessage>
 800168e:	2800      	cmp	r0, #0
 8001690:	d1ba      	bne.n	8001608 <main+0xc0>
  if((RxHeader.StdId != 0x11)                     ||
 8001692:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001694:	2b11      	cmp	r3, #17
 8001696:	d10f      	bne.n	80016b8 <main+0x170>
     (RxHeader.RTR != CAN_RTR_DATA)               ||
 8001698:	e9d4 3217 	ldrd	r3, r2, [r4, #92]	; 0x5c
 800169c:	4313      	orrs	r3, r2
 800169e:	d10b      	bne.n	80016b8 <main+0x170>
     (RxHeader.IDE != CAN_ID_STD)                 ||
 80016a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d108      	bne.n	80016b8 <main+0x170>
     (RxHeader.DLC != 2)                          ||
 80016a6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80016aa:	f64f 63ca 	movw	r3, #65226	; 0xfeca
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d102      	bne.n	80016b8 <main+0x170>
    BSP_LED_On(LED1);
 80016b2:	f7fe ff77 	bl	80005a4 <BSP_LED_On>
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <main+0x16e>
    BSP_LED_On(LED2);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7fe ff73 	bl	80005a4 <BSP_LED_On>
 80016be:	e7fa      	b.n	80016b6 <main+0x16e>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	20000054 	.word	0x20000054
 80016c8:	40007000 	.word	0x40007000
 80016cc:	40006400 	.word	0x40006400
 80016d0:	200000a0 	.word	0x200000a0

080016d4 <HAL_CAN_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef   GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* CAN1 Periph clock enable */
  CANx_CLK_ENABLE();
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_CAN_MspInit+0x68>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate =  CANx_TX_AF;
  
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 80016da:	4819      	ldr	r0, [pc, #100]	; (8001740 <HAL_CAN_MspInit+0x6c>)
  CANx_CLK_ENABLE();
 80016dc:	2100      	movs	r1, #0
 80016de:	9101      	str	r1, [sp, #4]
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
 80016e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ea:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	9a01      	ldr	r2, [sp, #4]
  CANx_GPIO_CLK_ENABLE();
 80016f2:	9102      	str	r1, [sp, #8]
 80016f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2402      	movs	r4, #2
  CANx_GPIO_CLK_ENABLE();
 8001706:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001708:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	2601      	movs	r6, #1
  GPIO_InitStruct.Alternate =  CANx_TX_AF;
 8001710:	2509      	movs	r5, #9
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001712:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Alternate =  CANx_TX_AF;
 800171a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 800171c:	f7ff fb46 	bl	8000dac <HAL_GPIO_Init>
  
  /* CAN1 RX GPIO pin configuration */
  GPIO_InitStruct.Pin = CANx_RX_PIN;
 8001720:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate =  CANx_RX_AF;
  
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <HAL_CAN_MspInit+0x6c>)
  GPIO_InitStruct.Alternate =  CANx_RX_AF;
 8001726:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001728:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	e9cd 6405 	strd	r6, r4, [sp, #20]
  HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001732:	f7ff fb3b 	bl	8000dac <HAL_GPIO_Init>
}
 8001736:	b008      	add	sp, #32
 8001738:	bd70      	pop	{r4, r5, r6, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000

08001744 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001744:	4770      	bx	lr

08001746 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler>

08001748 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler>

0800174a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler>

0800174c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler>

0800174e <SVC_Handler>:
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001754:	f7fe bf98 	b.w	8000688 <HAL_IncTick>

08001758 <DMA1_Stream5_IRQHandler>:
 8001758:	4770      	bx	lr

0800175a <DMA1_Stream6_IRQHandler>:
 800175a:	4770      	bx	lr

0800175c <CAN1_RX0_IRQHandler>:
* @param  None
* @retval None
*/
void CAN1_RX0_IRQHandler(void)
{
  HAL_CAN_IRQHandler(&CanHandle);
 800175c:	4801      	ldr	r0, [pc, #4]	; (8001764 <CAN1_RX0_IRQHandler+0x8>)
 800175e:	f7ff b9ce 	b.w	8000afe <HAL_CAN_IRQHandler>
 8001762:	bf00      	nop
 8001764:	20000054 	.word	0x20000054

08001768 <CAN2_RX0_IRQHandler>:
 8001768:	f7ff bff8 	b.w	800175c <CAN1_RX0_IRQHandler>

0800176c <CAN1_RX1_IRQHandler>:
 800176c:	f7ff bff6 	b.w	800175c <CAN1_RX0_IRQHandler>

08001770 <CAN2_RX1_IRQHandler>:
 8001770:	f7ff bff4 	b.w	800175c <CAN1_RX0_IRQHandler>

08001774 <CAN1_TX_IRQHandler>:
 8001774:	f7ff bff2 	b.w	800175c <CAN1_RX0_IRQHandler>

08001778 <CAN2_TX_IRQHandler>:
 8001778:	f7ff bff0 	b.w	800175c <CAN1_RX0_IRQHandler>

0800177c <__libc_init_array>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4d0d      	ldr	r5, [pc, #52]	; (80017b4 <__libc_init_array+0x38>)
 8001780:	4c0d      	ldr	r4, [pc, #52]	; (80017b8 <__libc_init_array+0x3c>)
 8001782:	1b64      	subs	r4, r4, r5
 8001784:	10a4      	asrs	r4, r4, #2
 8001786:	2600      	movs	r6, #0
 8001788:	42a6      	cmp	r6, r4
 800178a:	d109      	bne.n	80017a0 <__libc_init_array+0x24>
 800178c:	4d0b      	ldr	r5, [pc, #44]	; (80017bc <__libc_init_array+0x40>)
 800178e:	4c0c      	ldr	r4, [pc, #48]	; (80017c0 <__libc_init_array+0x44>)
 8001790:	f000 f818 	bl	80017c4 <_init>
 8001794:	1b64      	subs	r4, r4, r5
 8001796:	10a4      	asrs	r4, r4, #2
 8001798:	2600      	movs	r6, #0
 800179a:	42a6      	cmp	r6, r4
 800179c:	d105      	bne.n	80017aa <__libc_init_array+0x2e>
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a4:	4798      	blx	r3
 80017a6:	3601      	adds	r6, #1
 80017a8:	e7ee      	b.n	8001788 <__libc_init_array+0xc>
 80017aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ae:	4798      	blx	r3
 80017b0:	3601      	adds	r6, #1
 80017b2:	e7f2      	b.n	800179a <__libc_init_array+0x1e>
 80017b4:	08001818 	.word	0x08001818
 80017b8:	08001818 	.word	0x08001818
 80017bc:	08001818 	.word	0x08001818
 80017c0:	0800181c 	.word	0x0800181c

080017c4 <_init>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr

080017d0 <_fini>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	bf00      	nop
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr
