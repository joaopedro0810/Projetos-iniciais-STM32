
QP - Projeto05 - Port para FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005494  08005494  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800549c  0800549c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001114  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001124  20001124  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001932d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004517  00000000  00000000  0003936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d0  00000000  00000000  0003ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002334c  00000000  00000000  0003ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173d8  00000000  00000000  0006330c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4c4a  00000000  00000000  0007a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f32e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052e0  00000000  00000000  0014f380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005380 	.word	0x08005380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005380 	.word	0x08005380

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <SMLed_ctor>:
/* Public-scope objects
----------------------------------------------------*/
QMActive * const AO_SMLed = (QMActive *)&l_led; /* opaque pointer */

void SMLed_ctor(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
    SMLed *me = &l_led;
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SMLed_ctor+0x1c>)
 80004dc:	607b      	str	r3, [r7, #4]

    // Construtor. Inicializa e coloca no estado inicial.
    QMActive_ctor(&me->super, Q_STATE_CAST(&SMLed_initial));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <SMLed_ctor+0x20>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f004 fefa 	bl	80052dc <QMActive_ctor>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000002c 	.word	0x2000002c
 80004f4:	080004f9 	.word	0x080004f9

080004f8 <SMLed_initial>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::SMLed} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::SMLed} ...........................................................*/
/*.${AOs::SMLed::SM} .......................................................*/
QState SMLed_initial(SMLed * const me, void const * const par) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
            Q_ACTION_CAST(&SMLed_Desligado_e), /* entry */
            Q_ACTION_NULL /* zero terminator */
        }
    };
    /*.${AOs::SMLed::SM::initial} */
    return QM_TRAN_INIT(&tatbl_);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <SMLed_initial+0x20>)
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	2309      	movs	r3, #9
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	080053e0 	.word	0x080053e0

0800051c <SMLed_Desligado_e>:
    Q_ACTION_CAST(&SMLed_Desligado_e),
    Q_ACTION_NULL, /* no exit action */
    Q_ACTION_NULL  /* no initial tran. */
};
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado_e(SMLed * const me) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    DesligarLED();
 8000524:	f000 f856 	bl	80005d4 <DesligarLED>
    (void)me; /* unused parameter */
    return QM_ENTRY(&SMLed_Desligado_s);
 8000528:	2305      	movs	r3, #5
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <SMLed_Desligado>:
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado(SMLed * const me, QEvt const * const e) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	2b04      	cmp	r3, #4
 8000544:	d105      	bne.n	8000552 <SMLed_Desligado+0x1e>
                {
                    Q_ACTION_CAST(&SMLed_Ligado_e), /* entry */
                    Q_ACTION_NULL /* zero terminator */
                }
            };
            status_ = QM_TRAN(&tatbl_);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <SMLed_Desligado+0x34>)
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	2308      	movs	r3, #8
 800054e:	60fb      	str	r3, [r7, #12]
            break;
 8000550:	e002      	b.n	8000558 <SMLed_Desligado+0x24>
        }
        default: {
            status_ = QM_SUPER();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
            break;
 8000556:	bf00      	nop
        }
    }
    return status_;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	080053ec 	.word	0x080053ec

0800056c <SMLed_Ligado_e>:
    Q_ACTION_CAST(&SMLed_Ligado_e),
    Q_ACTION_NULL, /* no exit action */
    Q_ACTION_NULL  /* no initial tran. */
};
/*.${AOs::SMLed::SM::Ligado} */
QState SMLed_Ligado_e(SMLed * const me) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    LigarLED();
 8000574:	f000 f822 	bl	80005bc <LigarLED>
    (void)me; /* unused parameter */
    return QM_ENTRY(&SMLed_Ligado_s);
 8000578:	2305      	movs	r3, #5
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <SMLed_Ligado>:
/*.${AOs::SMLed::SM::Ligado} */
QState SMLed_Ligado(SMLed * const me, QEvt const * const e) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d105      	bne.n	80005a2 <SMLed_Ligado+0x1e>
                {
                    Q_ACTION_CAST(&SMLed_Desligado_e), /* entry */
                    Q_ACTION_NULL /* zero terminator */
                }
            };
            status_ = QM_TRAN(&tatbl_);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <SMLed_Ligado+0x34>)
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	2308      	movs	r3, #8
 800059e:	60fb      	str	r3, [r7, #12]
            break;
 80005a0:	e002      	b.n	80005a8 <SMLed_Ligado+0x24>
        }
        default: {
            status_ = QM_SUPER();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
            break;
 80005a6:	bf00      	nop
        }
    }
    return status_;
 80005a8:	68fb      	ldr	r3, [r7, #12]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	080053f8 	.word	0x080053f8

080005bc <LigarLED>:


#include "main.h"

void LigarLED(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <LigarLED+0x14>)
 80005c6:	f000 fd11 	bl	8000fec <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000

080005d4 <DesligarLED>:

void DesligarLED(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <DesligarLED+0x14>)
 80005de:	f000 fd05 	bl	8000fec <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020000 	.word	0x40020000

080005ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <__NVIC_SystemReset+0x24>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005fe:	4904      	ldr	r1, [pc, #16]	; (8000610 <__NVIC_SystemReset+0x24>)
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <__NVIC_SystemReset+0x28>)
 8000602:	4313      	orrs	r3, r2
 8000604:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
}
 800060a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <__NVIC_SystemReset+0x20>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	05fa0004 	.word	0x05fa0004

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b087      	sub	sp, #28
 800061c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	// Construtores dos Active Objects.
	SMLed_ctor();
 800061e:	f7ff ff59 	bl	80004d4 <SMLed_ctor>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fa23 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f833 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f88f 	bl	800074c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Inicializa o framework do QP.
  QF_init();
 800062e:	f004 f88f 	bl	8004750 <QF_init>

  uint8_t priority = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]

  static StackType_t ledStack[configMINIMAL_STACK_SIZE];

  QACTIVE_START(AO_SMLed, priority++, evtQueueLed, Q_DIM(evtQueueLed), ledStack, sizeof(ledStack), (QEvt* )0);
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <main+0x68>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <main+0x30>
 8000640:	2173      	movs	r1, #115	; 0x73
 8000642:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0x6c>)
 8000644:	f000 f8e3 	bl	800080e <Q_onAssert>
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <main+0x68>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	689c      	ldr	r4, [r3, #8]
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <main+0x68>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	71fa      	strb	r2, [r7, #7]
 800065a:	4619      	mov	r1, r3
 800065c:	2300      	movs	r3, #0
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <main+0x70>)
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	230a      	movs	r3, #10
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <main+0x74>)
 800066e:	47a0      	blx	r4

  // Executa a aplicação QF.
  return QF_run();
 8000670:	f004 f876 	bl	8004760 <QF_run>
 8000674:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  // }
  /* USER CODE END 3 */
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	bf00      	nop
 8000680:	080053b4 	.word	0x080053b4
 8000684:	08005404 	.word	0x08005404
 8000688:	200000d0 	.word	0x200000d0
 800068c:	200000a8 	.word	0x200000a8

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fe66 	bl	8005370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <SystemClock_Config+0xb4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <SystemClock_Config+0xb4>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SystemClock_Config+0xb4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <SystemClock_Config+0xb8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <SystemClock_Config+0xb8>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SystemClock_Config+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fcb1 	bl	8001068 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800070c:	f000 f8a2 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff14 	bl	8001558 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000736:	f000 f88d 	bl	8000854 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xa8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xa8>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xa8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xa8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xa8>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0xa8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xac>)
 80007a0:	f000 fc24 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 80007a4:	2310      	movs	r3, #16
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <MX_GPIO_Init+0xb0>)
 80007ba:	f000 fa7b 	bl	8000cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_GPIO_Init+0xac>)
 80007d6:	f000 fa6d 	bl	8000cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2105      	movs	r1, #5
 80007de:	200a      	movs	r0, #10
 80007e0:	f000 fa3e 	bl	8000c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fa57 	bl	8000c98 <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40021000 	.word	0x40021000

08000800 <QF_onStartup>:

/* USER CODE BEGIN 4 */

void QF_onStartup(void){}
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <Q_onAssert>:
{
	QF_INT_ENABLE();
}

void Q_onAssert(char_t const * const module, int_t location)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800081c:	f383 8811 	msr	BASEPRI, r3
 8000820:	f3bf 8f6f 	isb	sy
 8000824:	f3bf 8f4f 	dsb	sy
 8000828:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800082a:	bf00      	nop
	QF_INT_DISABLE(); /* make sure that all interrupts are disabled */
	NVIC_SystemReset();
 800082c:	f7ff fede 	bl	80005ec <__NVIC_SystemReset>

08000830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000842:	f000 f935 	bl	8000ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010000 	.word	0x40010000

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <HAL_MspInit+0x54>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_MspInit+0x54>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 f9db 	bl	8000c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2019      	movs	r0, #25
 80008ce:	f000 f9c7 	bl	8000c60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d2:	2019      	movs	r0, #25
 80008d4:	f000 f9e0 	bl	8000c98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_InitTick+0xa0>)
 80008de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_InitTick+0xa0>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6453      	str	r3, [r2, #68]	; 0x44
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_InitTick+0xa0>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fff6 	bl	80018f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000904:	f000 ffe0 	bl	80018c8 <HAL_RCC_GetPCLK2Freq>
 8000908:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_InitTick+0xa4>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_InitTick+0xa8>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <HAL_InitTick+0xac>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_InitTick+0xa8>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_InitTick+0xa8>)
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_InitTick+0xa8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_InitTick+0xa8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <HAL_InitTick+0xa8>)
 800093a:	f001 f80b 	bl	8001954 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d104      	bne.n	800094e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_InitTick+0xa8>)
 8000946:	f001 f85f 	bl	8001a08 <HAL_TIM_Base_Start_IT>
 800094a:	4603      	mov	r3, r0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	200002d0 	.word	0x200002d0
 8000964:	40010000 	.word	0x40010000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO_Pin);
 800099a:	2010      	movs	r0, #16
 800099c:	f000 fb40 	bl	8001020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]

  static QEvt const evt = { BOTAO_SIG, 0 };

  QACTIVE_POST_FROM_ISR((QActive *const) AO_SMLed, &evt, &xHigherPriorityTaskWoken, 0);
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <EXTI4_IRQHandler+0x40>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ae:	490a      	ldr	r1, [pc, #40]	; (80009d8 <EXTI4_IRQHandler+0x44>)
 80009b0:	f003 ff60 	bl	8004874 <QActive_postFromISR_>

  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <EXTI4_IRQHandler+0x36>
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <EXTI4_IRQHandler+0x48>)
 80009bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	f3bf 8f4f 	dsb	sy
 80009c6:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	080053b4 	.word	0x080053b4
 80009d8:	08005418 	.word	0x08005418
 80009dc:	e000ed04 	.word	0xe000ed04

080009e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009e6:	f001 f87f 	bl	8001ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200002d0 	.word	0x200002d0

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f004 fc61 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fde5 	bl	8000618 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a5c:	080054a4 	.word	0x080054a4
  ldr r2, =_sbss
 8000a60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a64:	20001124 	.word	0x20001124

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_Init+0x40>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_Init+0x40>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x40>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8d8 	bl	8000c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff ff0c 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fede 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000318 	.word	0x20000318

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000318 	.word	0x20000318

08000af0 <__NVIC_SetPriorityGrouping>:
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <__NVIC_EnableIRQ+0x38>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ff4c 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c72:	f7ff ff61 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	6978      	ldr	r0, [r7, #20]
 8000c7e:	f7ff ffb1 	bl	8000be4 <NVIC_EncodePriority>
 8000c82:	4602      	mov	r2, r0
 8000c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff80 	bl	8000b90 <__NVIC_SetPriority>
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff54 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	e16b      	b.n	8000fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 815a 	bne.w	8000fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d005      	beq.n	8000d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d130      	bne.n	8000d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	091b      	lsrs	r3, r3, #4
 8000d52:	f003 0201 	and.w	r2, r3, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d017      	beq.n	8000da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d123      	bne.n	8000df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	69b9      	ldr	r1, [r7, #24]
 8000df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0203 	and.w	r2, r3, #3
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80b4 	beq.w	8000fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b60      	ldr	r3, [pc, #384]	; (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a5f      	ldr	r2, [pc, #380]	; (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e56:	4a5b      	ldr	r2, [pc, #364]	; (8000fc4 <HAL_GPIO_Init+0x310>)
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <HAL_GPIO_Init+0x314>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d02b      	beq.n	8000eda <HAL_GPIO_Init+0x226>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <HAL_GPIO_Init+0x318>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d025      	beq.n	8000ed6 <HAL_GPIO_Init+0x222>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a50      	ldr	r2, [pc, #320]	; (8000fd0 <HAL_GPIO_Init+0x31c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01f      	beq.n	8000ed2 <HAL_GPIO_Init+0x21e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <HAL_GPIO_Init+0x320>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x21a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <HAL_GPIO_Init+0x324>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x216>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <HAL_GPIO_Init+0x328>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x212>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_GPIO_Init+0x32c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x20e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_GPIO_Init+0x330>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x20a>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e00e      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x228>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x310>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a32      	ldr	r2, [pc, #200]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_GPIO_Init+0x334>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae90 	bls.w	8000cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021c00 	.word	0x40021c00
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f806 	bl	8001050 <HAL_GPIO_EXTI_Callback>
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e267      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d075      	beq.n	8001172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b04      	cmp	r3, #4
 8001090:	d00c      	beq.n	80010ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109a:	2b08      	cmp	r3, #8
 800109c:	d112      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109e:	4b82      	ldr	r3, [pc, #520]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010aa:	d10b      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d05b      	beq.n	8001170 <HAL_RCC_OscConfig+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d157      	bne.n	8001170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e242      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d106      	bne.n	80010dc <HAL_RCC_OscConfig+0x74>
 80010ce:	4b76      	ldr	r3, [pc, #472]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a75      	ldr	r2, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x98>
 80010e6:	4b70      	ldr	r3, [pc, #448]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6f      	ldr	r2, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6c      	ldr	r2, [pc, #432]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 8001100:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a65      	ldr	r2, [pc, #404]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fcda 	bl	8000ad8 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcd6 	bl	8000ad8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e207      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xc0>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fcc6 	bl	8000ad8 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fcc2 	bl	8000ad8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1f3      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0xe8>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d11c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1c7      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4937      	ldr	r1, [pc, #220]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e03a      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <HAL_RCC_OscConfig+0x244>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff fc7b 	bl	8000ad8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc77 	bl	8000ad8 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1a8      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4925      	ldr	r1, [pc, #148]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e015      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_RCC_OscConfig+0x244>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fc5a 	bl	8000ad8 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fc56 	bl	8000ad8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e187      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d016      	beq.n	8001288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_RCC_OscConfig+0x248>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fc3a 	bl	8000ad8 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc36 	bl	8000ad8 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e167      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x200>
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_OscConfig+0x248>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fc23 	bl	8000ad8 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	e00e      	b.n	80012b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fc1f 	bl	8000ad8 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d907      	bls.n	80012b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e150      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	42470000 	.word	0x42470000
 80012b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ea      	bne.n	8001296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8097 	beq.w	80013fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b7d      	ldr	r3, [pc, #500]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a7c      	ldr	r2, [pc, #496]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	4b74      	ldr	r3, [pc, #464]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbdf 	bl	8000ad8 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fbdb 	bl	8000ad8 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e10c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x2ea>
 8001344:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a63      	ldr	r2, [pc, #396]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x30c>
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001374:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	; 0x70
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001384:	4a54      	ldr	r2, [pc, #336]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d015      	beq.n	80013c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fba0 	bl	8000ad8 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fb9c 	bl	8000ad8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0cb      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ee      	beq.n	800139c <HAL_RCC_OscConfig+0x334>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb8a 	bl	8000ad8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb86 	bl	8000ad8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0b5      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ee      	bne.n	80013c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a1 	beq.w	8001548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d05c      	beq.n	80014cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d141      	bne.n	800149e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_RCC_OscConfig+0x478>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb5a 	bl	8000ad8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb56 	bl	8000ad8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e087      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	491b      	ldr	r1, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x478>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb2f 	bl	8000ad8 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb2b 	bl	8000ad8 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e05c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x416>
 800149c:	e054      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb18 	bl	8000ad8 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb14 	bl	8000ad8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e045      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x444>
 80014ca:	e03d      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e038      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_OscConfig+0x4ec>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d028      	beq.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d121      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11a      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800151a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d111      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0cc      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90c      	bls.n	8001594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e067      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fa46 	bl	8000ad8 <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff fa42 	bl	8000ad8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d20c      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f8da 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	0800541c 	.word	0x0800541c
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001728:	b090      	sub	sp, #64	; 0x40
 800172a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
 8001730:	2300      	movs	r3, #0
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d00d      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 8001748:	2b08      	cmp	r3, #8
 800174a:	f200 80a1 	bhi.w	8001890 <HAL_RCC_GetSysClockFreq+0x16c>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 8001752:	2b04      	cmp	r3, #4
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x3a>
 8001756:	e09b      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800175c:	e09b      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001762:	e098      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176e:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d028      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	2200      	movs	r2, #0
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	627a      	str	r2, [r7, #36]	; 0x24
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800178c:	2100      	movs	r1, #0
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001790:	fb03 f201 	mul.w	r2, r3, r1
 8001794:	2300      	movs	r3, #0
 8001796:	fb00 f303 	mul.w	r3, r0, r3
 800179a:	4413      	add	r3, r2
 800179c:	4a43      	ldr	r2, [pc, #268]	; (80018ac <HAL_RCC_GetSysClockFreq+0x188>)
 800179e:	fba0 1202 	umull	r1, r2, r0, r2
 80017a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017a4:	460a      	mov	r2, r1
 80017a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80017a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017aa:	4413      	add	r3, r2
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	2200      	movs	r2, #0
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	61fa      	str	r2, [r7, #28]
 80017b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017be:	f7fe fd07 	bl	80001d0 <__aeabi_uldivmod>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4613      	mov	r3, r2
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ca:	e053      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	2200      	movs	r2, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	617a      	str	r2, [r7, #20]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017de:	f04f 0b00 	mov.w	fp, #0
 80017e2:	4652      	mov	r2, sl
 80017e4:	465b      	mov	r3, fp
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0159      	lsls	r1, r3, #5
 80017f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f4:	0150      	lsls	r0, r2, #5
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ebb2 080a 	subs.w	r8, r2, sl
 80017fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800180e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001812:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001816:	ebb2 0408 	subs.w	r4, r2, r8
 800181a:	eb63 0509 	sbc.w	r5, r3, r9
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	00eb      	lsls	r3, r5, #3
 8001828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182c:	00e2      	lsls	r2, r4, #3
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	eb14 030a 	adds.w	r3, r4, sl
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	eb45 030b 	adc.w	r3, r5, fp
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184a:	4629      	mov	r1, r5
 800184c:	028b      	lsls	r3, r1, #10
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001854:	4621      	mov	r1, r4
 8001856:	028a      	lsls	r2, r1, #10
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185e:	2200      	movs	r2, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	60fa      	str	r2, [r7, #12]
 8001864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001868:	f7fe fcb2 	bl	80001d0 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	3301      	adds	r3, #1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188e:	e002      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001898:	4618      	mov	r0, r3
 800189a:	3740      	adds	r7, #64	; 0x40
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	017d7840 	.word	0x017d7840

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000

080018c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	0b5b      	lsrs	r3, r3, #13
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	0800542c 	.word	0x0800542c

080018f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	220f      	movs	r2, #15
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_GetClockConfig+0x5c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_RCC_GetClockConfig+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_RCC_GetClockConfig+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0207 	and.w	r2, r3, #7
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e041      	b.n	80019ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d106      	bne.n	8001980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f839 	bl	80019f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f000 f9d8 	bl	8001d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d001      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e04e      	b.n	8001abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_TIM_Base_Start_IT+0xc4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d022      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4a:	d01d      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d018      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00e      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_TIM_Base_Start_IT+0xd4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d009      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d004      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x80>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d111      	bne.n	8001aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d010      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	e007      	b.n	8001abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40000800 	.word	0x40000800
 8001ad8:	40000c00 	.word	0x40000c00
 8001adc:	40010400 	.word	0x40010400
 8001ae0:	40014000 	.word	0x40014000
 8001ae4:	40001800 	.word	0x40001800

08001ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d122      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d11b      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0202 	mvn.w	r2, #2
 8001b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8ee 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
 8001b30:	e005      	b.n	8001b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8e0 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f8f1 	bl	8001d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d122      	bne.n	8001b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d11b      	bne.n	8001b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0204 	mvn.w	r2, #4
 8001b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f8c4 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
 8001b84:	e005      	b.n	8001b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8b6 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8c7 	bl	8001d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d122      	bne.n	8001bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d11b      	bne.n	8001bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0208 	mvn.w	r2, #8
 8001bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f89a 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
 8001bd8:	e005      	b.n	8001be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f88c 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f89d 	bl	8001d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b10      	cmp	r3, #16
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0210 	mvn.w	r2, #16
 8001c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2208      	movs	r2, #8
 8001c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f870 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f862 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f873 	bl	8001d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10e      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0201 	mvn.w	r2, #1
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fde2 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b80      	cmp	r3, #128	; 0x80
 8001c78:	d10e      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d107      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f902 	bl	8001e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d107      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f838 	bl	8001d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d107      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0220 	mvn.w	r2, #32
 8001ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8cc 	bl	8001e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a40      	ldr	r2, [pc, #256]	; (8001e5c <TIM_Base_SetConfig+0x114>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <TIM_Base_SetConfig+0x40>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d66:	d00f      	beq.n	8001d88 <TIM_Base_SetConfig+0x40>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3d      	ldr	r2, [pc, #244]	; (8001e60 <TIM_Base_SetConfig+0x118>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00b      	beq.n	8001d88 <TIM_Base_SetConfig+0x40>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3c      	ldr	r2, [pc, #240]	; (8001e64 <TIM_Base_SetConfig+0x11c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <TIM_Base_SetConfig+0x40>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <TIM_Base_SetConfig+0x120>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <TIM_Base_SetConfig+0x40>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <TIM_Base_SetConfig+0x124>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d108      	bne.n	8001d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <TIM_Base_SetConfig+0x114>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d027      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <TIM_Base_SetConfig+0x118>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d023      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <TIM_Base_SetConfig+0x11c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <TIM_Base_SetConfig+0x120>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01b      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <TIM_Base_SetConfig+0x124>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d017      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <TIM_Base_SetConfig+0x128>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <TIM_Base_SetConfig+0x12c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00f      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <TIM_Base_SetConfig+0x130>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00b      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <TIM_Base_SetConfig+0x134>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <TIM_Base_SetConfig+0x138>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d003      	beq.n	8001dfa <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <TIM_Base_SetConfig+0x13c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d108      	bne.n	8001e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <TIM_Base_SetConfig+0x114>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d003      	beq.n	8001e40 <TIM_Base_SetConfig+0xf8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <TIM_Base_SetConfig+0x124>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d103      	bne.n	8001e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	615a      	str	r2, [r3, #20]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800
 8001e68:	40000c00 	.word	0x40000c00
 8001e6c:	40010400 	.word	0x40010400
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800
 8001e7c:	40001800 	.word	0x40001800
 8001e80:	40001c00 	.word	0x40001c00
 8001e84:	40002000 	.word	0x40002000

08001e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Handler+0x1c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001eb8:	f001 fb82 	bl	80035c0 <xTaskGetSchedulerState>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ec2:	f002 faf9 	bl	80044b8 <xPortSysTickHandler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <vApplicationGetIdleTaskMemory+0x30>)
 8001ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2000031c 	.word	0x2000031c
 8001f00:	20000378 	.word	0x20000378

08001f04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <vApplicationGetTimerTaskMemory+0x30>)
 8001f1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	20000578 	.word	0x20000578
 8001f34:	200005d4 	.word	0x200005d4

08001f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f103 0208 	add.w	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f103 0208 	add.w	r2, r3, #8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f103 0208 	add.w	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d103      	bne.n	8001ffa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e00c      	b.n	8002014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e002      	b.n	8002008 <vListInsert+0x2e>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	d2f6      	bcs.n	8002002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6892      	ldr	r2, [r2, #8]
 8002062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6852      	ldr	r2, [r2, #4]
 800206c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d103      	bne.n	8002080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <xQueueGenericReset+0x2a>
	__asm volatile
 80020b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b8:	f383 8811 	msr	BASEPRI, r3
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	60bb      	str	r3, [r7, #8]
}
 80020c6:	bf00      	nop
 80020c8:	e7fe      	b.n	80020c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020ca:	f002 f963 	bl	8004394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	441a      	add	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	3b01      	subs	r3, #1
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	441a      	add	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	22ff      	movs	r2, #255	; 0xff
 800210e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d114      	bne.n	800214a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01a      	beq.n	800215e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f889 	bl	8003244 <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d012      	beq.n	800215e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <xQueueGenericReset+0xcc>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	e009      	b.n	800215e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3310      	adds	r3, #16
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fef2 	bl	8001f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3324      	adds	r3, #36	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff feed 	bl	8001f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800215e:	f002 f949 	bl	80043f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	e000ed04 	.word	0xe000ed04

08002170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002196:	bf00      	nop
 8002198:	e7fe      	b.n	8002198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <xQueueGenericCreateStatic+0x52>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <xQueueGenericCreateStatic+0x56>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <xQueueGenericCreateStatic+0x58>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	623b      	str	r3, [r7, #32]
}
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <xQueueGenericCreateStatic+0x7e>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <xQueueGenericCreateStatic+0x82>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <xQueueGenericCreateStatic+0x84>
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	61fb      	str	r3, [r7, #28]
}
 800220a:	bf00      	nop
 800220c:	e7fe      	b.n	800220c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800220e:	2350      	movs	r3, #80	; 0x50
 8002210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d00a      	beq.n	800222e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	61bb      	str	r3, [r7, #24]
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800222e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002242:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f805 	bl	8002260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002258:	4618      	mov	r0, r3
 800225a:	3730      	adds	r7, #48	; 0x30
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e002      	b.n	8002282 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800228e:	2101      	movs	r1, #1
 8002290:	69b8      	ldr	r0, [r7, #24]
 8002292:	f7ff ff05 	bl	80020a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022b6:	2300      	movs	r3, #0
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <xQueueGenericSend+0x32>
	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <xQueueGenericSend+0x40>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <xQueueGenericSend+0x44>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <xQueueGenericSend+0x46>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <xQueueGenericSend+0x60>
	__asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d103      	bne.n	8002316 <xQueueGenericSend+0x6e>
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <xQueueGenericSend+0x72>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <xQueueGenericSend+0x74>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <xQueueGenericSend+0x8e>
	__asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	623b      	str	r3, [r7, #32]
}
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002336:	f001 f943 	bl	80035c0 <xTaskGetSchedulerState>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <xQueueGenericSend+0x9e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <xQueueGenericSend+0xa2>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <xQueueGenericSend+0xa4>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <xQueueGenericSend+0xbe>
	__asm volatile
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	61fb      	str	r3, [r7, #28]
}
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002366:	f002 f815 	bl	8004394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <xQueueGenericSend+0xd4>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d129      	bne.n	80023d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002382:	f000 fa0b 	bl	800279c <prvCopyDataToQueue>
 8002386:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	3324      	adds	r3, #36	; 0x24
 8002394:	4618      	mov	r0, r3
 8002396:	f000 ff55 	bl	8003244 <xTaskRemoveFromEventList>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <xQueueGenericSend+0x1f8>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	e00a      	b.n	80023c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <xQueueGenericSend+0x1f8>)
 80023ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80023c8:	f002 f814 	bl	80043f4 <vPortExitCritical>
				return pdPASS;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e063      	b.n	8002498 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023d6:	f002 f80d 	bl	80043f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	e05c      	b.n	8002498 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 ff8f 	bl	800330c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023f2:	f001 ffff 	bl	80043f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023f6:	f000 fd01 	bl	8002dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023fa:	f001 ffcb 	bl	8004394 <vPortEnterCritical>
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002404:	b25b      	sxtb	r3, r3
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d103      	bne.n	8002414 <xQueueGenericSend+0x16c>
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800241a:	b25b      	sxtb	r3, r3
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d103      	bne.n	800242a <xQueueGenericSend+0x182>
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800242a:	f001 ffe3 	bl	80043f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242e:	1d3a      	adds	r2, r7, #4
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f000 ff7e 	bl	8003338 <xTaskCheckForTimeOut>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d124      	bne.n	800248c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002444:	f000 faa2 	bl	800298c <prvIsQueueFull>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	3310      	adds	r3, #16
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fea4 	bl	80031a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800245c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800245e:	f000 fa2d 	bl	80028bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002462:	f000 fcd9 	bl	8002e18 <xTaskResumeAll>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f af7c 	bne.w	8002366 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <xQueueGenericSend+0x1f8>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	e772      	b.n	8002366 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002482:	f000 fa1b 	bl	80028bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002486:	f000 fcc7 	bl	8002e18 <xTaskResumeAll>
 800248a:	e76c      	b.n	8002366 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800248c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248e:	f000 fa15 	bl	80028bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002492:	f000 fcc1 	bl	8002e18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002498:	4618      	mov	r0, r3
 800249a:	3738      	adds	r7, #56	; 0x38
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000ed04 	.word	0xe000ed04

080024a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b090      	sub	sp, #64	; 0x40
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <xQueueGenericSendFromISR+0x3c>
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <xQueueGenericSendFromISR+0x40>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <xQueueGenericSendFromISR+0x42>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d103      	bne.n	800250e <xQueueGenericSendFromISR+0x6a>
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <xQueueGenericSendFromISR+0x6e>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <xQueueGenericSendFromISR+0x70>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
}
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800252e:	f002 f813 	bl	8004558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002532:	f3ef 8211 	mrs	r2, BASEPRI
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	61fa      	str	r2, [r7, #28]
 8002548:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800254a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <xQueueGenericSendFromISR+0xbc>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d12f      	bne.n	80025c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002576:	f000 f911 	bl	800279c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800257a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002582:	d112      	bne.n	80025aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d016      	beq.n	80025ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	3324      	adds	r3, #36	; 0x24
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fe57 	bl	8003244 <xTaskRemoveFromEventList>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e007      	b.n	80025ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	b25a      	sxtb	r2, r3
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80025ba:	2301      	movs	r3, #1
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80025be:	e001      	b.n	80025c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3740      	adds	r7, #64	; 0x40
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <xQueueReceive+0x30>
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	623b      	str	r3, [r7, #32]
}
 8002608:	bf00      	nop
 800260a:	e7fe      	b.n	800260a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <xQueueReceive+0x3e>
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <xQueueReceive+0x42>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <xQueueReceive+0x44>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <xQueueReceive+0x5e>
	__asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	61fb      	str	r3, [r7, #28]
}
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800263a:	f000 ffc1 	bl	80035c0 <xTaskGetSchedulerState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <xQueueReceive+0x6e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <xQueueReceive+0x72>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <xQueueReceive+0x74>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueReceive+0x8e>
	__asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	61bb      	str	r3, [r7, #24]
}
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800266a:	f001 fe93 	bl	8004394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01f      	beq.n	80026ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267e:	f000 f8f7 	bl	8002870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00f      	beq.n	80026b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	3310      	adds	r3, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fdd4 	bl	8003244 <xTaskRemoveFromEventList>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <xQueueReceive+0x1bc>)
 80026a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80026b2:	f001 fe9f 	bl	80043f4 <vPortExitCritical>
				return pdPASS;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e069      	b.n	800278e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026c0:	f001 fe98 	bl	80043f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e062      	b.n	800278e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fe1a 	bl	800330c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026d8:	2301      	movs	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026dc:	f001 fe8a 	bl	80043f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026e0:	f000 fb8c 	bl	8002dfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026e4:	f001 fe56 	bl	8004394 <vPortEnterCritical>
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d103      	bne.n	80026fe <xQueueReceive+0x122>
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002704:	b25b      	sxtb	r3, r3
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d103      	bne.n	8002714 <xQueueReceive+0x138>
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002714:	f001 fe6e 	bl	80043f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002718:	1d3a      	adds	r2, r7, #4
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fe09 	bl	8003338 <xTaskCheckForTimeOut>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d123      	bne.n	8002774 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800272c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272e:	f000 f917 	bl	8002960 <prvIsQueueEmpty>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d017      	beq.n	8002768 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	3324      	adds	r3, #36	; 0x24
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fd2f 	bl	80031a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002748:	f000 f8b8 	bl	80028bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800274c:	f000 fb64 	bl	8002e18 <xTaskResumeAll>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d189      	bne.n	800266a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <xQueueReceive+0x1bc>)
 8002758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	e780      	b.n	800266a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276a:	f000 f8a7 	bl	80028bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800276e:	f000 fb53 	bl	8002e18 <xTaskResumeAll>
 8002772:	e77a      	b.n	800266a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002776:	f000 f8a1 	bl	80028bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800277a:	f000 fb4d 	bl	8002e18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800277e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002780:	f000 f8ee 	bl	8002960 <prvIsQueueEmpty>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f43f af6f 	beq.w	800266a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800278c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800278e:	4618      	mov	r0, r3
 8002790:	3730      	adds	r7, #48	; 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d14d      	bne.n	800285e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 ff18 	bl	80035fc <xTaskPriorityDisinherit>
 80027cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	e043      	b.n	800285e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d119      	bne.n	8002810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6858      	ldr	r0, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	461a      	mov	r2, r3
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	f002 fdb4 	bl	8005354 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	441a      	add	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	d32b      	bcc.n	800285e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e026      	b.n	800285e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68d8      	ldr	r0, [r3, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	461a      	mov	r2, r3
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	f002 fd9a 	bl	8005354 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	425b      	negs	r3, r3
 800282a:	441a      	add	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	425b      	negs	r3, r3
 8002846:	441a      	add	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d105      	bne.n	800285e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	3b01      	subs	r3, #1
 800285c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002866:	697b      	ldr	r3, [r7, #20]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d018      	beq.n	80028b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	441a      	add	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d303      	bcc.n	80028a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68d9      	ldr	r1, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	461a      	mov	r2, r3
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f002 fd50 	bl	8005354 <memcpy>
	}
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028c4:	f001 fd66 	bl	8004394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028d0:	e011      	b.n	80028f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3324      	adds	r3, #36	; 0x24
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fcb0 	bl	8003244 <xTaskRemoveFromEventList>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028ea:	f000 fd87 	bl	80033fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	dce9      	bgt.n	80028d2 <prvUnlockQueue+0x16>
 80028fe:	e000      	b.n	8002902 <prvUnlockQueue+0x46>
					break;
 8002900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	22ff      	movs	r2, #255	; 0xff
 8002906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800290a:	f001 fd73 	bl	80043f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800290e:	f001 fd41 	bl	8004394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800291a:	e011      	b.n	8002940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3310      	adds	r3, #16
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fc8b 	bl	8003244 <xTaskRemoveFromEventList>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002934:	f000 fd62 	bl	80033fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002938:	7bbb      	ldrb	r3, [r7, #14]
 800293a:	3b01      	subs	r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002944:	2b00      	cmp	r3, #0
 8002946:	dce9      	bgt.n	800291c <prvUnlockQueue+0x60>
 8002948:	e000      	b.n	800294c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800294a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002954:	f001 fd4e 	bl	80043f4 <vPortExitCritical>
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002968:	f001 fd14 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002974:	2301      	movs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e001      	b.n	800297e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800297e:	f001 fd39 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002994:	f001 fcfe 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d102      	bne.n	80029aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80029a4:	2301      	movs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e001      	b.n	80029ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029ae:	f001 fd21 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e014      	b.n	80029f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <vQueueAddToRegistry+0x50>)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029d8:	490c      	ldr	r1, [pc, #48]	; (8002a0c <vQueueAddToRegistry+0x50>)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <vQueueAddToRegistry+0x50>)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80029ee:	e006      	b.n	80029fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b07      	cmp	r3, #7
 80029fa:	d9e7      	bls.n	80029cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	200009d4 	.word	0x200009d4

08002a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a20:	f001 fcb8 	bl	8004394 <vPortEnterCritical>
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d103      	bne.n	8002a3a <vQueueWaitForMessageRestricted+0x2a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d103      	bne.n	8002a50 <vQueueWaitForMessageRestricted+0x40>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a50:	f001 fcd0 	bl	80043f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fbc1 	bl	80031ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff26 	bl	80028bc <prvUnlockQueue>
	}
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af04      	add	r7, sp, #16
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	623b      	str	r3, [r7, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xTaskCreateStatic+0x46>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	61fb      	str	r3, [r7, #28]
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002abe:	235c      	movs	r3, #92	; 0x5c
 8002ac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8002ac6:	d00a      	beq.n	8002ade <xTaskCreateStatic+0x66>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61bb      	str	r3, [r7, #24]
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ade:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01e      	beq.n	8002b24 <xTaskCreateStatic+0xac>
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002afe:	2300      	movs	r3, #0
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	9302      	str	r3, [sp, #8]
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f80b 	bl	8002b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b1e:	f000 f897 	bl	8002c50 <prvAddNewTaskToReadyList>
 8002b22:	e001      	b.n	8002b28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b28:	697b      	ldr	r3, [r7, #20]
	}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	21a5      	movs	r1, #165	; 0xa5
 8002b4c:	f002 fc10 	bl	8005370 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f023 0307 	bic.w	r3, r3, #7
 8002b68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	617b      	str	r3, [r7, #20]
}
 8002b86:	bf00      	nop
 8002b88:	e7fe      	b.n	8002b88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01f      	beq.n	8002bd0 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e012      	b.n	8002bbc <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	7819      	ldrb	r1, [r3, #0]
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3334      	adds	r3, #52	; 0x34
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d9e9      	bls.n	8002b96 <prvInitialiseNewTask+0x64>
 8002bc2:	e000      	b.n	8002bc6 <prvInitialiseNewTask+0x94>
			{
				break;
 8002bc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bce:	e003      	b.n	8002bd8 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2b37      	cmp	r3, #55	; 0x37
 8002bdc:	d901      	bls.n	8002be2 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bde:	2337      	movs	r3, #55	; 0x37
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f9bd 	bl	8001f78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	3318      	adds	r3, #24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f9b8 	bl	8001f78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	69b8      	ldr	r0, [r7, #24]
 8002c32:	f001 fa85 	bl	8004140 <pxPortInitialiseStack>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c58:	f001 fb9c 	bl	8004394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c66:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d110      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c7c:	f000 fbe2 	bl	8003444 <prvInitialiseTaskLists>
 8002c80:	e00d      	b.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d802      	bhi.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002ca6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <prvAddNewTaskToReadyList+0xd4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d903      	bls.n	8002cc4 <prvAddNewTaskToReadyList+0x74>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <prvAddNewTaskToReadyList+0xd4>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <prvAddNewTaskToReadyList+0xd8>)
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7ff f959 	bl	8001f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ce0:	f001 fb88 	bl	80043f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d207      	bcs.n	8002d0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <prvAddNewTaskToReadyList+0xdc>)
 8002cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000ee8 	.word	0x20000ee8
 8002d18:	20000a14 	.word	0x20000a14
 8002d1c:	20000ef4 	.word	0x20000ef4
 8002d20:	20000f04 	.word	0x20000f04
 8002d24:	20000ef0 	.word	0x20000ef0
 8002d28:	20000a18 	.word	0x20000a18
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d3e:	463a      	mov	r2, r7
 8002d40:	1d39      	adds	r1, r7, #4
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f8c2 	bl	8001ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d4c:	6839      	ldr	r1, [r7, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	9202      	str	r2, [sp, #8]
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	4921      	ldr	r1, [pc, #132]	; (8002de4 <vTaskStartScheduler+0xb4>)
 8002d60:	4821      	ldr	r0, [pc, #132]	; (8002de8 <vTaskStartScheduler+0xb8>)
 8002d62:	f7ff fe89 	bl	8002a78 <xTaskCreateStatic>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <vTaskStartScheduler+0xbc>)
 8002d6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <vTaskStartScheduler+0xbc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e001      	b.n	8002d7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d84:	f000 fe8e 	bl	8003aa4 <xTimerCreateTimerTask>
 8002d88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d116      	bne.n	8002dbe <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	613b      	str	r3, [r7, #16]
}
 8002da2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <vTaskStartScheduler+0xc0>)
 8002da6:	f04f 32ff 	mov.w	r2, #4294967295
 8002daa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <vTaskStartScheduler+0xc4>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <vTaskStartScheduler+0xc8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002db8:	f001 fa4a 	bl	8004250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dbc:	e00e      	b.n	8002ddc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d10a      	bne.n	8002ddc <vTaskStartScheduler+0xac>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	60fb      	str	r3, [r7, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <vTaskStartScheduler+0xaa>
}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	08005398 	.word	0x08005398
 8002de8:	08003415 	.word	0x08003415
 8002dec:	20000f0c 	.word	0x20000f0c
 8002df0:	20000f08 	.word	0x20000f08
 8002df4:	20000ef4 	.word	0x20000ef4
 8002df8:	20000eec 	.word	0x20000eec

08002dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <vTaskSuspendAll+0x18>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <vTaskSuspendAll+0x18>)
 8002e08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	20000f10 	.word	0x20000f10

08002e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e26:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <xTaskResumeAll+0x118>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	603b      	str	r3, [r7, #0]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e44:	f001 faa6 	bl	8004394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <xTaskResumeAll+0x118>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <xTaskResumeAll+0x118>)
 8002e50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <xTaskResumeAll+0x118>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d162      	bne.n	8002f20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <xTaskResumeAll+0x11c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d05e      	beq.n	8002f20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e62:	e02f      	b.n	8002ec4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <xTaskResumeAll+0x120>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3318      	adds	r3, #24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f8eb 	bl	800204c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f8e6 	bl	800204c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <xTaskResumeAll+0x124>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d903      	bls.n	8002e94 <xTaskResumeAll+0x7c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <xTaskResumeAll+0x124>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <xTaskResumeAll+0x128>)
 8002ea2:	441a      	add	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f7ff f871 	bl	8001f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <xTaskResumeAll+0x12c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <xTaskResumeAll+0x130>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <xTaskResumeAll+0x120>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1cb      	bne.n	8002e64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ed2:	f000 fb55 	bl	8003580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <xTaskResumeAll+0x134>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ee2:	f000 f847 	bl	8002f74 <xTaskIncrementTick>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <xTaskResumeAll+0x130>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f1      	bne.n	8002ee2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <xTaskResumeAll+0x134>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <xTaskResumeAll+0x130>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <xTaskResumeAll+0x138>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f20:	f001 fa68 	bl	80043f4 <vPortExitCritical>

	return xAlreadyYielded;
 8002f24:	68bb      	ldr	r3, [r7, #8]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000f10 	.word	0x20000f10
 8002f34:	20000ee8 	.word	0x20000ee8
 8002f38:	20000ea8 	.word	0x20000ea8
 8002f3c:	20000ef0 	.word	0x20000ef0
 8002f40:	20000a18 	.word	0x20000a18
 8002f44:	20000a14 	.word	0x20000a14
 8002f48:	20000efc 	.word	0x20000efc
 8002f4c:	20000ef8 	.word	0x20000ef8
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <xTaskGetTickCount+0x1c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000eec 	.word	0x20000eec

08002f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <xTaskIncrementTick+0x148>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 808f 	bne.w	80030a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f88:	4b4d      	ldr	r3, [pc, #308]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f90:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d120      	bne.n	8002fde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f9c:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <xTaskIncrementTick+0x48>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	603b      	str	r3, [r7, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <xTaskIncrementTick+0x46>
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <xTaskIncrementTick+0x154>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <xTaskIncrementTick+0x154>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <xTaskIncrementTick+0x158>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a3d      	ldr	r2, [pc, #244]	; (80030cc <xTaskIncrementTick+0x158>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	f000 fad1 	bl	8003580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fde:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <xTaskIncrementTick+0x15c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d349      	bcc.n	800307c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe8:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff2:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <xTaskIncrementTick+0x15c>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	601a      	str	r2, [r3, #0]
					break;
 8002ffa:	e03f      	b.n	800307c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	d203      	bcs.n	800301c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003014:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <xTaskIncrementTick+0x15c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800301a:	e02f      	b.n	800307c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3304      	adds	r3, #4
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f813 	bl	800204c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3318      	adds	r3, #24
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f80a 	bl	800204c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <xTaskIncrementTick+0x160>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d903      	bls.n	800304c <xTaskIncrementTick+0xd8>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <xTaskIncrementTick+0x160>)
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <xTaskIncrementTick+0x164>)
 800305a:	441a      	add	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f7fe ff95 	bl	8001f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <xTaskIncrementTick+0x168>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b8      	bcc.n	8002fe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800307a:	e7b5      	b.n	8002fe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <xTaskIncrementTick+0x168>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4915      	ldr	r1, [pc, #84]	; (80030d8 <xTaskIncrementTick+0x164>)
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d901      	bls.n	8003098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <xTaskIncrementTick+0x16c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e004      	b.n	80030b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <xTaskIncrementTick+0x170>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <xTaskIncrementTick+0x170>)
 80030ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80030b0:	697b      	ldr	r3, [r7, #20]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000f10 	.word	0x20000f10
 80030c0:	20000eec 	.word	0x20000eec
 80030c4:	20000ea0 	.word	0x20000ea0
 80030c8:	20000ea4 	.word	0x20000ea4
 80030cc:	20000f00 	.word	0x20000f00
 80030d0:	20000f08 	.word	0x20000f08
 80030d4:	20000ef0 	.word	0x20000ef0
 80030d8:	20000a18 	.word	0x20000a18
 80030dc:	20000a14 	.word	0x20000a14
 80030e0:	20000efc 	.word	0x20000efc
 80030e4:	20000ef8 	.word	0x20000ef8

080030e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <vTaskSwitchContext+0xa8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030f6:	4b27      	ldr	r3, [pc, #156]	; (8003194 <vTaskSwitchContext+0xac>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030fc:	e041      	b.n	8003182 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <vTaskSwitchContext+0xac>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <vTaskSwitchContext+0xb0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e010      	b.n	800312e <vTaskSwitchContext+0x46>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <vTaskSwitchContext+0x40>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	607b      	str	r3, [r7, #4]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <vTaskSwitchContext+0x3e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3b01      	subs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	491b      	ldr	r1, [pc, #108]	; (800319c <vTaskSwitchContext+0xb4>)
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0e4      	beq.n	800310c <vTaskSwitchContext+0x24>
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <vTaskSwitchContext+0xb4>)
 800314e:	4413      	add	r3, r2
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3308      	adds	r3, #8
 8003164:	429a      	cmp	r2, r3
 8003166:	d104      	bne.n	8003172 <vTaskSwitchContext+0x8a>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <vTaskSwitchContext+0xb8>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4a06      	ldr	r2, [pc, #24]	; (8003198 <vTaskSwitchContext+0xb0>)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6013      	str	r3, [r2, #0]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000f10 	.word	0x20000f10
 8003194:	20000efc 	.word	0x20000efc
 8003198:	20000ef0 	.word	0x20000ef0
 800319c:	20000a18 	.word	0x20000a18
 80031a0:	20000a14 	.word	0x20000a14

080031a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	60fb      	str	r3, [r7, #12]
}
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <vTaskPlaceOnEventList+0x44>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3318      	adds	r3, #24
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe ff01 	bl	8001fda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031d8:	2101      	movs	r1, #1
 80031da:	6838      	ldr	r0, [r7, #0]
 80031dc:	f000 fc0e 	bl	80039fc <prvAddCurrentTaskToDelayedList>
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000a14 	.word	0x20000a14

080031ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	617b      	str	r3, [r7, #20]
}
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <vTaskPlaceOnEventListRestricted+0x54>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3318      	adds	r3, #24
 800321a:	4619      	mov	r1, r3
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7fe feb8 	bl	8001f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f000 fbe3 	bl	80039fc <prvAddCurrentTaskToDelayedList>
	}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000a14 	.word	0x20000a14

08003244 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	60fb      	str	r3, [r7, #12]
}
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3318      	adds	r3, #24
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fee9 	bl	800204c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <xTaskRemoveFromEventList+0xb0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11d      	bne.n	80032be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fee0 	bl	800204c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <xTaskRemoveFromEventList+0xb4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d903      	bls.n	80032a0 <xTaskRemoveFromEventList+0x5c>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <xTaskRemoveFromEventList+0xb4>)
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <xTaskRemoveFromEventList+0xb8>)
 80032ae:	441a      	add	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fe fe6b 	bl	8001f92 <vListInsertEnd>
 80032bc:	e005      	b.n	80032ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3318      	adds	r3, #24
 80032c2:	4619      	mov	r1, r3
 80032c4:	480e      	ldr	r0, [pc, #56]	; (8003300 <xTaskRemoveFromEventList+0xbc>)
 80032c6:	f7fe fe64 	bl	8001f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <xTaskRemoveFromEventList+0xc0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d905      	bls.n	80032e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032d8:	2301      	movs	r3, #1
 80032da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <xTaskRemoveFromEventList+0xc4>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e001      	b.n	80032e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80032e8:	697b      	ldr	r3, [r7, #20]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000f10 	.word	0x20000f10
 80032f8:	20000ef0 	.word	0x20000ef0
 80032fc:	20000a18 	.word	0x20000a18
 8003300:	20000ea8 	.word	0x20000ea8
 8003304:	20000a14 	.word	0x20000a14
 8003308:	20000efc 	.word	0x20000efc

0800330c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <vTaskInternalSetTimeOutState+0x24>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <vTaskInternalSetTimeOutState+0x28>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	605a      	str	r2, [r3, #4]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000f00 	.word	0x20000f00
 8003334:	20000eec 	.word	0x20000eec

08003338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	613b      	str	r3, [r7, #16]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	60fb      	str	r3, [r7, #12]
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800337a:	f001 f80b 	bl	8004394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <xTaskCheckForTimeOut+0xbc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d102      	bne.n	800339e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e023      	b.n	80033e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <xTaskCheckForTimeOut+0xc0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d007      	beq.n	80033ba <xTaskCheckForTimeOut+0x82>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d302      	bcc.n	80033ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e015      	b.n	80033e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d20b      	bcs.n	80033dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	1ad2      	subs	r2, r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff9b 	bl	800330c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e004      	b.n	80033e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033e6:	f001 f805 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 80033ea:	69fb      	ldr	r3, [r7, #28]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000eec 	.word	0x20000eec
 80033f8:	20000f00 	.word	0x20000f00

080033fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <vTaskMissedYield+0x14>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	20000efc 	.word	0x20000efc

08003414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800341c:	f000 f852 	bl	80034c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <prvIdleTask+0x28>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d9f9      	bls.n	800341c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <prvIdleTask+0x2c>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003438:	e7f0      	b.n	800341c <prvIdleTask+0x8>
 800343a:	bf00      	nop
 800343c:	20000a18 	.word	0x20000a18
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	e00c      	b.n	800346a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <prvInitialiseTaskLists+0x60>)
 800345c:	4413      	add	r3, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fd6a 	bl	8001f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3301      	adds	r3, #1
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b37      	cmp	r3, #55	; 0x37
 800346e:	d9ef      	bls.n	8003450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003470:	480d      	ldr	r0, [pc, #52]	; (80034a8 <prvInitialiseTaskLists+0x64>)
 8003472:	f7fe fd61 	bl	8001f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <prvInitialiseTaskLists+0x68>)
 8003478:	f7fe fd5e 	bl	8001f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <prvInitialiseTaskLists+0x6c>)
 800347e:	f7fe fd5b 	bl	8001f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003482:	480c      	ldr	r0, [pc, #48]	; (80034b4 <prvInitialiseTaskLists+0x70>)
 8003484:	f7fe fd58 	bl	8001f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <prvInitialiseTaskLists+0x74>)
 800348a:	f7fe fd55 	bl	8001f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <prvInitialiseTaskLists+0x78>)
 8003490:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <prvInitialiseTaskLists+0x64>)
 8003492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <prvInitialiseTaskLists+0x7c>)
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <prvInitialiseTaskLists+0x68>)
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000a18 	.word	0x20000a18
 80034a8:	20000e78 	.word	0x20000e78
 80034ac:	20000e8c 	.word	0x20000e8c
 80034b0:	20000ea8 	.word	0x20000ea8
 80034b4:	20000ebc 	.word	0x20000ebc
 80034b8:	20000ed4 	.word	0x20000ed4
 80034bc:	20000ea0 	.word	0x20000ea0
 80034c0:	20000ea4 	.word	0x20000ea4

080034c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ca:	e019      	b.n	8003500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034cc:	f000 ff62 	bl	8004394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <prvCheckTasksWaitingTermination+0x50>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe fdb5 	bl	800204c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <prvCheckTasksWaitingTermination+0x54>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <prvCheckTasksWaitingTermination+0x54>)
 80034ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <prvCheckTasksWaitingTermination+0x58>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <prvCheckTasksWaitingTermination+0x58>)
 80034f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034f6:	f000 ff7d 	bl	80043f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f810 	bl	8003520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <prvCheckTasksWaitingTermination+0x58>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e1      	bne.n	80034cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000ebc 	.word	0x20000ebc
 8003518:	20000ee8 	.word	0x20000ee8
 800351c:	20000ed0 	.word	0x20000ed0

08003520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f84e 	bl	80045d8 <vPortFree>
				vPortFree( pxTCB );
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f001 f84b 	bl	80045d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003542:	e018      	b.n	8003576 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800354a:	2b01      	cmp	r3, #1
 800354c:	d103      	bne.n	8003556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 f842 	bl	80045d8 <vPortFree>
	}
 8003554:	e00f      	b.n	8003576 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800355c:	2b02      	cmp	r3, #2
 800355e:	d00a      	beq.n	8003576 <prvDeleteTCB+0x56>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <prvDeleteTCB+0x54>
	}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <prvResetNextTaskUnblockTime+0x38>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <prvResetNextTaskUnblockTime+0x3c>)
 8003592:	f04f 32ff 	mov.w	r2, #4294967295
 8003596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003598:	e008      	b.n	80035ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <prvResetNextTaskUnblockTime+0x38>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <prvResetNextTaskUnblockTime+0x3c>)
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	20000ea0 	.word	0x20000ea0
 80035bc:	20000f08 	.word	0x20000f08

080035c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <xTaskGetSchedulerState+0x34>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035ce:	2301      	movs	r3, #1
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	e008      	b.n	80035e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <xTaskGetSchedulerState+0x38>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035dc:	2302      	movs	r3, #2
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	e001      	b.n	80035e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035e6:	687b      	ldr	r3, [r7, #4]
	}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	20000ef4 	.word	0x20000ef4
 80035f8:	20000f10 	.word	0x20000f10

080035fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d056      	beq.n	80036c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003612:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <xTaskPriorityDisinherit+0xd0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d00a      	beq.n	8003632 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	60fb      	str	r3, [r7, #12]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	60bb      	str	r3, [r7, #8]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	429a      	cmp	r2, r3
 8003664:	d02c      	beq.n	80036c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	2b00      	cmp	r3, #0
 800366c:	d128      	bne.n	80036c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3304      	adds	r3, #4
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fcea 	bl	800204c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <xTaskPriorityDisinherit+0xd4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d903      	bls.n	80036a0 <xTaskPriorityDisinherit+0xa4>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <xTaskPriorityDisinherit+0xd4>)
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <xTaskPriorityDisinherit+0xd8>)
 80036ae:	441a      	add	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f7fe fc6b 	bl	8001f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036c0:	697b      	ldr	r3, [r7, #20]
	}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000a14 	.word	0x20000a14
 80036d0:	20000ef0 	.word	0x20000ef0
 80036d4:	20000a18 	.word	0x20000a18

080036d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80036e2:	f000 fe57 	bl	8004394 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <ulTaskNotifyTake+0x88>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <ulTaskNotifyTake+0x88>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003700:	2101      	movs	r1, #1
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f97a 	bl	80039fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <ulTaskNotifyTake+0x8c>)
 800370a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003718:	f000 fe6c 	bl	80043f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800371c:	f000 fe3a 	bl	8004394 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <ulTaskNotifyTake+0x88>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <ulTaskNotifyTake+0x88>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2200      	movs	r2, #0
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
 800373c:	e004      	b.n	8003748 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <ulTaskNotifyTake+0x88>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	3a01      	subs	r2, #1
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <ulTaskNotifyTake+0x88>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8003752:	f000 fe4f 	bl	80043f4 <vPortExitCritical>

		return ulReturn;
 8003756:	68fb      	ldr	r3, [r7, #12]
	}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000a14 	.word	0x20000a14
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003778:	2301      	movs	r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <xTaskGenericNotify+0x30>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	61bb      	str	r3, [r7, #24]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800379c:	f000 fdfa 	bl	8004394 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80037b4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d828      	bhi.n	8003816 <xTaskGenericNotify+0xae>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <xTaskGenericNotify+0x64>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	08003837 	.word	0x08003837
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037ef 	.word	0x080037ef
 80037d8:	080037fb 	.word	0x080037fb
 80037dc:	08003803 	.word	0x08003803
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80037ec:	e026      	b.n	800383c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80037f8:	e020      	b.n	800383c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003800:	e01c      	b.n	800383c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d003      	beq.n	8003810 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800380e:	e015      	b.n	800383c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003814:	e012      	b.n	800383c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d00c      	beq.n	800383a <xTaskGenericNotify+0xd2>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	617b      	str	r3, [r7, #20]
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xTaskGenericNotify+0xcc>
					break;
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <xTaskGenericNotify+0xd4>

					break;
 800383a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d13a      	bne.n	80038b8 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fc00 	bl	800204c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <xTaskGenericNotify+0x160>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d903      	bls.n	8003860 <xTaskGenericNotify+0xf8>
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <xTaskGenericNotify+0x160>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <xTaskGenericNotify+0x164>)
 800386e:	441a      	add	r2, r3
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe fb8b 	bl	8001f92 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <xTaskGenericNotify+0x132>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	613b      	str	r3, [r7, #16]
}
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <xTaskGenericNotify+0x168>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d907      	bls.n	80038b8 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <xTaskGenericNotify+0x16c>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80038b8:	f000 fd9c 	bl	80043f4 <vPortExitCritical>

		return xReturn;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80038be:	4618      	mov	r0, r3
 80038c0:	3728      	adds	r7, #40	; 0x28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000ef0 	.word	0x20000ef0
 80038cc:	20000a18 	.word	0x20000a18
 80038d0:	20000a14 	.word	0x20000a14
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	61bb      	str	r3, [r7, #24]
}
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038fe:	f000 fe2b 	bl	8004558 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8003906:	f3ef 8211 	mrs	r2, BASEPRI
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	617a      	str	r2, [r7, #20]
 800391c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800391e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003920:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003928:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800393c:	7ffb      	ldrb	r3, [r7, #31]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d146      	bne.n	80039d0 <vTaskNotifyGiveFromISR+0xf8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	60fb      	str	r3, [r7, #12]
}
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <vTaskNotifyGiveFromISR+0x10c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11d      	bne.n	80039a4 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fb6d 	bl	800204c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <vTaskNotifyGiveFromISR+0x110>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d903      	bls.n	8003986 <vTaskNotifyGiveFromISR+0xae>
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <vTaskNotifyGiveFromISR+0x110>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a16      	ldr	r2, [pc, #88]	; (80039ec <vTaskNotifyGiveFromISR+0x114>)
 8003994:	441a      	add	r2, r3
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe faf8 	bl	8001f92 <vListInsertEnd>
 80039a2:	e005      	b.n	80039b0 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	3318      	adds	r3, #24
 80039a8:	4619      	mov	r1, r3
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <vTaskNotifyGiveFromISR+0x118>)
 80039ac:	f7fe faf1 	bl	8001f92 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <vTaskNotifyGiveFromISR+0x11c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d908      	bls.n	80039d0 <vTaskNotifyGiveFromISR+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskNotifyGiveFromISR+0xf2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <vTaskNotifyGiveFromISR+0x120>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f383 8811 	msr	BASEPRI, r3
}
 80039da:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80039dc:	bf00      	nop
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000f10 	.word	0x20000f10
 80039e8:	20000ef0 	.word	0x20000ef0
 80039ec:	20000a18 	.word	0x20000a18
 80039f0:	20000ea8 	.word	0x20000ea8
 80039f4:	20000a14 	.word	0x20000a14
 80039f8:	20000efc 	.word	0x20000efc

080039fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a06:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fb1a 	bl	800204c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d10a      	bne.n	8003a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4819      	ldr	r0, [pc, #100]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a30:	f7fe faaf 	bl	8001f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a34:	e026      	b.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d209      	bcs.n	8003a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7fe fabd 	bl	8001fda <vListInsert>
}
 8003a60:	e010      	b.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7fe fab3 	bl	8001fda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d202      	bcs.n	8003a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000eec 	.word	0x20000eec
 8003a90:	20000a14 	.word	0x20000a14
 8003a94:	20000ed4 	.word	0x20000ed4
 8003a98:	20000ea4 	.word	0x20000ea4
 8003a9c:	20000ea0 	.word	0x20000ea0
 8003aa0:	20000f08 	.word	0x20000f08

08003aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003aae:	f000 fb07 	bl	80040c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <xTimerCreateTimerTask+0x80>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d021      	beq.n	8003afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	f107 0108 	add.w	r1, r7, #8
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fa19 	bl	8001f04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	9202      	str	r2, [sp, #8]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2302      	movs	r3, #2
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	4910      	ldr	r1, [pc, #64]	; (8003b28 <xTimerCreateTimerTask+0x84>)
 8003ae6:	4811      	ldr	r0, [pc, #68]	; (8003b2c <xTimerCreateTimerTask+0x88>)
 8003ae8:	f7fe ffc6 	bl	8002a78 <xTaskCreateStatic>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <xTimerCreateTimerTask+0x8c>)
 8003af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <xTimerCreateTimerTask+0x8c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b1a:	697b      	ldr	r3, [r7, #20]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000f44 	.word	0x20000f44
 8003b28:	080053a0 	.word	0x080053a0
 8003b2c:	08003c69 	.word	0x08003c69
 8003b30:	20000f48 	.word	0x20000f48

08003b34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	623b      	str	r3, [r7, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02a      	beq.n	8003bc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	dc18      	bgt.n	8003bae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b7c:	f7ff fd20 	bl	80035c0 <xTaskGetSchedulerState>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d109      	bne.n	8003b9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f107 0110 	add.w	r1, r7, #16
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b92:	f7fe fb89 	bl	80022a8 <xQueueGenericSend>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24
 8003b98:	e012      	b.n	8003bc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	f107 0110 	add.w	r1, r7, #16
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f7fe fb7f 	bl	80022a8 <xQueueGenericSend>
 8003baa:	6278      	str	r0, [r7, #36]	; 0x24
 8003bac:	e008      	b.n	8003bc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <xTimerGenericCommand+0x98>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	f107 0110 	add.w	r1, r7, #16
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	f7fe fc73 	bl	80024a4 <xQueueGenericSendFromISR>
 8003bbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3728      	adds	r7, #40	; 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000f44 	.word	0x20000f44

08003bd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <prvProcessExpiredTimer+0x94>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fa2f 	bl	800204c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	18d1      	adds	r1, r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	6978      	ldr	r0, [r7, #20]
 8003c0a:	f000 f8d1 	bl	8003db0 <prvInsertTimerInActiveList>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01f      	beq.n	8003c54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f7ff ff88 	bl	8003b34 <xTimerGenericCommand>
 8003c24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d113      	bne.n	8003c54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60fb      	str	r3, [r7, #12]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	4798      	blx	r3
}
 8003c5c:	bf00      	nop
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000f3c 	.word	0x20000f3c

08003c68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f857 	bl	8003d28 <prvGetNextExpireTime>
 8003c7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f803 	bl	8003c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c86:	f000 f8d5 	bl	8003e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c8a:	e7f1      	b.n	8003c70 <prvTimerTask+0x8>

08003c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c96:	f7ff f8b1 	bl	8002dfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f866 	bl	8003d70 <prvSampleTimeNow>
 8003ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d130      	bne.n	8003d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <prvProcessTimerOrBlockTask+0x3c>
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d806      	bhi.n	8003cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cba:	f7ff f8ad 	bl	8002e18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff85 	bl	8003bd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cc6:	e024      	b.n	8003d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <prvProcessTimerOrBlockTask+0x90>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <prvProcessTimerOrBlockTask+0x50>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <prvProcessTimerOrBlockTask+0x52>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <prvProcessTimerOrBlockTask+0x94>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f7fe fe8f 	bl	8002a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cf2:	f7ff f891 	bl	8002e18 <xTaskResumeAll>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <prvProcessTimerOrBlockTask+0x98>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
}
 8003d0c:	e001      	b.n	8003d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d0e:	f7ff f883 	bl	8002e18 <xTaskResumeAll>
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000f40 	.word	0x20000f40
 8003d20:	20000f44 	.word	0x20000f44
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <prvGetNextExpireTime+0x44>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <prvGetNextExpireTime+0x16>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	e000      	b.n	8003d40 <prvGetNextExpireTime+0x18>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <prvGetNextExpireTime+0x44>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e001      	b.n	8003d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000f3c 	.word	0x20000f3c

08003d70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d78:	f7ff f8ec 	bl	8002f54 <xTaskGetTickCount>
 8003d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <prvSampleTimeNow+0x3c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d205      	bcs.n	8003d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d88:	f000 f936 	bl	8003ff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e002      	b.n	8003d9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <prvSampleTimeNow+0x3c>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000f4c 	.word	0x20000f4c

08003db0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d812      	bhi.n	8003dfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e01b      	b.n	8003e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <prvInsertTimerInActiveList+0x7c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fe f8f0 	bl	8001fda <vListInsert>
 8003dfa:	e012      	b.n	8003e22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d206      	bcs.n	8003e12 <prvInsertTimerInActiveList+0x62>
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e007      	b.n	8003e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <prvInsertTimerInActiveList+0x80>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7fe f8dc 	bl	8001fda <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e22:	697b      	ldr	r3, [r7, #20]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000f40 	.word	0x20000f40
 8003e30:	20000f3c 	.word	0x20000f3c

08003e34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08e      	sub	sp, #56	; 0x38
 8003e38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e3a:	e0ca      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da18      	bge.n	8003e74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	3304      	adds	r3, #4
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	61fb      	str	r3, [r7, #28]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6a:	6850      	ldr	r0, [r2, #4]
 8003e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f2c0 80aa 	blt.w	8003fd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f8dd 	bl	800204c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e92:	463b      	mov	r3, r7
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff6b 	bl	8003d70 <prvSampleTimeNow>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	f200 8097 	bhi.w	8003fd2 <prvProcessReceivedCommands+0x19e>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <prvProcessReceivedCommands+0x78>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003ed5 	.word	0x08003ed5
 8003eb8:	08003f49 	.word	0x08003f49
 8003ebc:	08003f5d 	.word	0x08003f5d
 8003ec0:	08003fa7 	.word	0x08003fa7
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ed5 	.word	0x08003ed5
 8003ecc:	08003f49 	.word	0x08003f49
 8003ed0:	08003f5d 	.word	0x08003f5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	18d1      	adds	r1, r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f7ff ff5c 	bl	8003db0 <prvInsertTimerInActiveList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d069      	beq.n	8003fd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05e      	beq.n	8003fd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	441a      	add	r2, r3
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2300      	movs	r3, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f26:	f7ff fe05 	bl	8003b34 <xTimerGenericCommand>
 8003f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d14f      	bne.n	8003fd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61bb      	str	r3, [r7, #24]
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f5a:	e03a      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	617b      	str	r3, [r7, #20]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	18d1      	adds	r1, r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa0:	f7ff ff06 	bl	8003db0 <prvInsertTimerInActiveList>
					break;
 8003fa4:	e015      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb6:	f000 fb0f 	bl	80045d8 <vPortFree>
 8003fba:	e00a      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fce:	e000      	b.n	8003fd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003fd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <prvProcessReceivedCommands+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	1d39      	adds	r1, r7, #4
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fafe 	bl	80025dc <xQueueReceive>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f47f af2a 	bne.w	8003e3c <prvProcessReceivedCommands+0x8>
	}
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3730      	adds	r7, #48	; 0x30
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000f44 	.word	0x20000f44

08003ff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ffe:	e048      	b.n	8004092 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004000:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400a:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f817 	bl	800204c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02e      	beq.n	8004092 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d90e      	bls.n	8004064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fd ffbc 	bl	8001fda <vListInsert>
 8004062:	e016      	b.n	8004092 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	2100      	movs	r1, #0
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fd60 	bl	8003b34 <xTimerGenericCommand>
 8004074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	603b      	str	r3, [r7, #0]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1b1      	bne.n	8004000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <prvSwitchTimerLists+0xc4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <prvSwitchTimerLists+0xc0>)
 80040a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80040aa:	4a04      	ldr	r2, [pc, #16]	; (80040bc <prvSwitchTimerLists+0xc4>)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000f3c 	.word	0x20000f3c
 80040bc:	20000f40 	.word	0x20000f40

080040c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040c6:	f000 f965 	bl	8004394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d120      	bne.n	8004114 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040d2:	4814      	ldr	r0, [pc, #80]	; (8004124 <prvCheckForValidListAndQueue+0x64>)
 80040d4:	f7fd ff30 	bl	8001f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040d8:	4813      	ldr	r0, [pc, #76]	; (8004128 <prvCheckForValidListAndQueue+0x68>)
 80040da:	f7fd ff2d 	bl	8001f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <prvCheckForValidListAndQueue+0x6c>)
 80040e0:	4a10      	ldr	r2, [pc, #64]	; (8004124 <prvCheckForValidListAndQueue+0x64>)
 80040e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <prvCheckForValidListAndQueue+0x70>)
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <prvCheckForValidListAndQueue+0x68>)
 80040e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040ea:	2300      	movs	r3, #0
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <prvCheckForValidListAndQueue+0x74>)
 80040f0:	4a11      	ldr	r2, [pc, #68]	; (8004138 <prvCheckForValidListAndQueue+0x78>)
 80040f2:	2110      	movs	r1, #16
 80040f4:	200a      	movs	r0, #10
 80040f6:	f7fe f83b 	bl	8002170 <xQueueGenericCreateStatic>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 80040fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <prvCheckForValidListAndQueue+0x60>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	490b      	ldr	r1, [pc, #44]	; (800413c <prvCheckForValidListAndQueue+0x7c>)
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fc54 	bl	80029bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004114:	f000 f96e 	bl	80043f4 <vPortExitCritical>
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000f44 	.word	0x20000f44
 8004124:	20000f14 	.word	0x20000f14
 8004128:	20000f28 	.word	0x20000f28
 800412c:	20000f3c 	.word	0x20000f3c
 8004130:	20000f40 	.word	0x20000f40
 8004134:	20000ff0 	.word	0x20000ff0
 8004138:	20000f50 	.word	0x20000f50
 800413c:	080053a8 	.word	0x080053a8

08004140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b04      	subs	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b04      	subs	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b04      	subs	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <pxPortInitialiseStack+0x64>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b14      	subs	r3, #20
 800417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b04      	subs	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f06f 0202 	mvn.w	r2, #2
 800418e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b20      	subs	r3, #32
 8004194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	080041a9 	.word	0x080041a9

080041a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <prvTaskExitError+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d00a      	beq.n	80041d2 <prvTaskExitError+0x2a>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <prvTaskExitError+0x28>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60bb      	str	r3, [r7, #8]
}
 80041e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041e6:	bf00      	nop
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0fc      	beq.n	80041e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	2000000c 	.word	0x2000000c

08004200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst2>:
 8004220:	20000a14 	.word	0x20000a14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004228:	4808      	ldr	r0, [pc, #32]	; (800424c <prvPortStartFirstTask+0x24>)
 800422a:	6800      	ldr	r0, [r0, #0]
 800422c:	6800      	ldr	r0, [r0, #0]
 800422e:	f380 8808 	msr	MSP, r0
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8814 	msr	CONTROL, r0
 800423a:	b662      	cpsie	i
 800423c:	b661      	cpsie	f
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	df00      	svc	0
 8004248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800424a:	bf00      	nop
 800424c:	e000ed08 	.word	0xe000ed08

08004250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <xPortStartScheduler+0x120>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a46      	ldr	r2, [pc, #280]	; (8004374 <xPortStartScheduler+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10a      	bne.n	8004276 <xPortStartScheduler+0x26>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	613b      	str	r3, [r7, #16]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004276:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <xPortStartScheduler+0x120>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3f      	ldr	r2, [pc, #252]	; (8004378 <xPortStartScheduler+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10a      	bne.n	8004296 <xPortStartScheduler+0x46>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <xPortStartScheduler+0x12c>)
 8004298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <xPortStartScheduler+0x130>)
 80042bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <xPortStartScheduler+0x134>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042c4:	e009      	b.n	80042da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <xPortStartScheduler+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	4a2d      	ldr	r2, [pc, #180]	; (8004384 <xPortStartScheduler+0x134>)
 80042ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d0ef      	beq.n	80042c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <xPortStartScheduler+0x134>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d00a      	beq.n	8004308 <xPortStartScheduler+0xb8>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <xPortStartScheduler+0x134>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <xPortStartScheduler+0x134>)
 8004310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <xPortStartScheduler+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <xPortStartScheduler+0x134>)
 800431c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <xPortStartScheduler+0x138>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <xPortStartScheduler+0x138>)
 800432c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <xPortStartScheduler+0x138>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a14      	ldr	r2, [pc, #80]	; (8004388 <xPortStartScheduler+0x138>)
 8004338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800433c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800433e:	f000 f8dd 	bl	80044fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <xPortStartScheduler+0x13c>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004348:	f000 f8fc 	bl	8004544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <xPortStartScheduler+0x140>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <xPortStartScheduler+0x140>)
 8004352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004358:	f7ff ff66 	bl	8004228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800435c:	f7fe fec4 	bl	80030e8 <vTaskSwitchContext>
	prvTaskExitError();
 8004360:	f7ff ff22 	bl	80041a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000ed00 	.word	0xe000ed00
 8004374:	410fc271 	.word	0x410fc271
 8004378:	410fc270 	.word	0x410fc270
 800437c:	e000e400 	.word	0xe000e400
 8004380:	20001040 	.word	0x20001040
 8004384:	20001044 	.word	0x20001044
 8004388:	e000ed20 	.word	0xe000ed20
 800438c:	2000000c 	.word	0x2000000c
 8004390:	e000ef34 	.word	0xe000ef34

08004394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
}
 80043ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <vPortEnterCritical+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <vPortEnterCritical+0x58>)
 80043b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <vPortEnterCritical+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10f      	bne.n	80043e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortEnterCritical+0x5c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vPortEnterCritical+0x4a>
	}
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	2000000c 	.word	0x2000000c
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <vPortExitCritical+0x50>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <vPortExitCritical+0x24>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <vPortExitCritical+0x50>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <vPortExitCritical+0x50>)
 8004420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <vPortExitCritical+0x42>
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f383 8811 	msr	BASEPRI, r3
}
 8004434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c
	...

08004450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004450:	f3ef 8009 	mrs	r0, PSP
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <pxCurrentTCBConst>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f01e 0f10 	tst.w	lr, #16
 8004460:	bf08      	it	eq
 8004462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004474:	f380 8811 	msr	BASEPRI, r0
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f7fe fe32 	bl	80030e8 <vTaskSwitchContext>
 8004484:	f04f 0000 	mov.w	r0, #0
 8004488:	f380 8811 	msr	BASEPRI, r0
 800448c:	bc09      	pop	{r0, r3}
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	6808      	ldr	r0, [r1, #0]
 8004492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004496:	f01e 0f10 	tst.w	lr, #16
 800449a:	bf08      	it	eq
 800449c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044a0:	f380 8809 	msr	PSP, r0
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst>:
 80044b0:	20000a14 	.word	0x20000a14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044d2:	f7fe fd4f 	bl	8002f74 <xTaskIncrementTick>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <xPortSysTickHandler+0x40>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f383 8811 	msr	BASEPRI, r3
}
 80044ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <vPortSetupTimerInterrupt+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <vPortSetupTimerInterrupt+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <vPortSetupTimerInterrupt+0x40>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <vPortSetupTimerInterrupt+0x44>)
 800451a:	3b01      	subs	r3, #1
 800451c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010
 8004534:	e000e018 	.word	0xe000e018
 8004538:	20000000 	.word	0x20000000
 800453c:	10624dd3 	.word	0x10624dd3
 8004540:	e000e014 	.word	0xe000e014

08004544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004554 <vPortEnableVFP+0x10>
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800454e:	6001      	str	r1, [r0, #0]
 8004550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004552:	bf00      	nop
 8004554:	e000ed88 	.word	0xe000ed88

08004558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800455e:	f3ef 8305 	mrs	r3, IPSR
 8004562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d914      	bls.n	8004594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <vPortValidateInterruptPriority+0x70>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004574:	4b15      	ldr	r3, [pc, #84]	; (80045cc <vPortValidateInterruptPriority+0x74>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	7afa      	ldrb	r2, [r7, #11]
 800457a:	429a      	cmp	r2, r3
 800457c:	d20a      	bcs.n	8004594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <vPortValidateInterruptPriority+0x78>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <vPortValidateInterruptPriority+0x7c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d90a      	bls.n	80045ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	603b      	str	r3, [r7, #0]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <vPortValidateInterruptPriority+0x60>
	}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000e3f0 	.word	0xe000e3f0
 80045cc:	20001040 	.word	0x20001040
 80045d0:	e000ed0c 	.word	0xe000ed0c
 80045d4:	20001044 	.word	0x20001044

080045d8 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d04d      	beq.n	8004686 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045ea:	2308      	movs	r3, #8
 80045ec:	425b      	negs	r3, r3
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4413      	add	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <vPortFree+0xb8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <vPortFree+0x44>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60fb      	str	r3, [r7, #12]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <vPortFree+0x62>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60bb      	str	r3, [r7, #8]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <vPortFree+0xb8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01e      	beq.n	8004686 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11a      	bne.n	8004686 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <vPortFree+0xb8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	43db      	mvns	r3, r3
 800465a:	401a      	ands	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004660:	f7fe fbcc 	bl	8002dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <vPortFree+0xbc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4413      	add	r3, r2
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <vPortFree+0xbc>)
 8004670:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004672:	6938      	ldr	r0, [r7, #16]
 8004674:	f000 f812 	bl	800469c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <vPortFree+0xc0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	4a06      	ldr	r2, [pc, #24]	; (8004698 <vPortFree+0xc0>)
 8004680:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004682:	f7fe fbc9 	bl	8002e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	2000105c 	.word	0x2000105c
 8004694:	20001054 	.word	0x20001054
 8004698:	20001058 	.word	0x20001058

0800469c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046a4:	4b28      	ldr	r3, [pc, #160]	; (8004748 <prvInsertBlockIntoFreeList+0xac>)
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e002      	b.n	80046b0 <prvInsertBlockIntoFreeList+0x14>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d8f7      	bhi.n	80046aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4413      	add	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d108      	bne.n	80046de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	441a      	add	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d118      	bne.n	8004724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <prvInsertBlockIntoFreeList+0xb0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d00d      	beq.n	800471a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e008      	b.n	800472c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <prvInsertBlockIntoFreeList+0xb0>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e003      	b.n	800472c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d002      	beq.n	800473a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20001048 	.word	0x20001048
 800474c:	20001050 	.word	0x20001050

08004750 <QF_init>:

/* Local objects -----------------------------------------------------------*/
static void task_function(void *pvParameters); /* FreeRTOS task signature */

/*==========================================================================*/
void QF_init(void) {
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
    /* empty for FreeRTOS */
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <QF_run>:
/*..........................................................................*/
int_t QF_run(void) {
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
    QS_CRIT_STAT_

    QF_onStartup();  /* the startup callback (configure/enable interrupts) */
 8004764:	f7fc f84c 	bl	8000800 <QF_onStartup>

    /* produce the QS_QF_RUN trace record */
    QS_BEGIN_PRE_(QS_QF_RUN, 0U)
    QS_END_PRE_()

    vTaskStartScheduler(); /* start the FreeRTOS scheduler */
 8004768:	f7fe fae2 	bl	8002d30 <vTaskStartScheduler>
    Q_ERROR_ID(110); /* the FreeRTOS scheduler should never return */
 800476c:	216e      	movs	r1, #110	; 0x6e
 800476e:	4803      	ldr	r0, [pc, #12]	; (800477c <QF_run+0x1c>)
 8004770:	f7fc f84d 	bl	800080e <Q_onAssert>
    return 0; /* dummy return to make the compiler happy */
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	08005434 	.word	0x08005434

08004780 <QActive_start_>:
/*..........................................................................*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af04      	add	r7, sp, #16
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
    TaskHandle_t thr;
    /* task name provided by the user in QF_setTaskName() or default name */
    char const *taskName = (me->thread.pxDummy1 != (void *)0)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	69db      	ldr	r3, [r3, #28]
                             ? (char const *)me->thread.pxDummy1
                             : (char const *)"AO";
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <QActive_start_+0x1c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	e000      	b.n	800479e <QActive_start_+0x1e>
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <QActive_start_+0xbc>)
    char const *taskName = (me->thread.pxDummy1 != (void *)0)
 800479e:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_ID(200, (0U < prio)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <QActive_start_+0x44>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d80b      	bhi.n	80047c4 <QActive_start_+0x44>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <QActive_start_+0x44>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <QActive_start_+0x44>
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <QActive_start_+0x44>
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <QActive_start_+0x4c>
 80047c4:	21c8      	movs	r1, #200	; 0xc8
 80047c6:	481e      	ldr	r0, [pc, #120]	; (8004840 <QActive_start_+0xc0>)
 80047c8:	f7fc f821 	bl	800080e <Q_onAssert>
        && (qLen > 0U)             /* queue size must be provided */
        && (stkSto != (void *)0)   /* stack storage must be provided */
        && (stkSize > 0U));        /* stack size must be provided */

    /* create the event queue for the AO */
    QEQueue_init(&me->eQueue, qSto, qLen);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	330c      	adds	r3, #12
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fd57 	bl	8005288 <QEQueue_init>

    me->prio = prio;  /* save the QF priority */
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    QF_add_(me);      /* make QF aware of this active object */
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fb4f 	bl	8004e88 <QF_add_>
    QHSM_INIT(&me->super, par, me->prio); /* the top-most initial tran. */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <QActive_start_+0x7a>
 80047f2:	2166      	movs	r1, #102	; 0x66
 80047f4:	4812      	ldr	r0, [pc, #72]	; (8004840 <QActive_start_+0xc0>)
 80047f6:	f7fc f80a 	bl	800080e <Q_onAssert>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004804:	4610      	mov	r0, r2
 8004806:	4798      	blx	r3

    /* statically create the FreeRTOS task for the AO */
    thr = xTaskCreateStatic(
              &task_function,           /* the task function */
              taskName ,                /* the name of the task */
              stkSize/sizeof(portSTACK_TYPE), /* stack size */
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	089a      	lsrs	r2, r3, #2
    thr = xTaskCreateStatic(
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	331c      	adds	r3, #28
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	4809      	ldr	r0, [pc, #36]	; (8004844 <QActive_start_+0xc4>)
 8004820:	f7fe f92a 	bl	8002a78 <xTaskCreateStatic>
 8004824:	6138      	str	r0, [r7, #16]
              (void *)me,               /* the 'pvParameters' parameter */
              (UBaseType_t)(prio + tskIDLE_PRIORITY),  /* FreeRTOS priority */
              (StackType_t *)stkSto,    /* stack storage */
              &me->thread);             /* task buffer */
    Q_ENSURE_ID(210, thr != (TaskHandle_t)0); /* must be created */
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <QActive_start_+0xb4>
 800482c:	21d2      	movs	r1, #210	; 0xd2
 800482e:	4804      	ldr	r0, [pc, #16]	; (8004840 <QActive_start_+0xc0>)
 8004830:	f7fb ffed 	bl	800080e <Q_onAssert>
}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	080053b0 	.word	0x080053b0
 8004840:	08005434 	.word	0x08005434
 8004844:	08004849 	.word	0x08004849

08004848 <task_function>:
            break;
        /* ... */
    }
}
/*..........................................................................*/
static void task_function(void *pvParameters) { /* FreeRTOS task signature */
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    QActive *act = (QActive *)pvParameters;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]

    /* event-loop */
    for (;;) { /* for-ever */
        QEvt const *e = QActive_get_(act);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fc4b 	bl	80050f0 <QActive_get_>
 800485a:	60b8      	str	r0, [r7, #8]
        QHSM_DISPATCH(&act->super, e, act->prio);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	4610      	mov	r0, r2
 8004868:	4798      	blx	r3
        QF_gc(e); /* check if the event is garbage, and collect it if so */
 800486a:	68b8      	ldr	r0, [r7, #8]
 800486c:	f000 fc98 	bl	80051a0 <QF_gc>
    for (;;) { /* for-ever */
 8004870:	e7f0      	b.n	8004854 <task_function+0xc>
	...

08004874 <QActive_postFromISR_>:
#else
bool QActive_postFromISR_(QActive * const me, QEvt const * const e,
                          uint_fast16_t const margin,
                          BaseType_t * const pxHigherPriorityTaskWoken)
#endif
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	; 0x30
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
    QEQueueCtr nFree; /* temporary to avoid UB for volatile access */
    bool status;
    UBaseType_t uxSavedInterruptState;

    /** @pre event pointer must be valid */
    Q_REQUIRE_ID(400, e != (QEvt *)0);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <QActive_postFromISR_+0x1e>
 8004888:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800488c:	484d      	ldr	r0, [pc, #308]	; (80049c4 <QActive_postFromISR_+0x150>)
 800488e:	f7fb ffbe 	bl	800080e <Q_onAssert>
	__asm volatile
 8004892:	f3ef 8211 	mrs	r2, BASEPRI
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	623a      	str	r2, [r7, #32]
 80048a8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80048aa:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
    nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	7ddb      	ldrb	r3, [r3, #23]
 80048b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (margin == QF_NO_MARGIN) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048bc:	4293      	cmp	r3, r2
 80048be:	d110      	bne.n	80048e2 <QActive_postFromISR_+0x6e>
        if (nFree > 0U) {
 80048c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <QActive_postFromISR_+0x5c>
            status = true; /* can post */
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80048ce:	e015      	b.n	80048fc <QActive_postFromISR_+0x88>
        }
        else {
            status = false; /* cannot post */
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Q_ERROR_ID(410); /* must be able to post the event */
 80048d6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80048da:	483a      	ldr	r0, [pc, #232]	; (80049c4 <QActive_postFromISR_+0x150>)
 80048dc:	f7fb ff97 	bl	800080e <Q_onAssert>
 80048e0:	e00c      	b.n	80048fc <QActive_postFromISR_+0x88>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d903      	bls.n	80048f6 <QActive_postFromISR_+0x82>
        status = true; /* can post */
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80048f4:	e002      	b.n	80048fc <QActive_postFromISR_+0x88>
    }
    else {
        status = false; /* cannot post */
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (status) { /* can post the event? */
 80048fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004900:	2b00      	cmp	r3, #0
 8004902:	d050      	beq.n	80049a6 <QActive_postFromISR_+0x132>
            QS_EQC_PRE_(nFree);   /* number of free entries */
            QS_EQC_PRE_(me->eQueue.nMin); /* min number of free entries */
        QS_END_NOCRIT_PRE_()

        /* is it a pool event? */
        if (e->poolId_ != 0U) {
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	789b      	ldrb	r3, [r3, #2]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d006      	beq.n	800491a <QActive_postFromISR_+0xa6>
            QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	78db      	ldrb	r3, [r3, #3]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	3301      	adds	r3, #1
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	70da      	strb	r2, [r3, #3]
        }

        --nFree; /* one free entry just used up */
 800491a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800491e:	3b01      	subs	r3, #1
 8004920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        me->eQueue.nFree = nFree;    /* update the volatile */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800492a:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	7e1b      	ldrb	r3, [r3, #24]
 8004930:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004934:	429a      	cmp	r2, r3
 8004936:	d203      	bcs.n	8004940 <QActive_postFromISR_+0xcc>
            me->eQueue.nMin = nFree; /* update minimum so far */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800493e:	761a      	strb	r2, [r3, #24]
        }

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <QActive_postFromISR_+0xf4>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	61bb      	str	r3, [r7, #24]
	__asm volatile
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f383 8811 	msr	BASEPRI, r3
}
 8004958:	bf00      	nop
            taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

            /* signal the event queue */
            vTaskNotifyGiveFromISR((TaskHandle_t)&me->thread,
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	331c      	adds	r3, #28
 800495e:	6839      	ldr	r1, [r7, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe ffb9 	bl	80038d8 <vTaskNotifyGiveFromISR>
 8004966:	e027      	b.n	80049b8 <QActive_postFromISR_+0x144>
                                   pxHigherPriorityTaskWoken);
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	7d5b      	ldrb	r3, [r3, #21]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	601a      	str	r2, [r3, #0]
            if (me->eQueue.head == 0U) { /* need to wrap head? */
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	7d5b      	ldrb	r3, [r3, #21]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <QActive_postFromISR_+0x118>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	7d1a      	ldrb	r2, [r3, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	7d5b      	ldrb	r3, [r3, #21]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	755a      	strb	r2, [r3, #21]
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f383 8811 	msr	BASEPRI, r3
}
 80049a4:	e008      	b.n	80049b8 <QActive_postFromISR_+0x144>
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f383 8811 	msr	BASEPRI, r3
}
 80049b0:	bf00      	nop
            QS_EQC_PRE_(margin); /* margin requested */
        QS_END_NOCRIT_PRE_()

        taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);

        QF_gcFromISR(e); /* recycle the event to avoid a leak */
 80049b2:	68b8      	ldr	r0, [r7, #8]
 80049b4:	f000 f808 	bl	80049c8 <QF_gcFromISR>
    }

    return status;
 80049b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3730      	adds	r7, #48	; 0x30
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	08005434 	.word	0x08005434

080049c8 <QF_gcFromISR>:
#endif /* Q_SPY */
    }
    return e; /* can't be NULL if we can't tolerate bad allocation */
}
/*..........................................................................*/
void QF_gcFromISR(QEvt const * const e) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d040      	beq.n	8004a5a <QF_gcFromISR+0x92>
	__asm volatile
 80049d8:	f3ef 8211 	mrs	r2, BASEPRI
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	617a      	str	r2, [r7, #20]
 80049ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80049f0:	697b      	ldr	r3, [r7, #20]
        UBaseType_t uxSavedInterruptState;
        uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 80049f2:	61fb      	str	r3, [r7, #28]

        /* isn't this the last ref? */
        if (e->refCtr_ > 1U) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	78db      	ldrb	r3, [r3, #3]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d90d      	bls.n	8004a1a <QF_gcFromISR+0x52>
            QF_EVT_REF_CTR_DEC_(e); /* decrements the ref counter */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	70da      	strb	r2, [r3, #3]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f383 8811 	msr	BASEPRI, r3
}
 8004a16:	bf00      	nop
#else
            QMPool_putFromISR(&QF_pool_[idx], (QEvt *)e, 0U);
#endif
        }
    }
}
 8004a18:	e01f      	b.n	8004a5a <QF_gcFromISR+0x92>
            uint_fast8_t idx = (uint_fast8_t)e->poolId_ - 1U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f383 8811 	msr	BASEPRI, r3
}
 8004a2c:	bf00      	nop
            Q_ASSERT_ID(810, idx < QF_maxPool_);
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <QF_gcFromISR+0x9c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d304      	bcc.n	8004a42 <QF_gcFromISR+0x7a>
 8004a38:	f240 312a 	movw	r1, #810	; 0x32a
 8004a3c:	480a      	ldr	r0, [pc, #40]	; (8004a68 <QF_gcFromISR+0xa0>)
 8004a3e:	f7fb fee6 	bl	800080e <Q_onAssert>
            QMPool_putFromISR(&QF_pool_[idx], (QEvt *)e, 0U);
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <QF_gcFromISR+0xa4>)
 8004a4e:	4413      	add	r3, r2
 8004a50:	2200      	movs	r2, #0
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f80b 	bl	8004a70 <QMPool_putFromISR>
}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20001120 	.word	0x20001120
 8004a68:	08005434 	.word	0x08005434
 8004a6c:	200010e4 	.word	0x200010e4

08004a70 <QMPool_putFromISR>:
/*..........................................................................*/
void QMPool_putFromISR(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
    UBaseType_t uxSavedInterruptState;

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(900, (me->nFree < me->nTot)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8a1b      	ldrh	r3, [r3, #16]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	89db      	ldrh	r3, [r3, #14]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d209      	bcs.n	8004a9e <QMPool_putFromISR+0x2e>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d304      	bcc.n	8004a9e <QMPool_putFromISR+0x2e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d904      	bls.n	8004aa8 <QMPool_putFromISR+0x38>
 8004a9e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8004aa2:	4814      	ldr	r0, [pc, #80]	; (8004af4 <QMPool_putFromISR+0x84>)
 8004aa4:	f7fb feb3 	bl	800080e <Q_onAssert>
	__asm volatile
 8004aa8:	f3ef 8211 	mrs	r2, BASEPRI
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61ba      	str	r2, [r7, #24]
 8004abe:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
                      && QF_PTR_RANGE_(b, me->start, me->end));

    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    uxSavedInterruptState = taskENTER_CRITICAL_FROM_ISR();
 8004ac2:	61fb      	str	r3, [r7, #28]

    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8a1b      	ldrh	r3, [r3, #16]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	821a      	strh	r2, [r3, #16]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f383 8811 	msr	BASEPRI, r3
}
 8004aea:	bf00      	nop
        QS_OBJ_PRE_(me->start); /* the memory managed by this pool */
        QS_MPC_PRE_(me->nFree); /* # free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptState);
}
 8004aec:	bf00      	nop
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	08005434 	.word	0x08005434

08004af8 <QMsm_ctor>:
* @usage
* The following example illustrates how to invoke QMsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qmsm_ctor.c
*/
void QMsm_ctor(QMsm * const me, QStateHandler initial) {
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
#ifdef Q_SPY
        ,&QMsm_getStateHandler_
#endif
    };
    /* do not call the QHsm_ctor() here */
    me->super.vptr = &vtable;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <QMsm_ctor+0x28>)
 8004b06:	601a      	str	r2, [r3, #0]
    me->super.state.obj = &l_msm_top_s; /* the current state (top) */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a06      	ldr	r2, [pc, #24]	; (8004b24 <QMsm_ctor+0x2c>)
 8004b0c:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;      /* the initial transition handler */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	08005458 	.word	0x08005458
 8004b24:	08005444 	.word	0x08005444

08004b28 <QMsm_init_>:
void QMsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QMsm_init_(QHsm * const me, void const * const e)
#endif
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <QMsm_init_+0x24>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <QMsm_init_+0x24>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <QMsm_init_+0x70>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <QMsm_init_+0x2c>
 8004b4c:	21c8      	movs	r1, #200	; 0xc8
 8004b4e:	4813      	ldr	r0, [pc, #76]	; (8004b9c <QMsm_init_+0x74>)
 8004b50:	f7fb fe5d 	bl	800080e <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (me->state.obj == &l_msm_top_s));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
 8004b5e:	60f8      	str	r0, [r7, #12]

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN_INIT);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b09      	cmp	r3, #9
 8004b64:	d003      	beq.n	8004b6e <QMsm_init_+0x46>
 8004b66:	21d2      	movs	r1, #210	; 0xd2
 8004b68:	480c      	ldr	r0, [pc, #48]	; (8004b9c <QMsm_init_+0x74>)
 8004b6a:	f7fb fe50 	bl	800080e <Q_onAssert>
        QS_FUN_PRE_(me->state.obj->stateHandler);          /* source state */
        QS_FUN_PRE_(me->temp.tatbl->target->stateHandler); /* target state */
    QS_END_PRE_()

    /* set state to the last tran. target */
    me->state.obj = me->temp.tatbl->target;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
    /* execute the tran. table */
    do {
#ifdef Q_SPY
        r = QMsm_execTatbl_(me, me->temp.tatbl, qs_id);
#else
        r = QMsm_execTatbl_(me, me->temp.tatbl);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8cc 	bl	8004d1c <QMsm_execTatbl_>
 8004b84:	60f8      	str	r0, [r7, #12]
#endif
    } while (r >= (QState)Q_RET_TRAN_INIT);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d8f5      	bhi.n	8004b78 <QMsm_init_+0x50>
    QS_BEGIN_PRE_(QS_QEP_INIT_TRAN, qs_id)
        QS_TIME_PRE_();   /* time stamp */
        QS_OBJ_PRE_(me);  /* this state machine object */
        QS_FUN_PRE_(me->state.obj->stateHandler); /* the new current state */
    QS_END_PRE_()
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	08005444 	.word	0x08005444
 8004b9c:	0800543c 	.word	0x0800543c

08004ba0 <QMsm_dispatch_>:
void QMsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QMsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
    QMState const *s = me->state.obj; /* store the current state */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	61fb      	str	r3, [r7, #28]
    QMState const *t = s;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	61bb      	str	r3, [r7, #24]
    QState r;
    QS_CRIT_STAT_

    /*! @pre current state must be initialized */
    Q_REQUIRE_ID(300, s != (QMState *)0);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <QMsm_dispatch_+0x24>
 8004bba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004bbe:	4856      	ldr	r0, [pc, #344]	; (8004d18 <QMsm_dispatch_+0x178>)
 8004bc0:	f7fb fe25 	bl	800080e <Q_onAssert>
        QS_FUN_PRE_(s->stateHandler); /* the current state handler */
    QS_END_PRE_()

    /* scan the state hierarchy up to the top state... */
    do {
        r = (*t->stateHandler)(me, e);  /* call state handler function */
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	6178      	str	r0, [r7, #20]

        /* event handled? (the most frequent case) */
        if (r >= (QState)Q_RET_HANDLED) {
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d81d      	bhi.n	8004c12 <QMsm_dispatch_+0x72>
            break; /* done scanning the state hierarchy */
        }
        /* event unhandled and passed to the superstate? */
        else if (r == (QState)Q_RET_SUPER) {
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d103      	bne.n	8004be4 <QMsm_dispatch_+0x44>
            t = t->superstate; /* advance to the superstate */
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e012      	b.n	8004c0a <QMsm_dispatch_+0x6a>
        }
        /* event unhandled and passed to a submachine superstate? */
        else if (r == (QState)Q_RET_SUPER_SUB) {
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d103      	bne.n	8004bf2 <QMsm_dispatch_+0x52>
            t = me->temp.obj; /* current host state of the submachie */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e00b      	b.n	8004c0a <QMsm_dispatch_+0x6a>
        }
        /* event unhandled due to a guard? */
        else if (r == (QState)Q_RET_UNHANDLED) {
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d103      	bne.n	8004c00 <QMsm_dispatch_+0x60>
                QS_SIG_PRE_(e->sig);  /* the signal of the event */
                QS_OBJ_PRE_(me);      /* this state machine object */
                QS_FUN_PRE_(t->stateHandler); /* the current state */
            QS_END_PRE_()

            t = t->superstate; /* advance to the superstate */
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	e004      	b.n	8004c0a <QMsm_dispatch_+0x6a>
        }
        else {
            /* no other return value should be produced */
            Q_ERROR_ID(310);
 8004c00:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004c04:	4844      	ldr	r0, [pc, #272]	; (8004d18 <QMsm_dispatch_+0x178>)
 8004c06:	f7fb fe02 	bl	800080e <Q_onAssert>
        }
    } while (t != (QMState *)0);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1d9      	bne.n	8004bc4 <QMsm_dispatch_+0x24>
 8004c10:	e000      	b.n	8004c14 <QMsm_dispatch_+0x74>
            break; /* done scanning the state hierarchy */
 8004c12:	bf00      	nop


    /* any kind of transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b07      	cmp	r3, #7
 8004c18:	d97a      	bls.n	8004d10 <QMsm_dispatch_+0x170>
        Q_ASSERT_ID(320, ts != (QMState *)0);
#endif /* Q_SPY */

        do {
            /* save the transition-action table before it gets clobbered */
            struct QMTranActTable const * const tatbl = me->temp.tatbl;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	613b      	str	r3, [r7, #16]
            union QHsmAttr tmp; /* temporary to save intermediate values */

            /* was TRAN, TRAN_INIT, or TRAN_EP taken? */
            if (r <= (QState)Q_RET_TRAN_EP) {
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b0a      	cmp	r3, #10
 8004c24:	d80d      	bhi.n	8004c42 <QMsm_dispatch_+0xa2>
#ifdef Q_SPY
                QMsm_exitToTranSource_(me, s, t, qs_id);
                r = QMsm_execTatbl_(me, tatbl, qs_id);
#else
                QMsm_exitToTranSource_(me, s, t);
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8a8 	bl	8004d80 <QMsm_exitToTranSource_>
                r = QMsm_execTatbl_(me, tatbl);
 8004c30:	6939      	ldr	r1, [r7, #16]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f872 	bl	8004d1c <QMsm_execTatbl_>
 8004c38:	6178      	str	r0, [r7, #20]
#endif
                s = me->state.obj;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e061      	b.n	8004d06 <QMsm_dispatch_+0x166>
            }
            /* was a transition segment to history taken? */
            else if (r == (QState)Q_RET_TRAN_HIST) {
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b0b      	cmp	r3, #11
 8004c46:	d118      	bne.n	8004c7a <QMsm_dispatch_+0xda>
                tmp.obj = me->state.obj; /* save history */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
                me->state.obj = s; /* restore the original state */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	605a      	str	r2, [r3, #4]
#ifdef Q_SPY
                QMsm_exitToTranSource_(me, s, t, qs_id);
                (void)QMsm_execTatbl_(me, tatbl, qs_id);
                r = QMsm_enterHistory_(me, tmp.obj, qs_id);
#else
                QMsm_exitToTranSource_(me, s, t);
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f891 	bl	8004d80 <QMsm_exitToTranSource_>
                (void)QMsm_execTatbl_(me, tatbl);
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f85b 	bl	8004d1c <QMsm_execTatbl_>
                r = QMsm_enterHistory_(me, tmp.obj);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8b6 	bl	8004ddc <QMsm_enterHistory_>
 8004c70:	6178      	str	r0, [r7, #20]
#endif
                s = me->state.obj;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e045      	b.n	8004d06 <QMsm_dispatch_+0x166>
            }
            /* was a transition segment to an exit point taken? */
            else if (r == (QState)Q_RET_TRAN_XP) {
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	d13d      	bne.n	8004cfc <QMsm_dispatch_+0x15c>
                tmp.act = me->state.act; /* save XP action */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
                me->state.obj = s; /* restore the original state */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	605a      	str	r2, [r3, #4]
                r = (*tmp.act)(me); /* execute the XP action */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
 8004c92:	6178      	str	r0, [r7, #20]
                if (r == (QState)Q_RET_TRAN) { /* XP -> TRAN ? */
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d10c      	bne.n	8004cb4 <QMsm_dispatch_+0x114>
                    tmp.tatbl = me->temp.tatbl; /* save me->temp */
                    QMsm_exitToTranSource_(me, s, t, qs_id);
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl, qs_id);
#else
                    QMsm_exitToTranSource_(me, s, t);
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	69f9      	ldr	r1, [r7, #28]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f86e 	bl	8004d80 <QMsm_exitToTranSource_>
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl);
 8004ca4:	6939      	ldr	r1, [r7, #16]
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f838 	bl	8004d1c <QMsm_execTatbl_>
#endif /* Q_SPY */
                    s = me->state.obj;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e028      	b.n	8004d06 <QMsm_dispatch_+0x166>
#ifdef Q_SPY
                    me->temp.tatbl = tmp.tatbl; /* restore me->temp */
#endif /* Q_SPY */
                }
                else if (r == (QState)Q_RET_TRAN_HIST) { /* XP -> HIST ? */
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b0b      	cmp	r3, #11
 8004cb8:	d117      	bne.n	8004cea <QMsm_dispatch_+0x14a>
                    tmp.obj = me->state.obj; /* save the history */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]
                    me->state.obj = s; /* restore the original state */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	605a      	str	r2, [r3, #4]
                    s = me->temp.obj; /* save me->temp */
                    QMsm_exitToTranSource_(me, me->state.obj, t, qs_id);
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl, qs_id);
#else
                    QMsm_exitToTranSource_(me, me->state.obj, t);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f856 	bl	8004d80 <QMsm_exitToTranSource_>
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl);
 8004cd4:	6939      	ldr	r1, [r7, #16]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f820 	bl	8004d1c <QMsm_execTatbl_>
#endif /* Q_SPY */
#ifdef Q_SPY
                    me->temp.obj = s; /* restore me->temp */
#endif /* Q_SPY */
                    s = me->state.obj;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	61fb      	str	r3, [r7, #28]
                    me->state.obj = tmp.obj; /* restore the history */
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	e00d      	b.n	8004d06 <QMsm_dispatch_+0x166>
                }
                else {
                    /* TRAN_XP must NOT be followed by any other tran type */
                    Q_ASSERT_ID(330, r < (QState)Q_RET_TRAN);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d90a      	bls.n	8004d06 <QMsm_dispatch_+0x166>
 8004cf0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004cf4:	4808      	ldr	r0, [pc, #32]	; (8004d18 <QMsm_dispatch_+0x178>)
 8004cf6:	f7fb fd8a 	bl	800080e <Q_onAssert>
 8004cfa:	e004      	b.n	8004d06 <QMsm_dispatch_+0x166>
                }
            }
            else {
                /* no other return value should be produced */
                Q_ERROR_ID(340);
 8004cfc:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004d00:	4805      	ldr	r0, [pc, #20]	; (8004d18 <QMsm_dispatch_+0x178>)
 8004d02:	f7fb fd84 	bl	800080e <Q_onAssert>
            }

            t = s; /* set target to the current state */
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	61bb      	str	r3, [r7, #24]

        } while (r >= (QState)Q_RET_TRAN);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b07      	cmp	r3, #7
 8004d0e:	d884      	bhi.n	8004c1a <QMsm_dispatch_+0x7a>
    }
#endif /* Q_SPY */
    else {
        /* empty */
    }
}
 8004d10:	bf00      	nop
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	0800543c 	.word	0x0800543c

08004d1c <QMsm_execTatbl_>:
                              uint_fast8_t const qs_id)
#else
static QState QMsm_execTatbl_(QHsm * const me,
                              struct QMTranActTable const *tatbl)
#endif
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
    QState r = (QState)Q_RET_NULL;
 8004d26:	2307      	movs	r3, #7
 8004d28:	60fb      	str	r3, [r7, #12]
    QS_CRIT_STAT_

    /*! @pre the transition-action table pointer must not be NULL */
    Q_REQUIRE_ID(400, tatbl != (struct QMTranActTable *)0);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <QMsm_execTatbl_+0x1e>
 8004d30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d34:	4811      	ldr	r0, [pc, #68]	; (8004d7c <QMsm_execTatbl_+0x60>)
 8004d36:	f7fb fd6a 	bl	800080e <Q_onAssert>

    for (QActionHandler const *a = &tatbl->act[0];
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	e007      	b.n	8004d52 <QMsm_execTatbl_+0x36>
         *a != Q_ACTION_CAST(0);
         ++a)
    {
        r = (*(*a))(me); /* call the action through the 'a' pointer */
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	60f8      	str	r0, [r7, #12]
         ++a)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	60bb      	str	r3, [r7, #8]
         *a != Q_ACTION_CAST(0);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	681b      	ldr	r3, [r3, #0]
    for (QActionHandler const *a = &tatbl->act[0];
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f3      	bne.n	8004d42 <QMsm_execTatbl_+0x26>
#endif /* Q_SPY */
    }

    me->state.obj = (r >= (QState)Q_RET_TRAN)
        ? me->temp.tatbl->target
        : tatbl->target;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b07      	cmp	r3, #7
 8004d5e:	d903      	bls.n	8004d68 <QMsm_execTatbl_+0x4c>
        ? me->temp.tatbl->target
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
        : tatbl->target;
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	e001      	b.n	8004d6c <QMsm_execTatbl_+0x50>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
    me->state.obj = (r >= (QState)Q_RET_TRAN)
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6053      	str	r3, [r2, #4]
    return r;
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	0800543c 	.word	0x0800543c

08004d80 <QMsm_exitToTranSource_>:
                                   uint_fast8_t const qs_id)
#else
static void QMsm_exitToTranSource_(QHsm * const me, QMState const *cs,
                                   QMState const *ts)
#endif
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
    QMState const *s = cs;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	617b      	str	r3, [r7, #20]

    /* exit states from the current state to the tran. source state */
    while (s != ts) {
 8004d90:	e018      	b.n	8004dc4 <QMsm_exitToTranSource_+0x44>
        /* exit action provided in state 's'? */
        if (s->exitAction != Q_ACTION_CAST(0)) {
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <QMsm_exitToTranSource_+0x22>
            QS_CRIT_STAT_

            (void)(*s->exitAction)(me); /* execute the exit action */
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	4798      	blx	r3
                QS_OBJ_PRE_(me);              /* this state machine object */
                QS_FUN_PRE_(s->stateHandler); /* the exited state handler */
            QS_END_PRE_()
        }

        s = s->superstate; /* advance to the superstate */
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	617b      	str	r3, [r7, #20]

        if (s == (QMState *)0) { /* reached the top of a submachine? */
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <QMsm_exitToTranSource_+0x44>
            s = me->temp.obj; /* the superstate from QM_SM_EXIT() */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	617b      	str	r3, [r7, #20]
            Q_ASSERT_ID(510, s != (QMState *)0); /* must be valid */
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <QMsm_exitToTranSource_+0x44>
 8004dba:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8004dbe:	4806      	ldr	r0, [pc, #24]	; (8004dd8 <QMsm_exitToTranSource_+0x58>)
 8004dc0:	f7fb fd25 	bl	800080e <Q_onAssert>
    while (s != ts) {
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1e2      	bne.n	8004d92 <QMsm_exitToTranSource_+0x12>
        }
    }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	0800543c 	.word	0x0800543c

08004ddc <QMsm_enterHistory_>:
static QState QMsm_enterHistory_(QHsm * const me, QMState const *const hist,
                                 uint_fast8_t const qs_id)
#else
static QState QMsm_enterHistory_(QHsm * const me, QMState const *const hist)
#endif
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
    QMState const *s = hist;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    QMState const *ts = me->state.obj; /* transition source */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	623b      	str	r3, [r7, #32]
        QS_OBJ_PRE_(me);                 /* this state machine object */
        QS_FUN_PRE_(ts->stateHandler);   /* source state handler */
        QS_FUN_PRE_(hist->stateHandler); /* target state handler */
    QS_END_PRE_()

    int_fast8_t i = 0;  /* transition entry path index */
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
    while (s != ts) {
 8004df4:	e01d      	b.n	8004e32 <QMsm_enterHistory_+0x56>
        if (s->entryAction != Q_ACTION_CAST(0)) {
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d011      	beq.n	8004e22 <QMsm_enterHistory_+0x46>
            Q_ASSERT_ID(620, i < QMSM_MAX_ENTRY_DEPTH_);
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	dd04      	ble.n	8004e0e <QMsm_enterHistory_+0x32>
 8004e04:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8004e08:	481e      	ldr	r0, [pc, #120]	; (8004e84 <QMsm_enterHistory_+0xa8>)
 8004e0a:	f7fb fd00 	bl	800080e <Q_onAssert>
            epath[i] = s;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	3328      	adds	r3, #40	; 0x28
 8004e14:	443b      	add	r3, r7
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	f843 2c20 	str.w	r2, [r3, #-32]
            ++i;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
        }
        s = s->superstate;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
        if (s == (QMState *)0) {
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <QMsm_enterHistory_+0x56>
            ts = s; /* force exit from the for-loop */
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	623b      	str	r3, [r7, #32]
    while (s != ts) {
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d1dd      	bne.n	8004df6 <QMsm_enterHistory_+0x1a>
        }
    }

    /* retrace the entry path in reverse (desired) order... */
    while (i > 0) {
 8004e3a:	e00b      	b.n	8004e54 <QMsm_enterHistory_+0x78>
        --i;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
        (void)(*epath[i]->entryAction)(me); /* run entry action in epath[i] */
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	3328      	adds	r3, #40	; 0x28
 8004e48:	443b      	add	r3, r7
 8004e4a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
    while (i > 0) {
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dcf0      	bgt.n	8004e3c <QMsm_enterHistory_+0x60>
            QS_OBJ_PRE_(me);
            QS_FUN_PRE_(epath[i]->stateHandler); /* entered state handler */
        QS_END_PRE_()
    }

    me->state.obj = hist; /* set current state to the transition target */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	605a      	str	r2, [r3, #4]

    /* initial tran. present? */
    QState r;
    if (hist->initAction != Q_ACTION_CAST(0)) {
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <QMsm_enterHistory_+0x98>
        r = (*hist->initAction)(me); /* execute the transition action */
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	61b8      	str	r0, [r7, #24]
 8004e72:	e001      	b.n	8004e78 <QMsm_enterHistory_+0x9c>
    }
    else {
        r = (QState)Q_RET_NULL;
 8004e74:	2307      	movs	r3, #7
 8004e76:	61bb      	str	r3, [r7, #24]
    }
    return r;
 8004e78:	69bb      	ldr	r3, [r7, #24]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3728      	adds	r7, #40	; 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	0800543c 	.word	0x0800543c

08004e88 <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    uint_fast8_t const p = (uint_fast8_t)a->prio;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004e96:	60fb      	str	r3, [r7, #12]
    /*! @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <QF_add_+0x28>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d805      	bhi.n	8004eb0 <QF_add_+0x28>
 8004ea4:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <QF_add_+0x4c>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <QF_add_+0x30>
 8004eb0:	2164      	movs	r1, #100	; 0x64
 8004eb2:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <QF_add_+0x50>)
 8004eb4:	f7fb fcab 	bl	800080e <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8004eb8:	f7ff fa6c 	bl	8004394 <vPortEnterCritical>
    QF_active_[p] = a; /* register the active object at this priority */
 8004ebc:	4905      	ldr	r1, [pc, #20]	; (8004ed4 <QF_add_+0x4c>)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 8004ec6:	f7ff fa95 	bl	80043f4 <vPortExitCritical>
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20001060 	.word	0x20001060
 8004ed8:	08005460 	.word	0x08005460

08004edc <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	e008      	b.n	8004f02 <QF_bzero+0x26>
        *ptr = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f3      	bne.n	8004ef0 <QF_bzero+0x14>
    }
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <QActive_post_+0x1a>
 8004f2a:	2164      	movs	r1, #100	; 0x64
 8004f2c:	483d      	ldr	r0, [pc, #244]	; (8005024 <QActive_post_+0x10c>)
 8004f2e:	f7fb fc6e 	bl	800080e <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8004f32:	f7ff fa2f 	bl	8004394 <vPortEnterCritical>
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	7ddb      	ldrb	r3, [r3, #23]
 8004f3a:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10e      	bne.n	8004f64 <QActive_post_+0x4c>
        if (nFree > 0U) {
 8004f46:	7dbb      	ldrb	r3, [r7, #22]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <QActive_post_+0x3a>
            status = true; /* can post */
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
 8004f50:	e012      	b.n	8004f78 <QActive_post_+0x60>
        }
        else {
            status = false; /* cannot post */
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8004f56:	f7ff fa4d 	bl	80043f4 <vPortExitCritical>
 8004f5a:	216e      	movs	r1, #110	; 0x6e
 8004f5c:	4831      	ldr	r0, [pc, #196]	; (8005024 <QActive_post_+0x10c>)
 8004f5e:	f7fb fc56 	bl	800080e <Q_onAssert>
 8004f62:	e009      	b.n	8004f78 <QActive_post_+0x60>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	7dba      	ldrb	r2, [r7, #22]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d902      	bls.n	8004f74 <QActive_post_+0x5c>
        status = true; /* can post */
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
 8004f72:	e001      	b.n	8004f78 <QActive_post_+0x60>
    }
    else {
        status = false; /* cannot post, but don't assert */
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	789b      	ldrb	r3, [r3, #2]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d006      	beq.n	8004f8e <QActive_post_+0x76>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3301      	adds	r3, #1
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d03d      	beq.n	8005010 <QActive_post_+0xf8>

        --nFree; /* one free entry just used up */
 8004f94:	7dbb      	ldrb	r3, [r7, #22]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	7dba      	ldrb	r2, [r7, #22]
 8004f9e:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	7e1b      	ldrb	r3, [r3, #24]
 8004fa4:	7dba      	ldrb	r2, [r7, #22]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d202      	bcs.n	8004fb0 <QActive_post_+0x98>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	7dba      	ldrb	r2, [r7, #22]
 8004fae:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10f      	bne.n	8004fd8 <QActive_post_+0xc0>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8004fbe:	f7ff fa19 	bl	80043f4 <vPortExitCritical>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f103 001c 	add.w	r0, r3, #28
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2202      	movs	r2, #2
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f7fe fbcb 	bl	8003768 <xTaskGenericNotify>
 8004fd2:	f7ff f9df 	bl	8004394 <vPortEnterCritical>
 8004fd6:	e018      	b.n	800500a <QActive_post_+0xf2>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	7d5b      	ldrb	r3, [r3, #21]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	7d5b      	ldrb	r3, [r3, #21]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <QActive_post_+0xe4>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	7d1a      	ldrb	r2, [r3, #20]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	7d5b      	ldrb	r3, [r3, #21]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 800500a:	f7ff f9f3 	bl	80043f4 <vPortExitCritical>
 800500e:	e004      	b.n	800501a <QActive_post_+0x102>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 8005010:	f7ff f9f0 	bl	80043f4 <vPortExitCritical>

        QF_gc(e); /* recycle the event to avoid a leak */
 8005014:	68b8      	ldr	r0, [r7, #8]
 8005016:	f000 f8c3 	bl	80051a0 <QF_gc>
    }

    return status;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	08005468 	.word	0x08005468

08005028 <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8005032:	f7ff f9af 	bl	8004394 <vPortEnterCritical>
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7ddb      	ldrb	r3, [r3, #23]
 800503a:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <QActive_postLIFO_+0x26>
 8005042:	f7ff f9d7 	bl	80043f4 <vPortExitCritical>
 8005046:	21d2      	movs	r1, #210	; 0xd2
 8005048:	4828      	ldr	r0, [pc, #160]	; (80050ec <QActive_postLIFO_+0xc4>)
 800504a:	f7fb fbe0 	bl	800080e <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	789b      	ldrb	r3, [r3, #2]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <QActive_postLIFO_+0x3c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	78db      	ldrb	r3, [r3, #3]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3301      	adds	r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	3b01      	subs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7e1b      	ldrb	r3, [r3, #24]
 8005074:	7bfa      	ldrb	r2, [r7, #15]
 8005076:	429a      	cmp	r2, r3
 8005078:	d202      	bcs.n	8005080 <QActive_postLIFO_+0x58>
        me->eQueue.nMin = nFree; /* update minimum so far */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <QActive_postLIFO_+0x84>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8005092:	f7ff f9af 	bl	80043f4 <vPortExitCritical>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f103 001c 	add.w	r0, r3, #28
 800509c:	2300      	movs	r3, #0
 800509e:	2202      	movs	r2, #2
 80050a0:	2100      	movs	r1, #0
 80050a2:	f7fe fb61 	bl	8003768 <xTaskGenericNotify>
 80050a6:	f7ff f975 	bl	8004394 <vPortEnterCritical>
 80050aa:	e019      	b.n	80050e0 <QActive_postLIFO_+0xb8>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7d9b      	ldrb	r3, [r3, #22]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	3301      	adds	r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7d9b      	ldrb	r3, [r3, #22]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	7d1b      	ldrb	r3, [r3, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d102      	bne.n	80050ce <QActive_postLIFO_+0xa6>
            me->eQueue.tail = 0U; /* wrap around */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7d9b      	ldrb	r3, [r3, #22]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 80050e0:	f7ff f988 	bl	80043f4 <vPortExitCritical>
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	08005468 	.word	0x08005468

080050f0 <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80050f8:	f7ff f94c 	bl	8004394 <vPortEnterCritical>
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 80050fc:	e008      	b.n	8005110 <QActive_get_+0x20>
 80050fe:	f7ff f979 	bl	80043f4 <vPortExitCritical>
 8005102:	f04f 31ff 	mov.w	r1, #4294967295
 8005106:	2001      	movs	r0, #1
 8005108:	f7fe fae6 	bl	80036d8 <ulTaskNotifyTake>
 800510c:	f7ff f942 	bl	8004394 <vPortEnterCritical>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f2      	beq.n	80050fe <QActive_get_+0xe>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7ddb      	ldrb	r3, [r3, #23]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3301      	adds	r3, #1
 8005126:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7afa      	ldrb	r2, [r7, #11]
 800512c:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7d1b      	ldrb	r3, [r3, #20]
 8005132:	7afa      	ldrb	r2, [r7, #11]
 8005134:	429a      	cmp	r2, r3
 8005136:	d81a      	bhi.n	800516e <QActive_get_+0x7e>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	7d9b      	ldrb	r3, [r3, #22]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	7d9b      	ldrb	r3, [r3, #22]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <QActive_get_+0x6e>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7d1a      	ldrb	r2, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7d9b      	ldrb	r3, [r3, #22]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	759a      	strb	r2, [r3, #22]
 800516c:	e00f      	b.n	800518e <QActive_get_+0x9e>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 8005174:	7afa      	ldrb	r2, [r7, #11]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7d1b      	ldrb	r3, [r3, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	429a      	cmp	r2, r3
 800517e:	d006      	beq.n	800518e <QActive_get_+0x9e>
 8005180:	f7ff f938 	bl	80043f4 <vPortExitCritical>
 8005184:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005188:	4804      	ldr	r0, [pc, #16]	; (800519c <QActive_get_+0xac>)
 800518a:	f7fb fb40 	bl	800080e <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 800518e:	f7ff f931 	bl	80043f4 <vPortExitCritical>
    return e;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	08005468 	.word	0x08005468

080051a0 <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	789b      	ldrb	r3, [r3, #2]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d02c      	beq.n	800520a <QF_gc+0x6a>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 80051b0:	f7ff f8f0 	bl	8004394 <vPortEnterCritical>

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	78db      	ldrb	r3, [r3, #3]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d909      	bls.n	80051d2 <QF_gc+0x32>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 80051cc:	f7ff f912 	bl	80043f4 <vPortExitCritical>
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 80051d0:	e01b      	b.n	800520a <QF_gc+0x6a>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	789b      	ldrb	r3, [r3, #2]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80051da:	f7ff f90b 	bl	80043f4 <vPortExitCritical>
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <QF_gc+0x74>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d304      	bcc.n	80051f2 <QF_gc+0x52>
 80051e8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80051ec:	480a      	ldr	r0, [pc, #40]	; (8005218 <QF_gc+0x78>)
 80051ee:	f7fb fb0e 	bl	800080e <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4a07      	ldr	r2, [pc, #28]	; (800521c <QF_gc+0x7c>)
 80051fe:	4413      	add	r3, r2
 8005200:	2200      	movs	r2, #0
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f80b 	bl	8005220 <QMPool_put>
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20001120 	.word	0x20001120
 8005218:	08005470 	.word	0x08005470
 800521c:	200010e4 	.word	0x200010e4

08005220 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8a1b      	ldrh	r3, [r3, #16]
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	89db      	ldrh	r3, [r3, #14]
 8005236:	429a      	cmp	r2, r3
 8005238:	d209      	bcs.n	800524e <QMPool_put+0x2e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d304      	bcc.n	800524e <QMPool_put+0x2e>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d903      	bls.n	8005256 <QMPool_put+0x36>
 800524e:	21c8      	movs	r1, #200	; 0xc8
 8005250:	480c      	ldr	r0, [pc, #48]	; (8005284 <QMPool_put+0x64>)
 8005252:	f7fb fadc 	bl	800080e <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8005256:	f7ff f89d 	bl	8004394 <vPortEnterCritical>
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8a1b      	ldrh	r3, [r3, #16]
 800526c:	b29b      	uxth	r3, r3
 800526e:	3301      	adds	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8005276:	f7ff f8bd 	bl	80043f4 <vPortExitCritical>
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	08005478 	.word	0x08005478

08005288 <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <QEQueue_init+0x32>
        me->head = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	3301      	adds	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	7adb      	ldrb	r3, [r3, #11]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	731a      	strb	r2, [r3, #12]
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <QMActive_ctor>:
*
* @note  Must be called only ONCE before QMSM_INIT().
*
* @sa QHsm_ctor()
*/
void QMActive_ctor(QMActive * const me, QStateHandler initial) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]

    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 80052e6:	217c      	movs	r1, #124	; 0x7c
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff fdf7 	bl	8004edc <QF_bzero>
    * in the code for QHsm_init_() and QHsm_dispatch_() implemetations,
    * which is expensive. To avoid this code size penalty, in case QHsm is
    * not used in a given project, the call to QMsm_ctor() avoids pulling
    * in the code for QHsm.
    */
    QMsm_ctor(QMSM_CAST_(&me->super.super), initial);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fc00 	bl	8004af8 <QMsm_ctor>

    me->super.super.vptr = &vtable.super; /* hook vptr to QMActive vtable */
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a03      	ldr	r2, [pc, #12]	; (8005308 <QMActive_ctor+0x2c>)
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	08005480 	.word	0x08005480

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4d0d      	ldr	r5, [pc, #52]	; (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2600      	movs	r6, #0
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4d0b      	ldr	r5, [pc, #44]	; (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x44>)
 8005320:	f000 f82e 	bl	8005380 <_init>
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2600      	movs	r6, #0
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	0800549c 	.word	0x0800549c
 8005348:	0800549c 	.word	0x0800549c
 800534c:	0800549c 	.word	0x0800549c
 8005350:	080054a0 	.word	0x080054a0

08005354 <memcpy>:
 8005354:	440a      	add	r2, r1
 8005356:	4291      	cmp	r1, r2
 8005358:	f100 33ff 	add.w	r3, r0, #4294967295
 800535c:	d100      	bne.n	8005360 <memcpy+0xc>
 800535e:	4770      	bx	lr
 8005360:	b510      	push	{r4, lr}
 8005362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800536a:	4291      	cmp	r1, r2
 800536c:	d1f9      	bne.n	8005362 <memcpy+0xe>
 800536e:	bd10      	pop	{r4, pc}

08005370 <memset>:
 8005370:	4402      	add	r2, r0
 8005372:	4603      	mov	r3, r0
 8005374:	4293      	cmp	r3, r2
 8005376:	d100      	bne.n	800537a <memset+0xa>
 8005378:	4770      	bx	lr
 800537a:	f803 1b01 	strb.w	r1, [r3], #1
 800537e:	e7f9      	b.n	8005374 <memset+0x4>

08005380 <_init>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr

0800538c <_fini>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr
