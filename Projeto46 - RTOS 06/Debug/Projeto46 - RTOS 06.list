
Projeto46 - RTOS 06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f4  080060f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060fc  080060fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004adc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b50  20004b50  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000305c  00000000  00000000  0003898d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a8c  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154ac  00000000  00000000  00041ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5aab  00000000  00000000  00056f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ca1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000584c  00000000  00000000  0012ca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f98 	.word	0x08005f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005f98 	.word	0x08005f98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa8c 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f832 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8b8 	bl	80006f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f88c 	bl	80006a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000588:	f002 f882 	bl	8002690 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Fila1 */
  Fila1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Fila1_attributes);
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <main+0x50>)
 800058e:	2101      	movs	r1, #1
 8000590:	2008      	movs	r0, #8
 8000592:	f002 f974 	bl	800287e <osMessageQueueNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <main+0x54>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Envia */
  EnviaHandle = osThreadNew(Envia_fun, NULL, &Envia_attributes);
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <main+0x58>)
 800059e:	2100      	movs	r1, #0
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <main+0x5c>)
 80005a2:	f002 f8bf 	bl	8002724 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <main+0x60>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of Recebe */
  RecebeHandle = osThreadNew(Recebe_fun, NULL, &Recebe_attributes);
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <main+0x64>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x68>)
 80005b2:	f002 f8b7 	bl	8002724 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <main+0x6c>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f002 f88c 	bl	80026d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x4c>
 80005c2:	bf00      	nop
 80005c4:	08006030 	.word	0x08006030
 80005c8:	200000dc 	.word	0x200000dc
 80005cc:	08005fe8 	.word	0x08005fe8
 80005d0:	08000729 	.word	0x08000729
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	0800600c 	.word	0x0800600c
 80005dc:	08000755 	.word	0x08000755
 80005e0:	200000d8 	.word	0x200000d8

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 ffec 	bl	80055d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SystemClock_Config+0xb4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xb4>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xb4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <SystemClock_Config+0xb8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <SystemClock_Config+0xb8>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <SystemClock_Config+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fcdd 	bl	8001014 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000660:	f000 f8b4 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ff40 	bl	8001504 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800068a:	f000 f89f 	bl	80007cc <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f001 fbd4 	bl	8001e84 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f873 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000090 	.word	0x20000090
 80006f0:	40011000 	.word	0x40011000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_GPIO_Init+0x30>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <MX_GPIO_Init+0x30>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_GPIO_Init+0x30>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <Envia_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Envia_fun */
void Envia_fun(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	uint8_t dados;

  /* Infinite loop */
  for(;;)
  {
	  dados = 100;
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	73fb      	strb	r3, [r7, #15]
	  osMessageQueuePut(Fila1Handle, &dados, 0, 100);
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <Envia_fun+0x28>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	f107 010f 	add.w	r1, r7, #15
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2200      	movs	r2, #0
 8000740:	f002 f910 	bl	8002964 <osMessageQueuePut>
	  osDelay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f002 f87e 	bl	8002848 <osDelay>
	  dados = 100;
 800074c:	e7f0      	b.n	8000730 <Envia_fun+0x8>
 800074e:	bf00      	nop
 8000750:	200000dc 	.word	0x200000dc

08000754 <Recebe_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Recebe_fun */
void Recebe_fun(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Recebe_fun */

	uint8_t recebeDados;
	char buffer[5] = {0};
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	2300      	movs	r3, #0
 8000762:	733b      	strb	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(Fila1Handle, &recebeDados, 0, osWaitForever);
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <Recebe_fun+0x48>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	f107 010f 	add.w	r1, r7, #15
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	2200      	movs	r2, #0
 8000772:	f002 f957 	bl	8002a24 <osMessageQueueGet>
	  recebeDados += 5;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3305      	adds	r3, #5
 800077a:	b2db      	uxtb	r3, r3
 800077c:	73fb      	strb	r3, [r7, #15]
	  snprintf(buffer, sizeof(buffer), "%04u", recebeDados);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f107 0008 	add.w	r0, r7, #8
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <Recebe_fun+0x4c>)
 8000786:	2105      	movs	r1, #5
 8000788:	f005 f838 	bl	80057fc <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, sizeof(buffer), 100);
 800078c:	f107 0108 	add.w	r1, r7, #8
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	2205      	movs	r2, #5
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <Recebe_fun+0x50>)
 8000796:	f001 fbc2 	bl	8001f1e <HAL_UART_Transmit>
	  osMessageQueueGet(Fila1Handle, &recebeDados, 0, osWaitForever);
 800079a:	e7e3      	b.n	8000764 <Recebe_fun+0x10>
 800079c:	200000dc 	.word	0x200000dc
 80007a0:	08005fc8 	.word	0x08005fc8
 80007a4:	20000090 	.word	0x20000090

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f98d 	bl	8000ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010000 	.word	0x40010000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_MspInit+0x54>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_MspInit+0x54>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 fa33 	bl	8000c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12c      	bne.n	80008ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_UART_MspInit+0x88>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_UART_MspInit+0x88>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_UART_MspInit+0x88>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_UART_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_UART_MspInit+0x88>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_UART_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800088a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_UART_MspInit+0x8c>)
 80008a8:	f000 fa18 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40011000 	.word	0x40011000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	2019      	movs	r0, #25
 80008d6:	f000 f9d7 	bl	8000c88 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008da:	2019      	movs	r0, #25
 80008dc:	f000 f9f0 	bl	8000cc0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_InitTick+0xa0>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xa0>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6453      	str	r3, [r2, #68]	; 0x44
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_InitTick+0xa0>)
 80008f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f000 ffdc 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800090c:	f000 ffc6 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 8000910:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_InitTick+0xa4>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_InitTick+0xa8>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_InitTick+0xac>)
 8000924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_InitTick+0xa8>)
 8000928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_InitTick+0xa8>)
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_InitTick+0xa8>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_InitTick+0xa8>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_InitTick+0xa8>)
 8000942:	f000 fff1 	bl	8001928 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <HAL_InitTick+0xa8>)
 800094e:	f001 f845 	bl	80019dc <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	431bde83 	.word	0x431bde83
 8000968:	200000e0 	.word	0x200000e0
 800096c:	40010000 	.word	0x40010000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009a2:	f001 f88b 	bl	8001abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000e0 	.word	0x200000e0

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f004 fdbc 	bl	800555c <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000128 	.word	0x20000128
 8000a18:	20004b50 	.word	0x20004b50

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6a:	f7ff ffd7 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f004 fd7b 	bl	8005568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fd7f 	bl	8000574 <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a84:	08006104 	.word	0x08006104
  ldr r2, =_sbss
 8000a88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a8c:	20004b50 	.word	0x20004b50

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f8d8 	bl	8000c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff fefc 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe86 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	2000012c 	.word	0x2000012c

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000012c 	.word	0x2000012c

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff4c 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9a:	f7ff ff61 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	6978      	ldr	r0, [r7, #20]
 8000ca6:	f7ff ffb1 	bl	8000c0c <NVIC_EncodePriority>
 8000caa:	4602      	mov	r2, r0
 8000cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff80 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff54 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	e16b      	b.n	8000fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f040 815a 	bne.w	8000fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d005      	beq.n	8000d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d130      	bne.n	8000d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	f003 0201 	and.w	r2, r3, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d017      	beq.n	8000dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d123      	bne.n	8000e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	69b9      	ldr	r1, [r7, #24]
 8000e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0203 	and.w	r2, r3, #3
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80b4 	beq.w	8000fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <HAL_GPIO_Init+0x30c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <HAL_GPIO_Init+0x30c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_GPIO_Init+0x30c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7e:	4a5b      	ldr	r2, [pc, #364]	; (8000fec <HAL_GPIO_Init+0x310>)
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <HAL_GPIO_Init+0x314>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02b      	beq.n	8000f02 <HAL_GPIO_Init+0x226>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a51      	ldr	r2, [pc, #324]	; (8000ff4 <HAL_GPIO_Init+0x318>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x222>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a50      	ldr	r2, [pc, #320]	; (8000ff8 <HAL_GPIO_Init+0x31c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x21e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4f      	ldr	r2, [pc, #316]	; (8000ffc <HAL_GPIO_Init+0x320>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x21a>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <HAL_GPIO_Init+0x324>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x216>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4d      	ldr	r2, [pc, #308]	; (8001004 <HAL_GPIO_Init+0x328>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x212>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_GPIO_Init+0x32c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x20e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4b      	ldr	r2, [pc, #300]	; (800100c <HAL_GPIO_Init+0x330>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x20a>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e00e      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000eea:	2306      	movs	r3, #6
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x310>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f46:	4a32      	ldr	r2, [pc, #200]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f ae90 	bls.w	8000cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40021400 	.word	0x40021400
 8001008:	40021800 	.word	0x40021800
 800100c:	40021c00 	.word	0x40021c00
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e267      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d075      	beq.n	800111e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001032:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b04      	cmp	r3, #4
 800103c:	d00c      	beq.n	8001058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	4b85      	ldr	r3, [pc, #532]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001046:	2b08      	cmp	r3, #8
 8001048:	d112      	bne.n	8001070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104a:	4b82      	ldr	r3, [pc, #520]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001056:	d10b      	bne.n	8001070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	4b7e      	ldr	r3, [pc, #504]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d05b      	beq.n	800111c <HAL_RCC_OscConfig+0x108>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d157      	bne.n	800111c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e242      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d106      	bne.n	8001088 <HAL_RCC_OscConfig+0x74>
 800107a:	4b76      	ldr	r3, [pc, #472]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a75      	ldr	r2, [pc, #468]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e01d      	b.n	80010c4 <HAL_RCC_OscConfig+0xb0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b70      	ldr	r3, [pc, #448]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6f      	ldr	r2, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b6d      	ldr	r3, [pc, #436]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a6c      	ldr	r2, [pc, #432]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xb0>
 80010ac:	4b69      	ldr	r3, [pc, #420]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a68      	ldr	r2, [pc, #416]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b66      	ldr	r3, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a65      	ldr	r2, [pc, #404]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fd18 	bl	8000b00 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fd14 	bl	8000b00 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e207      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xc0>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fd04 	bl	8000b00 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fd00 	bl	8000b00 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1f3      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	4b51      	ldr	r3, [pc, #324]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0xe8>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d063      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800112a:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800113e:	2b08      	cmp	r3, #8
 8001140:	d11c      	bne.n	800117c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x152>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e1c7      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4937      	ldr	r1, [pc, #220]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e03a      	b.n	80011f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_RCC_OscConfig+0x244>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fcb9 	bl	8000b00 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fcb5 	bl	8000b00 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e1a8      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4925      	ldr	r1, [pc, #148]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_OscConfig+0x244>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc98 	bl	8000b00 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc94 	bl	8000b00 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e187      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d036      	beq.n	800126c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d016      	beq.n	8001234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_RCC_OscConfig+0x248>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fc78 	bl	8000b00 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fc74 	bl	8000b00 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e167      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_OscConfig+0x240>)
 8001228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x200>
 8001232:	e01b      	b.n	800126c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_OscConfig+0x248>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fc61 	bl	8000b00 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	e00e      	b.n	8001260 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001242:	f7ff fc5d 	bl	8000b00 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d907      	bls.n	8001260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e150      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
 8001254:	40023800 	.word	0x40023800
 8001258:	42470000 	.word	0x42470000
 800125c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	4b88      	ldr	r3, [pc, #544]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ea      	bne.n	8001242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 8097 	beq.w	80013a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127e:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b7d      	ldr	r3, [pc, #500]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a7c      	ldr	r2, [pc, #496]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	4b77      	ldr	r3, [pc, #476]	; (8001488 <HAL_RCC_OscConfig+0x474>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d118      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b6:	4b74      	ldr	r3, [pc, #464]	; (8001488 <HAL_RCC_OscConfig+0x474>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a73      	ldr	r2, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x474>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fc1d 	bl	8000b00 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ca:	f7ff fc19 	bl	8000b00 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e10c      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <HAL_RCC_OscConfig+0x474>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x2ea>
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	4a63      	ldr	r2, [pc, #396]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6713      	str	r3, [r2, #112]	; 0x70
 80012fc:	e01c      	b.n	8001338 <HAL_RCC_OscConfig+0x324>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x30c>
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	4a5e      	ldr	r2, [pc, #376]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	4a5b      	ldr	r2, [pc, #364]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6713      	str	r3, [r2, #112]	; 0x70
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0x324>
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a57      	ldr	r2, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
 800132c:	4b55      	ldr	r3, [pc, #340]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a54      	ldr	r2, [pc, #336]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001332:	f023 0304 	bic.w	r3, r3, #4
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d015      	beq.n	800136c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff fbde 	bl	8000b00 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001346:	e00a      	b.n	800135e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff fbda 	bl	8000b00 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e0cb      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135e:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ee      	beq.n	8001348 <HAL_RCC_OscConfig+0x334>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff fbc8 	bl	8000b00 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f7ff fbc4 	bl	8000b00 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e0b5      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ee      	bne.n	8001374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a38      	ldr	r2, [pc, #224]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a1 	beq.w	80014f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d05c      	beq.n	8001478 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d141      	bne.n	800144a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_RCC_OscConfig+0x478>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb98 	bl	8000b00 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fb94 	bl	8000b00 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e087      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	3b01      	subs	r3, #1
 800140c:	041b      	lsls	r3, r3, #16
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	491b      	ldr	r1, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x478>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb6d 	bl	8000b00 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fb69 	bl	8000b00 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e05c      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x416>
 8001448:	e054      	b.n	80014f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_RCC_OscConfig+0x478>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb56 	bl	8000b00 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb52 	bl	8000b00 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e045      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_RCC_OscConfig+0x470>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x444>
 8001476:	e03d      	b.n	80014f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d107      	bne.n	8001490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e038      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000
 800148c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x4ec>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d028      	beq.n	80014f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d121      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d11a      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014c0:	4013      	ands	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d111      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	3b01      	subs	r3, #1
 80014da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0cc      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d90c      	bls.n	8001540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b65      	ldr	r3, [pc, #404]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0b8      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d020      	beq.n	800158e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800157a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	494d      	ldr	r1, [pc, #308]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d044      	beq.n	8001624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d119      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e07f      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d003      	beq.n	80015c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e06f      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e067      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 0203 	bic.w	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4934      	ldr	r1, [pc, #208]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f4:	f7ff fa84 	bl	8000b00 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff fa80 	bl	8000b00 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e04f      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 020c 	and.w	r2, r3, #12
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1eb      	bne.n	80015fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d20c      	bcs.n	800164c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e032      	b.n	80016b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4916      	ldr	r1, [pc, #88]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	490e      	ldr	r1, [pc, #56]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800168a:	f000 f821 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 800168e:	4602      	mov	r2, r0
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	490a      	ldr	r1, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	5ccb      	ldrb	r3, [r1, r3]
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_ClockConfig+0x1c8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f908 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00
 80016c0:	40023800 	.word	0x40023800
 80016c4:	08006048 	.word	0x08006048
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b090      	sub	sp, #64	; 0x40
 80016d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d00d      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x40>
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	f200 80a1 	bhi.w	800183c <HAL_RCC_GetSysClockFreq+0x16c>
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x34>
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d003      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x3a>
 8001702:	e09b      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_GetSysClockFreq+0x184>)
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001708:	e09b      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800170a:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_GetSysClockFreq+0x188>)
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800170e:	e098      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001710:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <HAL_RCC_GetSysClockFreq+0x180>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_RCC_GetSysClockFreq+0x180>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d028      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <HAL_RCC_GetSysClockFreq+0x180>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	2200      	movs	r2, #0
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	627a      	str	r2, [r7, #36]	; 0x24
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001738:	2100      	movs	r1, #0
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <HAL_RCC_GetSysClockFreq+0x188>)
 800173c:	fb03 f201 	mul.w	r2, r3, r1
 8001740:	2300      	movs	r3, #0
 8001742:	fb00 f303 	mul.w	r3, r0, r3
 8001746:	4413      	add	r3, r2
 8001748:	4a43      	ldr	r2, [pc, #268]	; (8001858 <HAL_RCC_GetSysClockFreq+0x188>)
 800174a:	fba0 1202 	umull	r1, r2, r0, r2
 800174e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001750:	460a      	mov	r2, r1
 8001752:	62ba      	str	r2, [r7, #40]	; 0x28
 8001754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001756:	4413      	add	r3, r2
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175c:	2200      	movs	r2, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	61fa      	str	r2, [r7, #28]
 8001762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800176a:	f7fe fd81 	bl	8000270 <__aeabi_uldivmod>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4613      	mov	r3, r2
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001776:	e053      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	099b      	lsrs	r3, r3, #6
 800177e:	2200      	movs	r2, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	617a      	str	r2, [r7, #20]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800178a:	f04f 0b00 	mov.w	fp, #0
 800178e:	4652      	mov	r2, sl
 8001790:	465b      	mov	r3, fp
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	0159      	lsls	r1, r3, #5
 800179c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a0:	0150      	lsls	r0, r2, #5
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ebb2 080a 	subs.w	r8, r2, sl
 80017aa:	eb63 090b 	sbc.w	r9, r3, fp
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017c2:	ebb2 0408 	subs.w	r4, r2, r8
 80017c6:	eb63 0509 	sbc.w	r5, r3, r9
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	00eb      	lsls	r3, r5, #3
 80017d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d8:	00e2      	lsls	r2, r4, #3
 80017da:	4614      	mov	r4, r2
 80017dc:	461d      	mov	r5, r3
 80017de:	eb14 030a 	adds.w	r3, r4, sl
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	eb45 030b 	adc.w	r3, r5, fp
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017f6:	4629      	mov	r1, r5
 80017f8:	028b      	lsls	r3, r1, #10
 80017fa:	4621      	mov	r1, r4
 80017fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001800:	4621      	mov	r1, r4
 8001802:	028a      	lsls	r2, r1, #10
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180a:	2200      	movs	r2, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	60fa      	str	r2, [r7, #12]
 8001810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001814:	f7fe fd2c 	bl	8000270 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4613      	mov	r3, r2
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_GetSysClockFreq+0x180>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	3301      	adds	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	fbb2 f3f3 	udiv	r3, r2, r3
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800183a:	e002      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetSysClockFreq+0x184>)
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001844:	4618      	mov	r0, r3
 8001846:	3740      	adds	r7, #64	; 0x40
 8001848:	46bd      	mov	sp, r7
 800184a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	00f42400 	.word	0x00f42400
 8001858:	017d7840 	.word	0x017d7840

0800185c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_GetHCLKFreq+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff0 	bl	800185c <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0a9b      	lsrs	r3, r3, #10
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	08006058 	.word	0x08006058

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffdc 	bl	800185c <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0b5b      	lsrs	r3, r3, #13
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	08006058 	.word	0x08006058

080018c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	220f      	movs	r2, #15
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_RCC_GetClockConfig+0x60>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0207 	and.w	r2, r3, #7
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e041      	b.n	80019be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f839 	bl	80019c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3304      	adds	r3, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f000 f9d8 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d001      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04e      	b.n	8001a92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d022      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1e:	d01d      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d018      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d013      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <HAL_TIM_Base_Start_IT+0xd0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00e      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d009      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d004      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x80>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d111      	bne.n	8001a80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d010      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7e:	e007      	b.n	8001a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40000800 	.word	0x40000800
 8001aac:	40000c00 	.word	0x40000c00
 8001ab0:	40010400 	.word	0x40010400
 8001ab4:	40014000 	.word	0x40014000
 8001ab8:	40001800 	.word	0x40001800

08001abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d11b      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0202 	mvn.w	r2, #2
 8001ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8ee 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8e0 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8f1 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d122      	bne.n	8001b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d11b      	bne.n	8001b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0204 	mvn.w	r2, #4
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8c4 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8b6 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f8c7 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d122      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d11b      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0208 	mvn.w	r2, #8
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f89a 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f88c 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f89d 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d122      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b10      	cmp	r3, #16
 8001bda:	d11b      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0210 	mvn.w	r2, #16
 8001be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2208      	movs	r2, #8
 8001bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f870 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f862 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f873 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10e      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0201 	mvn.w	r2, #1
 8001c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fdb4 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b80      	cmp	r3, #128	; 0x80
 8001c4c:	d10e      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c58:	2b80      	cmp	r3, #128	; 0x80
 8001c5a:	d107      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f902 	bl	8001e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d10e      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d107      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f838 	bl	8001d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d107      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0220 	mvn.w	r2, #32
 8001cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8cc 	bl	8001e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <TIM_Base_SetConfig+0x114>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3a:	d00f      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3d      	ldr	r2, [pc, #244]	; (8001e34 <TIM_Base_SetConfig+0x118>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00b      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <TIM_Base_SetConfig+0x11c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <TIM_Base_SetConfig+0x120>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <TIM_Base_SetConfig+0x124>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <TIM_Base_SetConfig+0x114>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02b      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d027      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <TIM_Base_SetConfig+0x118>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d023      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <TIM_Base_SetConfig+0x11c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <TIM_Base_SetConfig+0x120>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01b      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <TIM_Base_SetConfig+0x124>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d017      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a28      	ldr	r2, [pc, #160]	; (8001e44 <TIM_Base_SetConfig+0x128>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <TIM_Base_SetConfig+0x12c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00f      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <TIM_Base_SetConfig+0x130>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00b      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <TIM_Base_SetConfig+0x134>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <TIM_Base_SetConfig+0x138>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <TIM_Base_SetConfig+0x13c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <TIM_Base_SetConfig+0x114>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <TIM_Base_SetConfig+0xf8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <TIM_Base_SetConfig+0x124>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d103      	bne.n	8001e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	40000c00 	.word	0x40000c00
 8001e40:	40010400 	.word	0x40010400
 8001e44:	40014000 	.word	0x40014000
 8001e48:	40014400 	.word	0x40014400
 8001e4c:	40014800 	.word	0x40014800
 8001e50:	40001800 	.word	0x40001800
 8001e54:	40001c00 	.word	0x40001c00
 8001e58:	40002000 	.word	0x40002000

08001e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e03f      	b.n	8001f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fcc0 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f929 	bl	8002120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b08a      	sub	sp, #40	; 0x28
 8001f22:	af02      	add	r7, sp, #8
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d17c      	bne.n	8002038 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_UART_Transmit+0x2c>
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e075      	b.n	800203a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_UART_Transmit+0x3e>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e06e      	b.n	800203a <HAL_UART_Transmit+0x11c>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f72:	f7fe fdc5 	bl	8000b00 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_UART_Transmit+0x82>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	e003      	b.n	8001fa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fb0:	e02a      	b.n	8002008 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f840 	bl	8002042 <UART_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e036      	b.n	800203a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e007      	b.n	8001ffa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1cf      	bne.n	8001fb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	2140      	movs	r1, #64	; 0x40
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f810 	bl	8002042 <UART_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e006      	b.n	800203a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b090      	sub	sp, #64	; 0x40
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002052:	e050      	b.n	80020f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d04c      	beq.n	80020f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800205c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <UART_WaitOnFlagUntilTimeout+0x30>
 8002062:	f7fe fd4d 	bl	8000b00 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800206e:	429a      	cmp	r2, r3
 8002070:	d241      	bcs.n	80020f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	330c      	adds	r3, #12
 8002090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002092:	637a      	str	r2, [r7, #52]	; 0x34
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800209a:	e841 2300 	strex	r3, r2, [r1]
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e5      	bne.n	8002072 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3314      	adds	r3, #20
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	e853 3f00 	ldrex	r3, [r3]
 80020b4:	613b      	str	r3, [r7, #16]
   return(result);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3314      	adds	r3, #20
 80020c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c6:	623a      	str	r2, [r7, #32]
 80020c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	e841 2300 	strex	r3, r2, [r1]
 80020d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1e5      	bne.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	429a      	cmp	r2, r3
 8002112:	d09f      	beq.n	8002054 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3740      	adds	r7, #64	; 0x40
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002124:	b0c0      	sub	sp, #256	; 0x100
 8002126:	af00      	add	r7, sp, #0
 8002128:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	ea40 0301 	orr.w	r3, r0, r1
 8002148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	431a      	orrs	r2, r3
 8002158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	431a      	orrs	r2, r3
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002178:	f021 010c 	bic.w	r1, r1, #12
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002186:	430b      	orrs	r3, r1
 8002188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	6999      	ldr	r1, [r3, #24]
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	ea40 0301 	orr.w	r3, r0, r1
 80021a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b8f      	ldr	r3, [pc, #572]	; (80023ec <UART_SetConfig+0x2cc>)
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d005      	beq.n	80021c0 <UART_SetConfig+0xa0>
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b8d      	ldr	r3, [pc, #564]	; (80023f0 <UART_SetConfig+0x2d0>)
 80021bc:	429a      	cmp	r2, r3
 80021be:	d104      	bne.n	80021ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff fb6c 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 80021c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021c8:	e003      	b.n	80021d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ca:	f7ff fb53 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 80021ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021dc:	f040 810c 	bne.w	80023f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021f2:	4622      	mov	r2, r4
 80021f4:	462b      	mov	r3, r5
 80021f6:	1891      	adds	r1, r2, r2
 80021f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80021fa:	415b      	adcs	r3, r3
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002202:	4621      	mov	r1, r4
 8002204:	eb12 0801 	adds.w	r8, r2, r1
 8002208:	4629      	mov	r1, r5
 800220a:	eb43 0901 	adc.w	r9, r3, r1
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800221a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800221e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002222:	4690      	mov	r8, r2
 8002224:	4699      	mov	r9, r3
 8002226:	4623      	mov	r3, r4
 8002228:	eb18 0303 	adds.w	r3, r8, r3
 800222c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002230:	462b      	mov	r3, r5
 8002232:	eb49 0303 	adc.w	r3, r9, r3
 8002236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800223a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002246:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800224a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800224e:	460b      	mov	r3, r1
 8002250:	18db      	adds	r3, r3, r3
 8002252:	653b      	str	r3, [r7, #80]	; 0x50
 8002254:	4613      	mov	r3, r2
 8002256:	eb42 0303 	adc.w	r3, r2, r3
 800225a:	657b      	str	r3, [r7, #84]	; 0x54
 800225c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002264:	f7fe f804 	bl	8000270 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <UART_SetConfig+0x2d4>)
 800226e:	fba3 2302 	umull	r2, r3, r3, r2
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	011c      	lsls	r4, r3, #4
 8002276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002280:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002288:	4642      	mov	r2, r8
 800228a:	464b      	mov	r3, r9
 800228c:	1891      	adds	r1, r2, r2
 800228e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002290:	415b      	adcs	r3, r3
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002298:	4641      	mov	r1, r8
 800229a:	eb12 0a01 	adds.w	sl, r2, r1
 800229e:	4649      	mov	r1, r9
 80022a0:	eb43 0b01 	adc.w	fp, r3, r1
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022b8:	4692      	mov	sl, r2
 80022ba:	469b      	mov	fp, r3
 80022bc:	4643      	mov	r3, r8
 80022be:	eb1a 0303 	adds.w	r3, sl, r3
 80022c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022c6:	464b      	mov	r3, r9
 80022c8:	eb4b 0303 	adc.w	r3, fp, r3
 80022cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022e4:	460b      	mov	r3, r1
 80022e6:	18db      	adds	r3, r3, r3
 80022e8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ea:	4613      	mov	r3, r2
 80022ec:	eb42 0303 	adc.w	r3, r2, r3
 80022f0:	647b      	str	r3, [r7, #68]	; 0x44
 80022f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022fa:	f7fd ffb9 	bl	8000270 <__aeabi_uldivmod>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4611      	mov	r1, r2
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <UART_SetConfig+0x2d4>)
 8002306:	fba3 2301 	umull	r2, r3, r3, r1
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2264      	movs	r2, #100	; 0x64
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	1acb      	subs	r3, r1, r3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <UART_SetConfig+0x2d4>)
 800231c:	fba3 2302 	umull	r2, r3, r3, r2
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002328:	441c      	add	r4, r3
 800232a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002334:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800233c:	4642      	mov	r2, r8
 800233e:	464b      	mov	r3, r9
 8002340:	1891      	adds	r1, r2, r2
 8002342:	63b9      	str	r1, [r7, #56]	; 0x38
 8002344:	415b      	adcs	r3, r3
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800234c:	4641      	mov	r1, r8
 800234e:	1851      	adds	r1, r2, r1
 8002350:	6339      	str	r1, [r7, #48]	; 0x30
 8002352:	4649      	mov	r1, r9
 8002354:	414b      	adcs	r3, r1
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002364:	4659      	mov	r1, fp
 8002366:	00cb      	lsls	r3, r1, #3
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236e:	4651      	mov	r1, sl
 8002370:	00ca      	lsls	r2, r1, #3
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	4603      	mov	r3, r0
 8002378:	4642      	mov	r2, r8
 800237a:	189b      	adds	r3, r3, r2
 800237c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002380:	464b      	mov	r3, r9
 8002382:	460a      	mov	r2, r1
 8002384:	eb42 0303 	adc.w	r3, r2, r3
 8002388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002398:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800239c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023a0:	460b      	mov	r3, r1
 80023a2:	18db      	adds	r3, r3, r3
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a6:	4613      	mov	r3, r2
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023b6:	f7fd ff5b 	bl	8000270 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <UART_SetConfig+0x2d4>)
 80023c0:	fba3 1302 	umull	r1, r3, r3, r2
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	2164      	movs	r1, #100	; 0x64
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	3332      	adds	r3, #50	; 0x32
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <UART_SetConfig+0x2d4>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	f003 0207 	and.w	r2, r3, #7
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4422      	add	r2, r4
 80023e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023e8:	e105      	b.n	80025f6 <UART_SetConfig+0x4d6>
 80023ea:	bf00      	nop
 80023ec:	40011000 	.word	0x40011000
 80023f0:	40011400 	.word	0x40011400
 80023f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002402:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800240a:	4642      	mov	r2, r8
 800240c:	464b      	mov	r3, r9
 800240e:	1891      	adds	r1, r2, r2
 8002410:	6239      	str	r1, [r7, #32]
 8002412:	415b      	adcs	r3, r3
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800241a:	4641      	mov	r1, r8
 800241c:	1854      	adds	r4, r2, r1
 800241e:	4649      	mov	r1, r9
 8002420:	eb43 0501 	adc.w	r5, r3, r1
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	00eb      	lsls	r3, r5, #3
 800242e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002432:	00e2      	lsls	r2, r4, #3
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	4643      	mov	r3, r8
 800243a:	18e3      	adds	r3, r4, r3
 800243c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002440:	464b      	mov	r3, r9
 8002442:	eb45 0303 	adc.w	r3, r5, r3
 8002446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002456:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002466:	4629      	mov	r1, r5
 8002468:	008b      	lsls	r3, r1, #2
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002470:	4621      	mov	r1, r4
 8002472:	008a      	lsls	r2, r1, #2
 8002474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002478:	f7fd fefa 	bl	8000270 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4b60      	ldr	r3, [pc, #384]	; (8002604 <UART_SetConfig+0x4e4>)
 8002482:	fba3 2302 	umull	r2, r3, r3, r2
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	011c      	lsls	r4, r3, #4
 800248a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800248e:	2200      	movs	r2, #0
 8002490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002494:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800249c:	4642      	mov	r2, r8
 800249e:	464b      	mov	r3, r9
 80024a0:	1891      	adds	r1, r2, r2
 80024a2:	61b9      	str	r1, [r7, #24]
 80024a4:	415b      	adcs	r3, r3
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ac:	4641      	mov	r1, r8
 80024ae:	1851      	adds	r1, r2, r1
 80024b0:	6139      	str	r1, [r7, #16]
 80024b2:	4649      	mov	r1, r9
 80024b4:	414b      	adcs	r3, r1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024c4:	4659      	mov	r1, fp
 80024c6:	00cb      	lsls	r3, r1, #3
 80024c8:	4651      	mov	r1, sl
 80024ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ce:	4651      	mov	r1, sl
 80024d0:	00ca      	lsls	r2, r1, #3
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	4642      	mov	r2, r8
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024e0:	464b      	mov	r3, r9
 80024e2:	460a      	mov	r2, r1
 80024e4:	eb42 0303 	adc.w	r3, r2, r3
 80024e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80024f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002504:	4649      	mov	r1, r9
 8002506:	008b      	lsls	r3, r1, #2
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800250e:	4641      	mov	r1, r8
 8002510:	008a      	lsls	r2, r1, #2
 8002512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002516:	f7fd feab 	bl	8000270 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <UART_SetConfig+0x4e4>)
 8002520:	fba3 1302 	umull	r1, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2164      	movs	r1, #100	; 0x64
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	3332      	adds	r3, #50	; 0x32
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <UART_SetConfig+0x4e4>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253e:	441c      	add	r4, r3
 8002540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002544:	2200      	movs	r2, #0
 8002546:	673b      	str	r3, [r7, #112]	; 0x70
 8002548:	677a      	str	r2, [r7, #116]	; 0x74
 800254a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800254e:	4642      	mov	r2, r8
 8002550:	464b      	mov	r3, r9
 8002552:	1891      	adds	r1, r2, r2
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	415b      	adcs	r3, r3
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800255e:	4641      	mov	r1, r8
 8002560:	1851      	adds	r1, r2, r1
 8002562:	6039      	str	r1, [r7, #0]
 8002564:	4649      	mov	r1, r9
 8002566:	414b      	adcs	r3, r1
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002576:	4659      	mov	r1, fp
 8002578:	00cb      	lsls	r3, r1, #3
 800257a:	4651      	mov	r1, sl
 800257c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002580:	4651      	mov	r1, sl
 8002582:	00ca      	lsls	r2, r1, #3
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	4603      	mov	r3, r0
 800258a:	4642      	mov	r2, r8
 800258c:	189b      	adds	r3, r3, r2
 800258e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002590:	464b      	mov	r3, r9
 8002592:	460a      	mov	r2, r1
 8002594:	eb42 0303 	adc.w	r3, r2, r3
 8002598:	66fb      	str	r3, [r7, #108]	; 0x6c
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	663b      	str	r3, [r7, #96]	; 0x60
 80025a4:	667a      	str	r2, [r7, #100]	; 0x64
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025b2:	4649      	mov	r1, r9
 80025b4:	008b      	lsls	r3, r1, #2
 80025b6:	4641      	mov	r1, r8
 80025b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025bc:	4641      	mov	r1, r8
 80025be:	008a      	lsls	r2, r1, #2
 80025c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025c4:	f7fd fe54 	bl	8000270 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <UART_SetConfig+0x4e4>)
 80025ce:	fba3 1302 	umull	r1, r3, r3, r2
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2164      	movs	r1, #100	; 0x64
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	3332      	adds	r3, #50	; 0x32
 80025e0:	4a08      	ldr	r2, [pc, #32]	; (8002604 <UART_SetConfig+0x4e4>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4422      	add	r2, r4
 80025f4:	609a      	str	r2, [r3, #8]
}
 80025f6:	bf00      	nop
 80025f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025fc:	46bd      	mov	sp, r7
 80025fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002602:	bf00      	nop
 8002604:	51eb851f 	.word	0x51eb851f

08002608 <__NVIC_SetPriority>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Handler+0x1c>)
 8002662:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002664:	f001 ff12 	bl	800448c <xTaskGetSchedulerState>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800266e:	f002 fcfb 	bl	8005068 <xPortSysTickHandler>
  }
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002680:	2100      	movs	r1, #0
 8002682:	f06f 0004 	mvn.w	r0, #4
 8002686:	f7ff ffbf 	bl	8002608 <__NVIC_SetPriority>
#endif
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002696:	f3ef 8305 	mrs	r3, IPSR
 800269a:	603b      	str	r3, [r7, #0]
  return(result);
 800269c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026a2:	f06f 0305 	mvn.w	r3, #5
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	e00c      	b.n	80026c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <osKernelInitialize+0x44>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <osKernelInitialize+0x44>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	e002      	b.n	80026c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000130 	.word	0x20000130

080026d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026de:	f3ef 8305 	mrs	r3, IPSR
 80026e2:	603b      	str	r3, [r7, #0]
  return(result);
 80026e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80026ea:	f06f 0305 	mvn.w	r3, #5
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	e010      	b.n	8002714 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <osKernelStart+0x48>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d109      	bne.n	800270e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80026fa:	f7ff ffbf 	bl	800267c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <osKernelStart+0x48>)
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002704:	f001 fa66 	bl	8003bd4 <vTaskStartScheduler>
      stat = osOK;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e002      	b.n	8002714 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000130 	.word	0x20000130

08002724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b08e      	sub	sp, #56	; 0x38
 8002728:	af04      	add	r7, sp, #16
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002734:	f3ef 8305 	mrs	r3, IPSR
 8002738:	617b      	str	r3, [r7, #20]
  return(result);
 800273a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800273c:	2b00      	cmp	r3, #0
 800273e:	d17e      	bne.n	800283e <osThreadNew+0x11a>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d07b      	beq.n	800283e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800274a:	2318      	movs	r3, #24
 800274c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d045      	beq.n	80027ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <osThreadNew+0x48>
        name = attr->name;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <osThreadNew+0x6e>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b38      	cmp	r3, #56	; 0x38
 8002784:	d805      	bhi.n	8002792 <osThreadNew+0x6e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <osThreadNew+0x72>
        return (NULL);
 8002792:	2300      	movs	r3, #0
 8002794:	e054      	b.n	8002840 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <osThreadNew+0xa8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2bbb      	cmp	r3, #187	; 0xbb
 80027b4:	d90a      	bls.n	80027cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <osThreadNew+0xa8>
        mem = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	e010      	b.n	80027ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <osThreadNew+0xca>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d108      	bne.n	80027ee <osThreadNew+0xca>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <osThreadNew+0xca>
          mem = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	e001      	b.n	80027ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d110      	bne.n	8002816 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027fc:	9202      	str	r2, [sp, #8]
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6a3a      	ldr	r2, [r7, #32]
 8002808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fff6 	bl	80037fc <xTaskCreateStatic>
 8002810:	4603      	mov	r3, r0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	e013      	b.n	800283e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d110      	bne.n	800283e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	b29a      	uxth	r2, r3
 8002820:	f107 0310 	add.w	r3, r7, #16
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f001 f841 	bl	80038b6 <xTaskCreate>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <osThreadNew+0x11a>
            hTask = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800283e:	693b      	ldr	r3, [r7, #16]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002850:	f3ef 8305 	mrs	r3, IPSR
 8002854:	60bb      	str	r3, [r7, #8]
  return(result);
 8002856:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <osDelay+0x1c>
    stat = osErrorISR;
 800285c:	f06f 0305 	mvn.w	r3, #5
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e007      	b.n	8002874 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <osDelay+0x2c>
      vTaskDelay(ticks);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f001 f97c 	bl	8003b6c <vTaskDelay>
    }
  }

  return (stat);
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800287e:	b580      	push	{r7, lr}
 8002880:	b08a      	sub	sp, #40	; 0x28
 8002882:	af02      	add	r7, sp, #8
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288e:	f3ef 8305 	mrs	r3, IPSR
 8002892:	613b      	str	r3, [r7, #16]
  return(result);
 8002894:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002896:	2b00      	cmp	r3, #0
 8002898:	d15f      	bne.n	800295a <osMessageQueueNew+0xdc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05c      	beq.n	800295a <osMessageQueueNew+0xdc>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d059      	beq.n	800295a <osMessageQueueNew+0xdc>
    mem = -1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d029      	beq.n	8002906 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <osMessageQueueNew+0x62>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b4f      	cmp	r3, #79	; 0x4f
 80028c0:	d90e      	bls.n	80028e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <osMessageQueueNew+0x62>
        mem = 1;
 80028da:	2301      	movs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e014      	b.n	800290a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d110      	bne.n	800290a <osMessageQueueNew+0x8c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10c      	bne.n	800290a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d108      	bne.n	800290a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <osMessageQueueNew+0x8c>
          mem = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	e001      	b.n	800290a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10b      	bne.n	8002928 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2100      	movs	r1, #0
 800291a:	9100      	str	r1, [sp, #0]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fa2e 	bl	8002d80 <xQueueGenericCreateStatic>
 8002924:	61f8      	str	r0, [r7, #28]
 8002926:	e008      	b.n	800293a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800292e:	2200      	movs	r2, #0
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fa9c 	bl	8002e70 <xQueueGenericCreate>
 8002938:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e001      	b.n	8002952 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002952:	6979      	ldr	r1, [r7, #20]
 8002954:	69f8      	ldr	r0, [r7, #28]
 8002956:	f000 fef3 	bl	8003740 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800295a:	69fb      	ldr	r3, [r7, #28]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800297c:	f3ef 8305 	mrs	r3, IPSR
 8002980:	617b      	str	r3, [r7, #20]
  return(result);
 8002982:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002984:	2b00      	cmp	r3, #0
 8002986:	d028      	beq.n	80029da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <osMessageQueuePut+0x36>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <osMessageQueuePut+0x36>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800299a:	f06f 0303 	mvn.w	r3, #3
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	e038      	b.n	8002a14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80029a6:	f107 0210 	add.w	r2, r7, #16
 80029aa:	2300      	movs	r3, #0
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	69b8      	ldr	r0, [r7, #24]
 80029b0:	f000 fbba 	bl	8003128 <xQueueGenericSendFromISR>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d003      	beq.n	80029c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80029ba:	f06f 0302 	mvn.w	r3, #2
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	e028      	b.n	8002a14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d025      	beq.n	8002a14 <osMessageQueuePut+0xb0>
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <osMessageQueuePut+0xbc>)
 80029ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	e01c      	b.n	8002a14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <osMessageQueuePut+0x82>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80029e6:	f06f 0303 	mvn.w	r3, #3
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	e012      	b.n	8002a14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80029ee:	2300      	movs	r3, #0
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	69b8      	ldr	r0, [r7, #24]
 80029f6:	f000 fa99 	bl	8002f2c <xQueueGenericSend>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d009      	beq.n	8002a14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002a06:	f06f 0301 	mvn.w	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	e002      	b.n	8002a14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002a0e:	f06f 0302 	mvn.w	r3, #2
 8002a12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002a14:	69fb      	ldr	r3, [r7, #28]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a3a:	f3ef 8305 	mrs	r3, IPSR
 8002a3e:	617b      	str	r3, [r7, #20]
  return(result);
 8002a40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <osMessageQueueGet+0x34>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <osMessageQueueGet+0x34>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002a58:	f06f 0303 	mvn.w	r3, #3
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e037      	b.n	8002ad0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	69b8      	ldr	r0, [r7, #24]
 8002a6e:	f000 fcd7 	bl	8003420 <xQueueReceiveFromISR>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d003      	beq.n	8002a80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002a78:	f06f 0302 	mvn.w	r3, #2
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e027      	b.n	8002ad0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <osMessageQueueGet+0xac>
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <osMessageQueueGet+0xb8>)
 8002a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	e01b      	b.n	8002ad0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <osMessageQueueGet+0x80>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002aa4:	f06f 0303 	mvn.w	r3, #3
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e011      	b.n	8002ad0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	69b8      	ldr	r0, [r7, #24]
 8002ab2:	f000 fbd5 	bl	8003260 <xQueueReceive>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d009      	beq.n	8002ad0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002ac2:	f06f 0301 	mvn.w	r3, #1
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	e002      	b.n	8002ad0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002aca:	f06f 0302 	mvn.w	r3, #2
 8002ace:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <vApplicationGetIdleTaskMemory+0x2c>)
 8002af0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <vApplicationGetIdleTaskMemory+0x30>)
 8002af6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000134 	.word	0x20000134
 8002b10:	200001f0 	.word	0x200001f0

08002b14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <vApplicationGetTimerTaskMemory+0x30>)
 8002b2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	200003f0 	.word	0x200003f0
 8002b44:	200004ac 	.word	0x200004ac

08002b48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f103 0208 	add.w	r2, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f103 0208 	add.w	r2, r3, #8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f103 0208 	add.w	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d103      	bne.n	8002c0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e00c      	b.n	8002c24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e002      	b.n	8002c18 <vListInsert+0x2e>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d2f6      	bcs.n	8002c12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6892      	ldr	r2, [r2, #8]
 8002c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6852      	ldr	r2, [r2, #4]
 8002c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d103      	bne.n	8002c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1e5a      	subs	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cda:	f002 f933 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	441a      	add	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22ff      	movs	r2, #255	; 0xff
 8002d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d114      	bne.n	8002d5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01a      	beq.n	8002d6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3310      	adds	r3, #16
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f9e3 	bl	8004108 <xTaskRemoveFromEventList>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <xQueueGenericReset+0xcc>)
 8002d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	e009      	b.n	8002d6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3310      	adds	r3, #16
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fef2 	bl	8002b48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3324      	adds	r3, #36	; 0x24
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff feed 	bl	8002b48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d6e:	f002 f919 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <xQueueGenericCreateStatic+0x52>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <xQueueGenericCreateStatic+0x56>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueGenericCreateStatic+0x58>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	623b      	str	r3, [r7, #32]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <xQueueGenericCreateStatic+0x7e>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <xQueueGenericCreateStatic+0x82>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueGenericCreateStatic+0x84>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	61fb      	str	r3, [r7, #28]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e1e:	2350      	movs	r3, #80	; 0x50
 8002e20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d00a      	beq.n	8002e3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	61bb      	str	r3, [r7, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f83f 	bl	8002ee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3730      	adds	r7, #48	; 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	613b      	str	r3, [r7, #16]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3350      	adds	r3, #80	; 0x50
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 f96d 	bl	8005188 <pvPortMalloc>
 8002eae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3350      	adds	r3, #80	; 0x50
 8002ebe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec8:	79fa      	ldrb	r2, [r7, #7]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f805 	bl	8002ee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002eda:	69bb      	ldr	r3, [r7, #24]
	}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e002      	b.n	8002f06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f12:	2101      	movs	r1, #1
 8002f14:	69b8      	ldr	r0, [r7, #24]
 8002f16:	f7ff fecb 	bl	8002cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSend+0x32>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueGenericSend+0x40>
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueGenericSend+0x44>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueGenericSend+0x46>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xQueueGenericSend+0x60>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSend+0x6e>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <xQueueGenericSend+0x72>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericSend+0x74>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSend+0x8e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fba:	f001 fa67 	bl	800448c <xTaskGetSchedulerState>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <xQueueGenericSend+0x9e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xQueueGenericSend+0xa2>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericSend+0xa4>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericSend+0xbe>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fb      	str	r3, [r7, #28]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fea:	f001 ffab 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <xQueueGenericSend+0xd4>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d129      	bne.n	8003054 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003006:	f000 fa8b 	bl	8003520 <prvCopyDataToQueue>
 800300a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f875 	bl	8004108 <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <xQueueGenericSend+0x1f8>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	e00a      	b.n	800304c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <xQueueGenericSend+0x1f8>)
 800303e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800304c:	f001 ffaa 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8003050:	2301      	movs	r3, #1
 8003052:	e063      	b.n	800311c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800305a:	f001 ffa3 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800305e:	2300      	movs	r3, #0
 8003060:	e05c      	b.n	800311c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4618      	mov	r0, r3
 800306e:	f001 f8af 	bl	80041d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003072:	2301      	movs	r3, #1
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003076:	f001 ff95 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800307a:	f000 fe1b 	bl	8003cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800307e:	f001 ff61 	bl	8004f44 <vPortEnterCritical>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003088:	b25b      	sxtb	r3, r3
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d103      	bne.n	8003098 <xQueueGenericSend+0x16c>
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800309e:	b25b      	sxtb	r3, r3
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d103      	bne.n	80030ae <xQueueGenericSend+0x182>
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ae:	f001 ff79 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030b2:	1d3a      	adds	r2, r7, #4
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f89e 	bl	80041fc <xTaskCheckForTimeOut>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d124      	bne.n	8003110 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c8:	f000 fb22 	bl	8003710 <prvIsQueueFull>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	3310      	adds	r3, #16
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 ffc4 	bl	8004068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e2:	f000 faad 	bl	8003640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030e6:	f000 fdf3 	bl	8003cd0 <xTaskResumeAll>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af7c 	bne.w	8002fea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <xQueueGenericSend+0x1f8>)
 80030f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	e772      	b.n	8002fea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003106:	f000 fa9b 	bl	8003640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800310a:	f000 fde1 	bl	8003cd0 <xTaskResumeAll>
 800310e:	e76c      	b.n	8002fea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003112:	f000 fa95 	bl	8003640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003116:	f000 fddb 	bl	8003cd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800311a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b090      	sub	sp, #64	; 0x40
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <xQueueGenericSendFromISR+0x3c>
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <xQueueGenericSendFromISR+0x40>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <xQueueGenericSendFromISR+0x42>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d103      	bne.n	8003192 <xQueueGenericSendFromISR+0x6a>
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <xQueueGenericSendFromISR+0x6e>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <xQueueGenericSendFromISR+0x70>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	623b      	str	r3, [r7, #32]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b2:	f001 ffa9 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031b6:	f3ef 8211 	mrs	r2, BASEPRI
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	61fa      	str	r2, [r7, #28]
 80031cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <xQueueGenericSendFromISR+0xbc>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d12f      	bne.n	8003244 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031fa:	f000 f991 	bl	8003520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d112      	bne.n	800322e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	3324      	adds	r3, #36	; 0x24
 8003214:	4618      	mov	r0, r3
 8003216:	f000 ff77 	bl	8004108 <xTaskRemoveFromEventList>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e007      	b.n	800323e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003232:	3301      	adds	r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	b25a      	sxtb	r2, r3
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800323e:	2301      	movs	r3, #1
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003242:	e001      	b.n	8003248 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003244:	2300      	movs	r3, #0
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003252:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003256:	4618      	mov	r0, r3
 8003258:	3740      	adds	r7, #64	; 0x40
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <xQueueReceive+0x30>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	623b      	str	r3, [r7, #32]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <xQueueReceive+0x3e>
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <xQueueReceive+0x42>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <xQueueReceive+0x44>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueReceive+0x5e>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	61fb      	str	r3, [r7, #28]
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032be:	f001 f8e5 	bl	800448c <xTaskGetSchedulerState>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <xQueueReceive+0x6e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <xQueueReceive+0x72>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueReceive+0x74>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xQueueReceive+0x8e>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	61bb      	str	r3, [r7, #24]
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ee:	f001 fe29 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01f      	beq.n	800333e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003302:	f000 f977 	bl	80035f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	3310      	adds	r3, #16
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fef4 	bl	8004108 <xTaskRemoveFromEventList>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <xQueueReceive+0x1bc>)
 8003328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003336:	f001 fe35 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 800333a:	2301      	movs	r3, #1
 800333c:	e069      	b.n	8003412 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003344:	f001 fe2e 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003348:	2300      	movs	r3, #0
 800334a:	e062      	b.n	8003412 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	4618      	mov	r0, r3
 8003358:	f000 ff3a 	bl	80041d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003360:	f001 fe20 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003364:	f000 fca6 	bl	8003cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003368:	f001 fdec 	bl	8004f44 <vPortEnterCritical>
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003372:	b25b      	sxtb	r3, r3
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d103      	bne.n	8003382 <xQueueReceive+0x122>
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003388:	b25b      	sxtb	r3, r3
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d103      	bne.n	8003398 <xQueueReceive+0x138>
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003398:	f001 fe04 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800339c:	1d3a      	adds	r2, r7, #4
 800339e:	f107 0310 	add.w	r3, r7, #16
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 ff29 	bl	80041fc <xTaskCheckForTimeOut>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d123      	bne.n	80033f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b2:	f000 f997 	bl	80036e4 <prvIsQueueEmpty>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fe4f 	bl	8004068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033cc:	f000 f938 	bl	8003640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033d0:	f000 fc7e 	bl	8003cd0 <xTaskResumeAll>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d189      	bne.n	80032ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <xQueueReceive+0x1bc>)
 80033dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	e780      	b.n	80032ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ee:	f000 f927 	bl	8003640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f2:	f000 fc6d 	bl	8003cd0 <xTaskResumeAll>
 80033f6:	e77a      	b.n	80032ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033fa:	f000 f921 	bl	8003640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033fe:	f000 fc67 	bl	8003cd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003404:	f000 f96e 	bl	80036e4 <prvIsQueueEmpty>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	f43f af6f 	beq.w	80032ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003412:	4618      	mov	r0, r3
 8003414:	3730      	adds	r7, #48	; 0x30
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000ed04 	.word	0xe000ed04

08003420 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08e      	sub	sp, #56	; 0x38
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	623b      	str	r3, [r7, #32]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <xQueueReceiveFromISR+0x3a>
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <xQueueReceiveFromISR+0x3e>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <xQueueReceiveFromISR+0x40>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61fb      	str	r3, [r7, #28]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800347a:	f001 fe45 	bl	8005108 <vPortValidateInterruptPriority>
	__asm volatile
 800347e:	f3ef 8211 	mrs	r2, BASEPRI
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	61ba      	str	r2, [r7, #24]
 8003494:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003496:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02f      	beq.n	8003506 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034b4:	f000 f89e 	bl	80035f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d112      	bne.n	80034f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	3310      	adds	r3, #16
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fe16 	bl	8004108 <xTaskRemoveFromEventList>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e007      	b.n	8003500 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80034f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f4:	3301      	adds	r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	b25a      	sxtb	r2, r3
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003500:	2301      	movs	r3, #1
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	e001      	b.n	800350a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003506:	2300      	movs	r3, #0
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f383 8811 	msr	BASEPRI, r3
}
 8003514:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003518:	4618      	mov	r0, r3
 800351a:	3738      	adds	r7, #56	; 0x38
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d14d      	bne.n	80035e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 ffbc 	bl	80044c8 <xTaskPriorityDisinherit>
 8003550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	e043      	b.n	80035e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d119      	bne.n	8003594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6858      	ldr	r0, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	461a      	mov	r2, r3
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	f002 f822 	bl	80055b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	441a      	add	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d32b      	bcc.n	80035e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e026      	b.n	80035e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68d8      	ldr	r0, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	461a      	mov	r2, r3
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	f002 f808 	bl	80055b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	425b      	negs	r3, r3
 80035ae:	441a      	add	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	425b      	negs	r3, r3
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d105      	bne.n	80035e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	3b01      	subs	r3, #1
 80035e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035ea:	697b      	ldr	r3, [r7, #20]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d018      	beq.n	8003638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	441a      	add	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d303      	bcc.n	8003628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68d9      	ldr	r1, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	461a      	mov	r2, r3
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f001 ffbe 	bl	80055b4 <memcpy>
	}
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003648:	f001 fc7c 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003654:	e011      	b.n	800367a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3324      	adds	r3, #36	; 0x24
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fd50 	bl	8004108 <xTaskRemoveFromEventList>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800366e:	f000 fe27 	bl	80042c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3b01      	subs	r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	dce9      	bgt.n	8003656 <prvUnlockQueue+0x16>
 8003682:	e000      	b.n	8003686 <prvUnlockQueue+0x46>
					break;
 8003684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800368e:	f001 fc89 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003692:	f001 fc57 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800369c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800369e:	e011      	b.n	80036c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fd2b 	bl	8004108 <xTaskRemoveFromEventList>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036b8:	f000 fe02 	bl	80042c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	3b01      	subs	r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dce9      	bgt.n	80036a0 <prvUnlockQueue+0x60>
 80036cc:	e000      	b.n	80036d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036d8:	f001 fc64 	bl	8004fa4 <vPortExitCritical>
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036ec:	f001 fc2a 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e001      	b.n	8003702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003702:	f001 fc4f 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003718:	f001 fc14 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	429a      	cmp	r2, r3
 8003726:	d102      	bne.n	800372e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e001      	b.n	8003732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003732:	f001 fc37 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e014      	b.n	800377a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <vQueueAddToRegistry+0x50>)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800375c:	490c      	ldr	r1, [pc, #48]	; (8003790 <vQueueAddToRegistry+0x50>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <vQueueAddToRegistry+0x50>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003772:	e006      	b.n	8003782 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b07      	cmp	r3, #7
 800377e:	d9e7      	bls.n	8003750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	200008ac 	.word	0x200008ac

08003794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037a4:	f001 fbce 	bl	8004f44 <vPortEnterCritical>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <vQueueWaitForMessageRestricted+0x2a>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d103      	bne.n	80037d4 <vQueueWaitForMessageRestricted+0x40>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d4:	f001 fbe6 	bl	8004fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fc61 	bl	80040b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7ff ff26 	bl	8003640 <prvUnlockQueue>
	}
 80037f4:	bf00      	nop
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08e      	sub	sp, #56	; 0x38
 8003800:	af04      	add	r7, sp, #16
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	623b      	str	r3, [r7, #32]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xTaskCreateStatic+0x46>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	61fb      	str	r3, [r7, #28]
}
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003842:	23bc      	movs	r3, #188	; 0xbc
 8003844:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2bbc      	cmp	r3, #188	; 0xbc
 800384a:	d00a      	beq.n	8003862 <xTaskCreateStatic+0x66>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61bb      	str	r3, [r7, #24]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003862:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01e      	beq.n	80038a8 <xTaskCreateStatic+0xac>
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003878:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	2202      	movs	r2, #2
 800387e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003882:	2300      	movs	r3, #0
 8003884:	9303      	str	r3, [sp, #12]
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	9302      	str	r3, [sp, #8]
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f850 	bl	8003940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a2:	f000 f8f3 	bl	8003a8c <prvAddNewTaskToReadyList>
 80038a6:	e001      	b.n	80038ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038ac:	697b      	ldr	r3, [r7, #20]
	}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3728      	adds	r7, #40	; 0x28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b08c      	sub	sp, #48	; 0x30
 80038ba:	af04      	add	r7, sp, #16
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fc5c 	bl	8005188 <pvPortMalloc>
 80038d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038d8:	20bc      	movs	r0, #188	; 0xbc
 80038da:	f001 fc55 	bl	8005188 <pvPortMalloc>
 80038de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
 80038ec:	e005      	b.n	80038fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f001 fd16 	bl	8005320 <vPortFree>
 80038f4:	e001      	b.n	80038fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	2300      	movs	r3, #0
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f80e 	bl	8003940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003924:	69f8      	ldr	r0, [r7, #28]
 8003926:	f000 f8b1 	bl	8003a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e002      	b.n	8003936 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003936:	69bb      	ldr	r3, [r7, #24]
	}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	461a      	mov	r2, r3
 8003958:	21a5      	movs	r1, #165	; 0xa5
 800395a:	f001 fe39 	bl	80055d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003968:	3b01      	subs	r3, #1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f023 0307 	bic.w	r3, r3, #7
 8003976:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	617b      	str	r3, [r7, #20]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01f      	beq.n	80039de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e012      	b.n	80039ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	7819      	ldrb	r1, [r3, #0]
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	3334      	adds	r3, #52	; 0x34
 80039b4:	460a      	mov	r2, r1
 80039b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d9e9      	bls.n	80039a4 <prvInitialiseNewTask+0x64>
 80039d0:	e000      	b.n	80039d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80039d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039dc:	e003      	b.n	80039e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2b37      	cmp	r3, #55	; 0x37
 80039ea:	d901      	bls.n	80039f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039ec:	2337      	movs	r3, #55	; 0x37
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	2200      	movs	r2, #0
 8003a00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f8be 	bl	8002b88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f8b9 	bl	8002b88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	3354      	adds	r3, #84	; 0x54
 8003a40:	2260      	movs	r2, #96	; 0x60
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fdc3 	bl	80055d0 <memset>
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <prvInitialiseNewTask+0x140>)
 8003a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <prvInitialiseNewTask+0x144>)
 8003a54:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <prvInitialiseNewTask+0x148>)
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	69b8      	ldr	r0, [r7, #24]
 8003a62:	f001 f941 	bl	8004ce8 <pxPortInitialiseStack>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	08006080 	.word	0x08006080
 8003a84:	080060a0 	.word	0x080060a0
 8003a88:	08006060 	.word	0x08006060

08003a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a94:	f001 fa56 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <prvAddNewTaskToReadyList+0xc4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <prvAddNewTaskToReadyList+0xc4>)
 8003aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <prvAddNewTaskToReadyList+0xc8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aaa:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <prvAddNewTaskToReadyList+0xc8>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <prvAddNewTaskToReadyList+0xc4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d110      	bne.n	8003ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ab8:	f000 fc26 	bl	8004308 <prvInitialiseTaskLists>
 8003abc:	e00d      	b.n	8003ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <prvAddNewTaskToReadyList+0xcc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <prvAddNewTaskToReadyList+0xc8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d802      	bhi.n	8003ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <prvAddNewTaskToReadyList+0xc8>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <prvAddNewTaskToReadyList+0xd0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <prvAddNewTaskToReadyList+0xd0>)
 8003ae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <prvAddNewTaskToReadyList+0xd0>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <prvAddNewTaskToReadyList+0xd4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d903      	bls.n	8003b00 <prvAddNewTaskToReadyList+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <prvAddNewTaskToReadyList+0xd4>)
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <prvAddNewTaskToReadyList+0xd8>)
 8003b0e:	441a      	add	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f7ff f843 	bl	8002ba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b1c:	f001 fa42 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b20:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <prvAddNewTaskToReadyList+0xcc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <prvAddNewTaskToReadyList+0xc8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d207      	bcs.n	8003b46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <prvAddNewTaskToReadyList+0xdc>)
 8003b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000dc0 	.word	0x20000dc0
 8003b54:	200008ec 	.word	0x200008ec
 8003b58:	20000dcc 	.word	0x20000dcc
 8003b5c:	20000ddc 	.word	0x20000ddc
 8003b60:	20000dc8 	.word	0x20000dc8
 8003b64:	200008f0 	.word	0x200008f0
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d017      	beq.n	8003bae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <vTaskDelay+0x60>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <vTaskDelay+0x30>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	60bb      	str	r3, [r7, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b9c:	f000 f88a 	bl	8003cb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fcfe 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ba8:	f000 f892 	bl	8003cd0 <xTaskResumeAll>
 8003bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <vTaskDelay+0x64>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000de8 	.word	0x20000de8
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003be2:	463a      	mov	r2, r7
 8003be4:	1d39      	adds	r1, r7, #4
 8003be6:	f107 0308 	add.w	r3, r7, #8
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe ff78 	bl	8002ae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bf0:	6839      	ldr	r1, [r7, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	9202      	str	r2, [sp, #8]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	460a      	mov	r2, r1
 8003c02:	4924      	ldr	r1, [pc, #144]	; (8003c94 <vTaskStartScheduler+0xc0>)
 8003c04:	4824      	ldr	r0, [pc, #144]	; (8003c98 <vTaskStartScheduler+0xc4>)
 8003c06:	f7ff fdf9 	bl	80037fc <xTaskCreateStatic>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <vTaskStartScheduler+0xc8>)
 8003c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c10:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <vTaskStartScheduler+0xc8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e001      	b.n	8003c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d102      	bne.n	8003c2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c28:	f000 fd10 	bl	800464c <xTimerCreateTimerTask>
 8003c2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d11b      	bne.n	8003c6c <vTaskStartScheduler+0x98>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	613b      	str	r3, [r7, #16]
}
 8003c46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <vTaskStartScheduler+0xcc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3354      	adds	r3, #84	; 0x54
 8003c4e:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <vTaskStartScheduler+0xd0>)
 8003c50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <vTaskStartScheduler+0xd4>)
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <vTaskStartScheduler+0xd8>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <vTaskStartScheduler+0xdc>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c66:	f001 f8cb 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c6a:	e00e      	b.n	8003c8a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d10a      	bne.n	8003c8a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <vTaskStartScheduler+0xb4>
}
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	08005fd0 	.word	0x08005fd0
 8003c98:	080042d9 	.word	0x080042d9
 8003c9c:	20000de4 	.word	0x20000de4
 8003ca0:	200008ec 	.word	0x200008ec
 8003ca4:	20000010 	.word	0x20000010
 8003ca8:	20000de0 	.word	0x20000de0
 8003cac:	20000dcc 	.word	0x20000dcc
 8003cb0:	20000dc4 	.word	0x20000dc4

08003cb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <vTaskSuspendAll+0x18>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <vTaskSuspendAll+0x18>)
 8003cc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000de8 	.word	0x20000de8

08003cd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cde:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <xTaskResumeAll+0x118>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <xTaskResumeAll+0x2c>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	603b      	str	r3, [r7, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cfc:	f001 f922 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d00:	4b39      	ldr	r3, [pc, #228]	; (8003de8 <xTaskResumeAll+0x118>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <xTaskResumeAll+0x118>)
 8003d08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <xTaskResumeAll+0x118>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d162      	bne.n	8003dd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <xTaskResumeAll+0x11c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d05e      	beq.n	8003dd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d1a:	e02f      	b.n	8003d7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1c:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <xTaskResumeAll+0x120>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3318      	adds	r3, #24
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe ff97 	bl	8002c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe ff92 	bl	8002c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <xTaskResumeAll+0x124>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d903      	bls.n	8003d4c <xTaskResumeAll+0x7c>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <xTaskResumeAll+0x124>)
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4a27      	ldr	r2, [pc, #156]	; (8003df8 <xTaskResumeAll+0x128>)
 8003d5a:	441a      	add	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7fe ff1d 	bl	8002ba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <xTaskResumeAll+0x12c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <xTaskResumeAll+0x130>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <xTaskResumeAll+0x120>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1cb      	bne.n	8003d1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d8a:	f000 fb5f 	bl	800444c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <xTaskResumeAll+0x134>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d9a:	f000 f847 	bl	8003e2c <xTaskIncrementTick>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <xTaskResumeAll+0x130>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f1      	bne.n	8003d9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <xTaskResumeAll+0x134>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <xTaskResumeAll+0x130>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <xTaskResumeAll+0x138>)
 8003dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dd8:	f001 f8e4 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000de8 	.word	0x20000de8
 8003dec:	20000dc0 	.word	0x20000dc0
 8003df0:	20000d80 	.word	0x20000d80
 8003df4:	20000dc8 	.word	0x20000dc8
 8003df8:	200008f0 	.word	0x200008f0
 8003dfc:	200008ec 	.word	0x200008ec
 8003e00:	20000dd4 	.word	0x20000dd4
 8003e04:	20000dd0 	.word	0x20000dd0
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <xTaskGetTickCount+0x1c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e18:	687b      	ldr	r3, [r7, #4]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000dc4 	.word	0x20000dc4

08003e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e36:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <xTaskIncrementTick+0x148>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 808f 	bne.w	8003f5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e40:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <xTaskIncrementTick+0x14c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e48:	4a4b      	ldr	r2, [pc, #300]	; (8003f78 <xTaskIncrementTick+0x14c>)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d120      	bne.n	8003e96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e54:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <xTaskIncrementTick+0x150>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	603b      	str	r3, [r7, #0]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <xTaskIncrementTick+0x46>
 8003e74:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <xTaskIncrementTick+0x150>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <xTaskIncrementTick+0x154>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <xTaskIncrementTick+0x150>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4a3f      	ldr	r2, [pc, #252]	; (8003f80 <xTaskIncrementTick+0x154>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <xTaskIncrementTick+0x158>)
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	f000 fadb 	bl	800444c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <xTaskIncrementTick+0x15c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d349      	bcc.n	8003f34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <xTaskIncrementTick+0x150>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eaa:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <xTaskIncrementTick+0x15c>)
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	601a      	str	r2, [r3, #0]
					break;
 8003eb2:	e03f      	b.n	8003f34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb4:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <xTaskIncrementTick+0x150>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d203      	bcs.n	8003ed4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <xTaskIncrementTick+0x15c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ed2:	e02f      	b.n	8003f34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe febf 	bl	8002c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3318      	adds	r3, #24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe feb6 	bl	8002c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <xTaskIncrementTick+0x160>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d903      	bls.n	8003f04 <xTaskIncrementTick+0xd8>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a22      	ldr	r2, [pc, #136]	; (8003f8c <xTaskIncrementTick+0x160>)
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <xTaskIncrementTick+0x164>)
 8003f12:	441a      	add	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fe fe41 	bl	8002ba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <xTaskIncrementTick+0x168>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3b8      	bcc.n	8003ea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f32:	e7b5      	b.n	8003ea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f34:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <xTaskIncrementTick+0x168>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4915      	ldr	r1, [pc, #84]	; (8003f90 <xTaskIncrementTick+0x164>)
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d901      	bls.n	8003f50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <xTaskIncrementTick+0x16c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e004      	b.n	8003f68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <xTaskIncrementTick+0x170>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <xTaskIncrementTick+0x170>)
 8003f66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f68:	697b      	ldr	r3, [r7, #20]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000de8 	.word	0x20000de8
 8003f78:	20000dc4 	.word	0x20000dc4
 8003f7c:	20000d78 	.word	0x20000d78
 8003f80:	20000d7c 	.word	0x20000d7c
 8003f84:	20000dd8 	.word	0x20000dd8
 8003f88:	20000de0 	.word	0x20000de0
 8003f8c:	20000dc8 	.word	0x20000dc8
 8003f90:	200008f0 	.word	0x200008f0
 8003f94:	200008ec 	.word	0x200008ec
 8003f98:	20000dd4 	.word	0x20000dd4
 8003f9c:	20000dd0 	.word	0x20000dd0

08003fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <vTaskSwitchContext+0xb0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <vTaskSwitchContext+0xb4>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fb4:	e046      	b.n	8004044 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <vTaskSwitchContext+0xb4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <vTaskSwitchContext+0xb8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e010      	b.n	8003fe6 <vTaskSwitchContext+0x46>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	607b      	str	r3, [r7, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <vTaskSwitchContext+0x3e>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	491d      	ldr	r1, [pc, #116]	; (800405c <vTaskSwitchContext+0xbc>)
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0e4      	beq.n	8003fc4 <vTaskSwitchContext+0x24>
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4a15      	ldr	r2, [pc, #84]	; (800405c <vTaskSwitchContext+0xbc>)
 8004006:	4413      	add	r3, r2
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3308      	adds	r3, #8
 800401c:	429a      	cmp	r2, r3
 800401e:	d104      	bne.n	800402a <vTaskSwitchContext+0x8a>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <vTaskSwitchContext+0xc0>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4a08      	ldr	r2, [pc, #32]	; (8004058 <vTaskSwitchContext+0xb8>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <vTaskSwitchContext+0xc0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3354      	adds	r3, #84	; 0x54
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <vTaskSwitchContext+0xc4>)
 8004042:	6013      	str	r3, [r2, #0]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000de8 	.word	0x20000de8
 8004054:	20000dd4 	.word	0x20000dd4
 8004058:	20000dc8 	.word	0x20000dc8
 800405c:	200008f0 	.word	0x200008f0
 8004060:	200008ec 	.word	0x200008ec
 8004064:	20000010 	.word	0x20000010

08004068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <vTaskPlaceOnEventList+0x44>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3318      	adds	r3, #24
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe fda7 	bl	8002bea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800409c:	2101      	movs	r1, #1
 800409e:	6838      	ldr	r0, [r7, #0]
 80040a0:	f000 fa80 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	200008ec 	.word	0x200008ec

080040b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	617b      	str	r3, [r7, #20]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <vTaskPlaceOnEventListRestricted+0x54>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3318      	adds	r3, #24
 80040de:	4619      	mov	r1, r3
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7fe fd5e 	bl	8002ba2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295
 80040f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68b8      	ldr	r0, [r7, #8]
 80040f6:	f000 fa55 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
	}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	200008ec 	.word	0x200008ec

08004108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3318      	adds	r3, #24
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fd8f 	bl	8002c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <xTaskRemoveFromEventList+0xb0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11d      	bne.n	8004182 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	3304      	adds	r3, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fd86 	bl	8002c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <xTaskRemoveFromEventList+0xb4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d903      	bls.n	8004164 <xTaskRemoveFromEventList+0x5c>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <xTaskRemoveFromEventList+0xb4>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <xTaskRemoveFromEventList+0xb8>)
 8004172:	441a      	add	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7fe fd11 	bl	8002ba2 <vListInsertEnd>
 8004180:	e005      	b.n	800418e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3318      	adds	r3, #24
 8004186:	4619      	mov	r1, r3
 8004188:	480e      	ldr	r0, [pc, #56]	; (80041c4 <xTaskRemoveFromEventList+0xbc>)
 800418a:	f7fe fd0a 	bl	8002ba2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <xTaskRemoveFromEventList+0xc0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	429a      	cmp	r2, r3
 800419a:	d905      	bls.n	80041a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <xTaskRemoveFromEventList+0xc4>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e001      	b.n	80041ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041ac:	697b      	ldr	r3, [r7, #20]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000de8 	.word	0x20000de8
 80041bc:	20000dc8 	.word	0x20000dc8
 80041c0:	200008f0 	.word	0x200008f0
 80041c4:	20000d80 	.word	0x20000d80
 80041c8:	200008ec 	.word	0x200008ec
 80041cc:	20000dd4 	.word	0x20000dd4

080041d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <vTaskInternalSetTimeOutState+0x24>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <vTaskInternalSetTimeOutState+0x28>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	605a      	str	r2, [r3, #4]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	20000dd8 	.word	0x20000dd8
 80041f8:	20000dc4 	.word	0x20000dc4

080041fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	613b      	str	r3, [r7, #16]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800423e:	f000 fe81 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <xTaskCheckForTimeOut+0xbc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d102      	bne.n	8004262 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e023      	b.n	80042aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <xTaskCheckForTimeOut+0xc0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d007      	beq.n	800427e <xTaskCheckForTimeOut+0x82>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e015      	b.n	80042aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d20b      	bcs.n	80042a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff9b 	bl	80041d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e004      	b.n	80042aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042aa:	f000 fe7b 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 80042ae:	69fb      	ldr	r3, [r7, #28]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20000dc4 	.word	0x20000dc4
 80042bc:	20000dd8 	.word	0x20000dd8

080042c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <vTaskMissedYield+0x14>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20000dd4 	.word	0x20000dd4

080042d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e0:	f000 f852 	bl	8004388 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <prvIdleTask+0x28>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d9f9      	bls.n	80042e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <prvIdleTask+0x2c>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042fc:	e7f0      	b.n	80042e0 <prvIdleTask+0x8>
 80042fe:	bf00      	nop
 8004300:	200008f0 	.word	0x200008f0
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	e00c      	b.n	800432e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <prvInitialiseTaskLists+0x60>)
 8004320:	4413      	add	r3, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fc10 	bl	8002b48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3301      	adds	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b37      	cmp	r3, #55	; 0x37
 8004332:	d9ef      	bls.n	8004314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <prvInitialiseTaskLists+0x64>)
 8004336:	f7fe fc07 	bl	8002b48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800433a:	480d      	ldr	r0, [pc, #52]	; (8004370 <prvInitialiseTaskLists+0x68>)
 800433c:	f7fe fc04 	bl	8002b48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004340:	480c      	ldr	r0, [pc, #48]	; (8004374 <prvInitialiseTaskLists+0x6c>)
 8004342:	f7fe fc01 	bl	8002b48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004346:	480c      	ldr	r0, [pc, #48]	; (8004378 <prvInitialiseTaskLists+0x70>)
 8004348:	f7fe fbfe 	bl	8002b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800434c:	480b      	ldr	r0, [pc, #44]	; (800437c <prvInitialiseTaskLists+0x74>)
 800434e:	f7fe fbfb 	bl	8002b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <prvInitialiseTaskLists+0x78>)
 8004354:	4a05      	ldr	r2, [pc, #20]	; (800436c <prvInitialiseTaskLists+0x64>)
 8004356:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <prvInitialiseTaskLists+0x7c>)
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <prvInitialiseTaskLists+0x68>)
 800435c:	601a      	str	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200008f0 	.word	0x200008f0
 800436c:	20000d50 	.word	0x20000d50
 8004370:	20000d64 	.word	0x20000d64
 8004374:	20000d80 	.word	0x20000d80
 8004378:	20000d94 	.word	0x20000d94
 800437c:	20000dac 	.word	0x20000dac
 8004380:	20000d78 	.word	0x20000d78
 8004384:	20000d7c 	.word	0x20000d7c

08004388 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438e:	e019      	b.n	80043c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004390:	f000 fdd8 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <prvCheckTasksWaitingTermination+0x50>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fc5b 	bl	8002c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvCheckTasksWaitingTermination+0x58>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <prvCheckTasksWaitingTermination+0x58>)
 80043b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043ba:	f000 fdf3 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f810 	bl	80043e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvCheckTasksWaitingTermination+0x58>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e1      	bne.n	8004390 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000d94 	.word	0x20000d94
 80043dc:	20000dc0 	.word	0x20000dc0
 80043e0:	20000da8 	.word	0x20000da8

080043e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3354      	adds	r3, #84	; 0x54
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 f997 	bl	8005724 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	4618      	mov	r0, r3
 8004406:	f000 ff8b 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 ff88 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004410:	e018      	b.n	8004444 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004418:	2b01      	cmp	r3, #1
 800441a:	d103      	bne.n	8004424 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 ff7f 	bl	8005320 <vPortFree>
	}
 8004422:	e00f      	b.n	8004444 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800442a:	2b02      	cmp	r3, #2
 800442c:	d00a      	beq.n	8004444 <prvDeleteTCB+0x60>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	60fb      	str	r3, [r7, #12]
}
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <prvDeleteTCB+0x5e>
	}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 800445e:	f04f 32ff 	mov.w	r2, #4294967295
 8004462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004464:	e008      	b.n	8004478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20000d78 	.word	0x20000d78
 8004488:	20000de0 	.word	0x20000de0

0800448c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <xTaskGetSchedulerState+0x34>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449a:	2301      	movs	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	e008      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <xTaskGetSchedulerState+0x38>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044a8:	2302      	movs	r3, #2
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e001      	b.n	80044b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b2:	687b      	ldr	r3, [r7, #4]
	}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000dcc 	.word	0x20000dcc
 80044c4:	20000de8 	.word	0x20000de8

080044c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d056      	beq.n	800458c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044de:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <xTaskPriorityDisinherit+0xd0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d00a      	beq.n	80044fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	429a      	cmp	r2, r3
 8004530:	d02c      	beq.n	800458c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d128      	bne.n	800458c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fb8c 	bl	8002c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <xTaskPriorityDisinherit+0xd4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <xTaskPriorityDisinherit+0xa4>
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <xTaskPriorityDisinherit+0xd4>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <xTaskPriorityDisinherit+0xd8>)
 800457a:	441a      	add	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fb0d 	bl	8002ba2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458c:	697b      	ldr	r3, [r7, #20]
	}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200008ec 	.word	0x200008ec
 800459c:	20000dc8 	.word	0x20000dc8
 80045a0:	200008f0 	.word	0x200008f0

080045a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <prvAddCurrentTaskToDelayedList+0x90>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fb4e 	bl	8002c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d10a      	bne.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4819      	ldr	r0, [pc, #100]	; (800463c <prvAddCurrentTaskToDelayedList+0x98>)
 80045d8:	f7fe fae3 	bl	8002ba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045dc:	e026      	b.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d209      	bcs.n	800460a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fe faf1 	bl	8002bea <vListInsert>
}
 8004608:	e010      	b.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <prvAddCurrentTaskToDelayedList+0xa0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7fe fae7 	bl	8002bea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d202      	bcs.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000dc4 	.word	0x20000dc4
 8004638:	200008ec 	.word	0x200008ec
 800463c:	20000dac 	.word	0x20000dac
 8004640:	20000d7c 	.word	0x20000d7c
 8004644:	20000d78 	.word	0x20000d78
 8004648:	20000de0 	.word	0x20000de0

0800464c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004656:	f000 fb07 	bl	8004c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <xTimerCreateTimerTask+0x80>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800466a:	1d3a      	adds	r2, r7, #4
 800466c:	f107 0108 	add.w	r1, r7, #8
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fa4d 	bl	8002b14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	9202      	str	r2, [sp, #8]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	2302      	movs	r3, #2
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	460a      	mov	r2, r1
 800468c:	4910      	ldr	r1, [pc, #64]	; (80046d0 <xTimerCreateTimerTask+0x84>)
 800468e:	4811      	ldr	r0, [pc, #68]	; (80046d4 <xTimerCreateTimerTask+0x88>)
 8004690:	f7ff f8b4 	bl	80037fc <xTaskCreateStatic>
 8004694:	4603      	mov	r3, r0
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <xTimerCreateTimerTask+0x8c>)
 8004698:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <xTimerCreateTimerTask+0x8c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046a2:	2301      	movs	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	613b      	str	r3, [r7, #16]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046c2:	697b      	ldr	r3, [r7, #20]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000e1c 	.word	0x20000e1c
 80046d0:	08005fd8 	.word	0x08005fd8
 80046d4:	08004811 	.word	0x08004811
 80046d8:	20000e20 	.word	0x20000e20

080046dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xTimerGenericCommand+0x2e>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <xTimerGenericCommand+0x98>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02a      	beq.n	8004768 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	dc18      	bgt.n	8004756 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004724:	f7ff feb2 	bl	800448c <xTaskGetSchedulerState>
 8004728:	4603      	mov	r3, r0
 800472a:	2b02      	cmp	r3, #2
 800472c:	d109      	bne.n	8004742 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <xTimerGenericCommand+0x98>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f107 0110 	add.w	r1, r7, #16
 8004736:	2300      	movs	r3, #0
 8004738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473a:	f7fe fbf7 	bl	8002f2c <xQueueGenericSend>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24
 8004740:	e012      	b.n	8004768 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <xTimerGenericCommand+0x98>)
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	f107 0110 	add.w	r1, r7, #16
 800474a:	2300      	movs	r3, #0
 800474c:	2200      	movs	r2, #0
 800474e:	f7fe fbed 	bl	8002f2c <xQueueGenericSend>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24
 8004754:	e008      	b.n	8004768 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <xTimerGenericCommand+0x98>)
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f107 0110 	add.w	r1, r7, #16
 800475e:	2300      	movs	r3, #0
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	f7fe fce1 	bl	8003128 <xQueueGenericSendFromISR>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000e1c 	.word	0x20000e1c

08004778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <prvProcessExpiredTimer+0x94>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fa63 	bl	8002c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d022      	beq.n	80047ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	18d1      	adds	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	f000 f8d1 	bl	8004958 <prvInsertTimerInActiveList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047bc:	2300      	movs	r3, #0
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	2100      	movs	r1, #0
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff ff88 	bl	80046dc <xTimerGenericCommand>
 80047cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d113      	bne.n	80047fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	4798      	blx	r3
}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000e14 	.word	0x20000e14

08004810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f857 	bl	80048d0 <prvGetNextExpireTime>
 8004822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4619      	mov	r1, r3
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f803 	bl	8004834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800482e:	f000 f8d5 	bl	80049dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004832:	e7f1      	b.n	8004818 <prvTimerTask+0x8>

08004834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800483e:	f7ff fa39 	bl	8003cb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f866 	bl	8004918 <prvSampleTimeNow>
 800484c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d130      	bne.n	80048b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <prvProcessTimerOrBlockTask+0x3c>
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d806      	bhi.n	8004870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004862:	f7ff fa35 	bl	8003cd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ff85 	bl	8004778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800486e:	e024      	b.n	80048ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <prvProcessTimerOrBlockTask+0x90>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <prvProcessTimerOrBlockTask+0x50>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <prvProcessTimerOrBlockTask+0x52>
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <prvProcessTimerOrBlockTask+0x94>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	f7fe ff7d 	bl	8003794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800489a:	f7ff fa19 	bl	8003cd0 <xTaskResumeAll>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <prvProcessTimerOrBlockTask+0x98>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
}
 80048b4:	e001      	b.n	80048ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048b6:	f7ff fa0b 	bl	8003cd0 <xTaskResumeAll>
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000e18 	.word	0x20000e18
 80048c8:	20000e1c 	.word	0x20000e1c
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <prvGetNextExpireTime+0x44>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <prvGetNextExpireTime+0x16>
 80048e2:	2201      	movs	r2, #1
 80048e4:	e000      	b.n	80048e8 <prvGetNextExpireTime+0x18>
 80048e6:	2200      	movs	r2, #0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <prvGetNextExpireTime+0x44>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e001      	b.n	8004904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000e14 	.word	0x20000e14

08004918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004920:	f7ff fa74 	bl	8003e0c <xTaskGetTickCount>
 8004924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <prvSampleTimeNow+0x3c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d205      	bcs.n	800493c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004930:	f000 f936 	bl	8004ba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e002      	b.n	8004942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004942:	4a04      	ldr	r2, [pc, #16]	; (8004954 <prvSampleTimeNow+0x3c>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000e24 	.word	0x20000e24

08004958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d812      	bhi.n	80049a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	429a      	cmp	r2, r3
 800498a:	d302      	bcc.n	8004992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e01b      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <prvInsertTimerInActiveList+0x7c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe f924 	bl	8002bea <vListInsert>
 80049a2:	e012      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d206      	bcs.n	80049ba <prvInsertTimerInActiveList+0x62>
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e007      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvInsertTimerInActiveList+0x80>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe f910 	bl	8002bea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ca:	697b      	ldr	r3, [r7, #20]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000e18 	.word	0x20000e18
 80049d8:	20000e14 	.word	0x20000e14

080049dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	; 0x38
 80049e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e2:	e0ca      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da18      	bge.n	8004a1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	3304      	adds	r3, #4
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	61fb      	str	r3, [r7, #28]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	6850      	ldr	r0, [r2, #4]
 8004a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f2c0 80aa 	blt.w	8004b78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe f911 	bl	8002c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff6b 	bl	8004918 <prvSampleTimeNow>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	f200 8097 	bhi.w	8004b7a <prvProcessReceivedCommands+0x19e>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <prvProcessReceivedCommands+0x78>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a7d 	.word	0x08004a7d
 8004a60:	08004af1 	.word	0x08004af1
 8004a64:	08004b05 	.word	0x08004b05
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a7d 	.word	0x08004a7d
 8004a74:	08004af1 	.word	0x08004af1
 8004a78:	08004b05 	.word	0x08004b05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	18d1      	adds	r1, r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9c:	f7ff ff5c 	bl	8004958 <prvInsertTimerInActiveList>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d069      	beq.n	8004b7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d05e      	beq.n	8004b7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	441a      	add	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ace:	f7ff fe05 	bl	80046dc <xTimerGenericCommand>
 8004ad2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d14f      	bne.n	8004b7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61bb      	str	r3, [r7, #24]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b02:	e03a      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	617b      	str	r3, [r7, #20]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	18d1      	adds	r1, r2, r3
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b48:	f7ff ff06 	bl	8004958 <prvInsertTimerInActiveList>
					break;
 8004b4c:	e015      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5e:	f000 fbdf 	bl	8005320 <vPortFree>
 8004b62:	e00a      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b76:	e000      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <prvProcessReceivedCommands+0x1c0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1d39      	adds	r1, r7, #4
 8004b80:	2200      	movs	r2, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fb6c 	bl	8003260 <xQueueReceive>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f47f af2a 	bne.w	80049e4 <prvProcessReceivedCommands+0x8>
	}
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000e1c 	.word	0x20000e1c

08004ba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ba6:	e048      	b.n	8004c3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe f84b 	bl	8002c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02e      	beq.n	8004c3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90e      	bls.n	8004c0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bfa:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f7fd fff0 	bl	8002bea <vListInsert>
 8004c0a:	e016      	b.n	8004c3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2300      	movs	r3, #0
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	2100      	movs	r1, #0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff fd60 	bl	80046dc <xTimerGenericCommand>
 8004c1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	603b      	str	r3, [r7, #0]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1b1      	bne.n	8004ba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvSwitchTimerLists+0xc4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <prvSwitchTimerLists+0xc4>)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000e14 	.word	0x20000e14
 8004c64:	20000e18 	.word	0x20000e18

08004c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c6e:	f000 f969 	bl	8004f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d120      	bne.n	8004cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c7a:	4814      	ldr	r0, [pc, #80]	; (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c7c:	f7fd ff64 	bl	8002b48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c80:	4813      	ldr	r0, [pc, #76]	; (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004c82:	f7fd ff61 	bl	8002b48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <prvCheckForValidListAndQueue+0x6c>)
 8004c88:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvCheckForValidListAndQueue+0x70>)
 8004c8e:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <prvCheckForValidListAndQueue+0x74>)
 8004c98:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <prvCheckForValidListAndQueue+0x78>)
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f7fe f86f 	bl	8002d80 <xQueueGenericCreateStatic>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004ca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	490b      	ldr	r1, [pc, #44]	; (8004ce4 <prvCheckForValidListAndQueue+0x7c>)
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fd42 	bl	8003740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cbc:	f000 f972 	bl	8004fa4 <vPortExitCritical>
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000e1c 	.word	0x20000e1c
 8004ccc:	20000dec 	.word	0x20000dec
 8004cd0:	20000e00 	.word	0x20000e00
 8004cd4:	20000e14 	.word	0x20000e14
 8004cd8:	20000e18 	.word	0x20000e18
 8004cdc:	20000ec8 	.word	0x20000ec8
 8004ce0:	20000e28 	.word	0x20000e28
 8004ce4:	08005fe0 	.word	0x08005fe0

08004ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b04      	subs	r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b04      	subs	r3, #4
 8004d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <pxPortInitialiseStack+0x64>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b14      	subs	r3, #20
 8004d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f06f 0202 	mvn.w	r2, #2
 8004d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3b20      	subs	r3, #32
 8004d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	08004d51 	.word	0x08004d51

08004d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <prvTaskExitError+0x54>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d00a      	beq.n	8004d7a <prvTaskExitError+0x2a>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <prvTaskExitError+0x28>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60bb      	str	r3, [r7, #8]
}
 8004d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d8e:	bf00      	nop
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0fc      	beq.n	8004d90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	2000000c 	.word	0x2000000c
	...

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7ff f848 	bl	8003fa0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff1e 	bl	8004d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	20000f18 	.word	0x20000f18
 8004f34:	20000f1c 	.word	0x20000f1c
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe ffb6 	bl	8003fa0 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fed3 	bl	8003e2c <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <xPortSysTickHandler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	20000f18 	.word	0x20000f18
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20000f1c 	.word	0x20000f1c

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7fe fd8e 	bl	8003cb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe fcfa 	bl	8003cd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20004b28 	.word	0x20004b28
 800530c:	20004b3c 	.word	0x20004b3c
 8005310:	20004b2c 	.word	0x20004b2c
 8005314:	20004b20 	.word	0x20004b20
 8005318:	20004b30 	.word	0x20004b30
 800531c:	20004b34 	.word	0x20004b34

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fc84 	bl	8003cb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe fc81 	bl	8003cd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20004b3c 	.word	0x20004b3c
 80053dc:	20004b2c 	.word	0x20004b2c
 80053e0:	20004b38 	.word	0x20004b38

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000f20 	.word	0x20000f20
 8005494:	20004b20 	.word	0x20004b20
 8005498:	20004b28 	.word	0x20004b28
 800549c:	20004b30 	.word	0x20004b30
 80054a0:	20004b2c 	.word	0x20004b2c
 80054a4:	20004b3c 	.word	0x20004b3c

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20004b20 	.word	0x20004b20
 8005558:	20004b28 	.word	0x20004b28

0800555c <__errno>:
 800555c:	4b01      	ldr	r3, [pc, #4]	; (8005564 <__errno+0x8>)
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000010 	.word	0x20000010

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4d0d      	ldr	r5, [pc, #52]	; (80055a0 <__libc_init_array+0x38>)
 800556c:	4c0d      	ldr	r4, [pc, #52]	; (80055a4 <__libc_init_array+0x3c>)
 800556e:	1b64      	subs	r4, r4, r5
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	2600      	movs	r6, #0
 8005574:	42a6      	cmp	r6, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	4d0b      	ldr	r5, [pc, #44]	; (80055a8 <__libc_init_array+0x40>)
 800557a:	4c0c      	ldr	r4, [pc, #48]	; (80055ac <__libc_init_array+0x44>)
 800557c:	f000 fd0c 	bl	8005f98 <_init>
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	2600      	movs	r6, #0
 8005586:	42a6      	cmp	r6, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005590:	4798      	blx	r3
 8005592:	3601      	adds	r6, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	f855 3b04 	ldr.w	r3, [r5], #4
 800559a:	4798      	blx	r3
 800559c:	3601      	adds	r6, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	080060fc 	.word	0x080060fc
 80055a4:	080060fc 	.word	0x080060fc
 80055a8:	080060fc 	.word	0x080060fc
 80055ac:	08006100 	.word	0x08006100

080055b0 <__retarget_lock_acquire_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <__retarget_lock_release_recursive>:
 80055b2:	4770      	bx	lr

080055b4 <memcpy>:
 80055b4:	440a      	add	r2, r1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055bc:	d100      	bne.n	80055c0 <memcpy+0xc>
 80055be:	4770      	bx	lr
 80055c0:	b510      	push	{r4, lr}
 80055c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ca:	4291      	cmp	r1, r2
 80055cc:	d1f9      	bne.n	80055c2 <memcpy+0xe>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <memset>:
 80055d0:	4402      	add	r2, r0
 80055d2:	4603      	mov	r3, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <sbrk_aligned>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4e0e      	ldr	r6, [pc, #56]	; (800561c <sbrk_aligned+0x3c>)
 80055e4:	460c      	mov	r4, r1
 80055e6:	6831      	ldr	r1, [r6, #0]
 80055e8:	4605      	mov	r5, r0
 80055ea:	b911      	cbnz	r1, 80055f2 <sbrk_aligned+0x12>
 80055ec:	f000 f8f6 	bl	80057dc <_sbrk_r>
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	4621      	mov	r1, r4
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 f8f1 	bl	80057dc <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d00a      	beq.n	8005614 <sbrk_aligned+0x34>
 80055fe:	1cc4      	adds	r4, r0, #3
 8005600:	f024 0403 	bic.w	r4, r4, #3
 8005604:	42a0      	cmp	r0, r4
 8005606:	d007      	beq.n	8005618 <sbrk_aligned+0x38>
 8005608:	1a21      	subs	r1, r4, r0
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f8e6 	bl	80057dc <_sbrk_r>
 8005610:	3001      	adds	r0, #1
 8005612:	d101      	bne.n	8005618 <sbrk_aligned+0x38>
 8005614:	f04f 34ff 	mov.w	r4, #4294967295
 8005618:	4620      	mov	r0, r4
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	20004b48 	.word	0x20004b48

08005620 <_malloc_r>:
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	1ccd      	adds	r5, r1, #3
 8005626:	f025 0503 	bic.w	r5, r5, #3
 800562a:	3508      	adds	r5, #8
 800562c:	2d0c      	cmp	r5, #12
 800562e:	bf38      	it	cc
 8005630:	250c      	movcc	r5, #12
 8005632:	2d00      	cmp	r5, #0
 8005634:	4607      	mov	r7, r0
 8005636:	db01      	blt.n	800563c <_malloc_r+0x1c>
 8005638:	42a9      	cmp	r1, r5
 800563a:	d905      	bls.n	8005648 <_malloc_r+0x28>
 800563c:	230c      	movs	r3, #12
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	2600      	movs	r6, #0
 8005642:	4630      	mov	r0, r6
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	4e2e      	ldr	r6, [pc, #184]	; (8005704 <_malloc_r+0xe4>)
 800564a:	f000 f90b 	bl	8005864 <__malloc_lock>
 800564e:	6833      	ldr	r3, [r6, #0]
 8005650:	461c      	mov	r4, r3
 8005652:	bb34      	cbnz	r4, 80056a2 <_malloc_r+0x82>
 8005654:	4629      	mov	r1, r5
 8005656:	4638      	mov	r0, r7
 8005658:	f7ff ffc2 	bl	80055e0 <sbrk_aligned>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	4604      	mov	r4, r0
 8005660:	d14d      	bne.n	80056fe <_malloc_r+0xde>
 8005662:	6834      	ldr	r4, [r6, #0]
 8005664:	4626      	mov	r6, r4
 8005666:	2e00      	cmp	r6, #0
 8005668:	d140      	bne.n	80056ec <_malloc_r+0xcc>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	4631      	mov	r1, r6
 800566e:	4638      	mov	r0, r7
 8005670:	eb04 0803 	add.w	r8, r4, r3
 8005674:	f000 f8b2 	bl	80057dc <_sbrk_r>
 8005678:	4580      	cmp	r8, r0
 800567a:	d13a      	bne.n	80056f2 <_malloc_r+0xd2>
 800567c:	6821      	ldr	r1, [r4, #0]
 800567e:	3503      	adds	r5, #3
 8005680:	1a6d      	subs	r5, r5, r1
 8005682:	f025 0503 	bic.w	r5, r5, #3
 8005686:	3508      	adds	r5, #8
 8005688:	2d0c      	cmp	r5, #12
 800568a:	bf38      	it	cc
 800568c:	250c      	movcc	r5, #12
 800568e:	4629      	mov	r1, r5
 8005690:	4638      	mov	r0, r7
 8005692:	f7ff ffa5 	bl	80055e0 <sbrk_aligned>
 8005696:	3001      	adds	r0, #1
 8005698:	d02b      	beq.n	80056f2 <_malloc_r+0xd2>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	442b      	add	r3, r5
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	e00e      	b.n	80056c0 <_malloc_r+0xa0>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	1b52      	subs	r2, r2, r5
 80056a6:	d41e      	bmi.n	80056e6 <_malloc_r+0xc6>
 80056a8:	2a0b      	cmp	r2, #11
 80056aa:	d916      	bls.n	80056da <_malloc_r+0xba>
 80056ac:	1961      	adds	r1, r4, r5
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	6025      	str	r5, [r4, #0]
 80056b2:	bf18      	it	ne
 80056b4:	6059      	strne	r1, [r3, #4]
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	bf08      	it	eq
 80056ba:	6031      	streq	r1, [r6, #0]
 80056bc:	5162      	str	r2, [r4, r5]
 80056be:	604b      	str	r3, [r1, #4]
 80056c0:	4638      	mov	r0, r7
 80056c2:	f104 060b 	add.w	r6, r4, #11
 80056c6:	f000 f8d3 	bl	8005870 <__malloc_unlock>
 80056ca:	f026 0607 	bic.w	r6, r6, #7
 80056ce:	1d23      	adds	r3, r4, #4
 80056d0:	1af2      	subs	r2, r6, r3
 80056d2:	d0b6      	beq.n	8005642 <_malloc_r+0x22>
 80056d4:	1b9b      	subs	r3, r3, r6
 80056d6:	50a3      	str	r3, [r4, r2]
 80056d8:	e7b3      	b.n	8005642 <_malloc_r+0x22>
 80056da:	6862      	ldr	r2, [r4, #4]
 80056dc:	42a3      	cmp	r3, r4
 80056de:	bf0c      	ite	eq
 80056e0:	6032      	streq	r2, [r6, #0]
 80056e2:	605a      	strne	r2, [r3, #4]
 80056e4:	e7ec      	b.n	80056c0 <_malloc_r+0xa0>
 80056e6:	4623      	mov	r3, r4
 80056e8:	6864      	ldr	r4, [r4, #4]
 80056ea:	e7b2      	b.n	8005652 <_malloc_r+0x32>
 80056ec:	4634      	mov	r4, r6
 80056ee:	6876      	ldr	r6, [r6, #4]
 80056f0:	e7b9      	b.n	8005666 <_malloc_r+0x46>
 80056f2:	230c      	movs	r3, #12
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4638      	mov	r0, r7
 80056f8:	f000 f8ba 	bl	8005870 <__malloc_unlock>
 80056fc:	e7a1      	b.n	8005642 <_malloc_r+0x22>
 80056fe:	6025      	str	r5, [r4, #0]
 8005700:	e7de      	b.n	80056c0 <_malloc_r+0xa0>
 8005702:	bf00      	nop
 8005704:	20004b44 	.word	0x20004b44

08005708 <cleanup_glue>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	460c      	mov	r4, r1
 800570c:	6809      	ldr	r1, [r1, #0]
 800570e:	4605      	mov	r5, r0
 8005710:	b109      	cbz	r1, 8005716 <cleanup_glue+0xe>
 8005712:	f7ff fff9 	bl	8005708 <cleanup_glue>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571e:	f000 b8ad 	b.w	800587c <_free_r>
	...

08005724 <_reclaim_reent>:
 8005724:	4b2c      	ldr	r3, [pc, #176]	; (80057d8 <_reclaim_reent+0xb4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4283      	cmp	r3, r0
 800572a:	b570      	push	{r4, r5, r6, lr}
 800572c:	4604      	mov	r4, r0
 800572e:	d051      	beq.n	80057d4 <_reclaim_reent+0xb0>
 8005730:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005732:	b143      	cbz	r3, 8005746 <_reclaim_reent+0x22>
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d14a      	bne.n	80057d0 <_reclaim_reent+0xac>
 800573a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	b111      	cbz	r1, 8005746 <_reclaim_reent+0x22>
 8005740:	4620      	mov	r0, r4
 8005742:	f000 f89b 	bl	800587c <_free_r>
 8005746:	6961      	ldr	r1, [r4, #20]
 8005748:	b111      	cbz	r1, 8005750 <_reclaim_reent+0x2c>
 800574a:	4620      	mov	r0, r4
 800574c:	f000 f896 	bl	800587c <_free_r>
 8005750:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005752:	b111      	cbz	r1, 800575a <_reclaim_reent+0x36>
 8005754:	4620      	mov	r0, r4
 8005756:	f000 f891 	bl	800587c <_free_r>
 800575a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800575c:	b111      	cbz	r1, 8005764 <_reclaim_reent+0x40>
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f88c 	bl	800587c <_free_r>
 8005764:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005766:	b111      	cbz	r1, 800576e <_reclaim_reent+0x4a>
 8005768:	4620      	mov	r0, r4
 800576a:	f000 f887 	bl	800587c <_free_r>
 800576e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005770:	b111      	cbz	r1, 8005778 <_reclaim_reent+0x54>
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f882 	bl	800587c <_free_r>
 8005778:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800577a:	b111      	cbz	r1, 8005782 <_reclaim_reent+0x5e>
 800577c:	4620      	mov	r0, r4
 800577e:	f000 f87d 	bl	800587c <_free_r>
 8005782:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005784:	b111      	cbz	r1, 800578c <_reclaim_reent+0x68>
 8005786:	4620      	mov	r0, r4
 8005788:	f000 f878 	bl	800587c <_free_r>
 800578c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800578e:	b111      	cbz	r1, 8005796 <_reclaim_reent+0x72>
 8005790:	4620      	mov	r0, r4
 8005792:	f000 f873 	bl	800587c <_free_r>
 8005796:	69a3      	ldr	r3, [r4, #24]
 8005798:	b1e3      	cbz	r3, 80057d4 <_reclaim_reent+0xb0>
 800579a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800579c:	4620      	mov	r0, r4
 800579e:	4798      	blx	r3
 80057a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057a2:	b1b9      	cbz	r1, 80057d4 <_reclaim_reent+0xb0>
 80057a4:	4620      	mov	r0, r4
 80057a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057aa:	f7ff bfad 	b.w	8005708 <cleanup_glue>
 80057ae:	5949      	ldr	r1, [r1, r5]
 80057b0:	b941      	cbnz	r1, 80057c4 <_reclaim_reent+0xa0>
 80057b2:	3504      	adds	r5, #4
 80057b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b6:	2d80      	cmp	r5, #128	; 0x80
 80057b8:	68d9      	ldr	r1, [r3, #12]
 80057ba:	d1f8      	bne.n	80057ae <_reclaim_reent+0x8a>
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 f85d 	bl	800587c <_free_r>
 80057c2:	e7ba      	b.n	800573a <_reclaim_reent+0x16>
 80057c4:	680e      	ldr	r6, [r1, #0]
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 f858 	bl	800587c <_free_r>
 80057cc:	4631      	mov	r1, r6
 80057ce:	e7ef      	b.n	80057b0 <_reclaim_reent+0x8c>
 80057d0:	2500      	movs	r5, #0
 80057d2:	e7ef      	b.n	80057b4 <_reclaim_reent+0x90>
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	bf00      	nop
 80057d8:	20000010 	.word	0x20000010

080057dc <_sbrk_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d06      	ldr	r5, [pc, #24]	; (80057f8 <_sbrk_r+0x1c>)
 80057e0:	2300      	movs	r3, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fb f8e2 	bl	80009b0 <_sbrk>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_sbrk_r+0x1a>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_sbrk_r+0x1a>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	20004b4c 	.word	0x20004b4c

080057fc <sniprintf>:
 80057fc:	b40c      	push	{r2, r3}
 80057fe:	b530      	push	{r4, r5, lr}
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <sniprintf+0x64>)
 8005802:	1e0c      	subs	r4, r1, #0
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	b09d      	sub	sp, #116	; 0x74
 8005808:	da08      	bge.n	800581c <sniprintf+0x20>
 800580a:	238b      	movs	r3, #139	; 0x8b
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	b01d      	add	sp, #116	; 0x74
 8005814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005818:	b002      	add	sp, #8
 800581a:	4770      	bx	lr
 800581c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005820:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005824:	bf14      	ite	ne
 8005826:	f104 33ff 	addne.w	r3, r4, #4294967295
 800582a:	4623      	moveq	r3, r4
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800583c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800583e:	ab21      	add	r3, sp, #132	; 0x84
 8005840:	a902      	add	r1, sp, #8
 8005842:	4628      	mov	r0, r5
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	f000 f8c1 	bl	80059cc <_svfiprintf_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	bfbc      	itt	lt
 800584e:	238b      	movlt	r3, #139	; 0x8b
 8005850:	602b      	strlt	r3, [r5, #0]
 8005852:	2c00      	cmp	r4, #0
 8005854:	d0dd      	beq.n	8005812 <sniprintf+0x16>
 8005856:	9b02      	ldr	r3, [sp, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e7d9      	b.n	8005812 <sniprintf+0x16>
 800585e:	bf00      	nop
 8005860:	20000010 	.word	0x20000010

08005864 <__malloc_lock>:
 8005864:	4801      	ldr	r0, [pc, #4]	; (800586c <__malloc_lock+0x8>)
 8005866:	f7ff bea3 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 800586a:	bf00      	nop
 800586c:	20004b40 	.word	0x20004b40

08005870 <__malloc_unlock>:
 8005870:	4801      	ldr	r0, [pc, #4]	; (8005878 <__malloc_unlock+0x8>)
 8005872:	f7ff be9e 	b.w	80055b2 <__retarget_lock_release_recursive>
 8005876:	bf00      	nop
 8005878:	20004b40 	.word	0x20004b40

0800587c <_free_r>:
 800587c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800587e:	2900      	cmp	r1, #0
 8005880:	d044      	beq.n	800590c <_free_r+0x90>
 8005882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005886:	9001      	str	r0, [sp, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f1a1 0404 	sub.w	r4, r1, #4
 800588e:	bfb8      	it	lt
 8005890:	18e4      	addlt	r4, r4, r3
 8005892:	f7ff ffe7 	bl	8005864 <__malloc_lock>
 8005896:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <_free_r+0x94>)
 8005898:	9801      	ldr	r0, [sp, #4]
 800589a:	6813      	ldr	r3, [r2, #0]
 800589c:	b933      	cbnz	r3, 80058ac <_free_r+0x30>
 800589e:	6063      	str	r3, [r4, #4]
 80058a0:	6014      	str	r4, [r2, #0]
 80058a2:	b003      	add	sp, #12
 80058a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058a8:	f7ff bfe2 	b.w	8005870 <__malloc_unlock>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d908      	bls.n	80058c2 <_free_r+0x46>
 80058b0:	6825      	ldr	r5, [r4, #0]
 80058b2:	1961      	adds	r1, r4, r5
 80058b4:	428b      	cmp	r3, r1
 80058b6:	bf01      	itttt	eq
 80058b8:	6819      	ldreq	r1, [r3, #0]
 80058ba:	685b      	ldreq	r3, [r3, #4]
 80058bc:	1949      	addeq	r1, r1, r5
 80058be:	6021      	streq	r1, [r4, #0]
 80058c0:	e7ed      	b.n	800589e <_free_r+0x22>
 80058c2:	461a      	mov	r2, r3
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	b10b      	cbz	r3, 80058cc <_free_r+0x50>
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	d9fa      	bls.n	80058c2 <_free_r+0x46>
 80058cc:	6811      	ldr	r1, [r2, #0]
 80058ce:	1855      	adds	r5, r2, r1
 80058d0:	42a5      	cmp	r5, r4
 80058d2:	d10b      	bne.n	80058ec <_free_r+0x70>
 80058d4:	6824      	ldr	r4, [r4, #0]
 80058d6:	4421      	add	r1, r4
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	42a3      	cmp	r3, r4
 80058dc:	6011      	str	r1, [r2, #0]
 80058de:	d1e0      	bne.n	80058a2 <_free_r+0x26>
 80058e0:	681c      	ldr	r4, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	6053      	str	r3, [r2, #4]
 80058e6:	4421      	add	r1, r4
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	e7da      	b.n	80058a2 <_free_r+0x26>
 80058ec:	d902      	bls.n	80058f4 <_free_r+0x78>
 80058ee:	230c      	movs	r3, #12
 80058f0:	6003      	str	r3, [r0, #0]
 80058f2:	e7d6      	b.n	80058a2 <_free_r+0x26>
 80058f4:	6825      	ldr	r5, [r4, #0]
 80058f6:	1961      	adds	r1, r4, r5
 80058f8:	428b      	cmp	r3, r1
 80058fa:	bf04      	itt	eq
 80058fc:	6819      	ldreq	r1, [r3, #0]
 80058fe:	685b      	ldreq	r3, [r3, #4]
 8005900:	6063      	str	r3, [r4, #4]
 8005902:	bf04      	itt	eq
 8005904:	1949      	addeq	r1, r1, r5
 8005906:	6021      	streq	r1, [r4, #0]
 8005908:	6054      	str	r4, [r2, #4]
 800590a:	e7ca      	b.n	80058a2 <_free_r+0x26>
 800590c:	b003      	add	sp, #12
 800590e:	bd30      	pop	{r4, r5, pc}
 8005910:	20004b44 	.word	0x20004b44

08005914 <__ssputs_r>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	688e      	ldr	r6, [r1, #8]
 800591a:	429e      	cmp	r6, r3
 800591c:	4682      	mov	sl, r0
 800591e:	460c      	mov	r4, r1
 8005920:	4690      	mov	r8, r2
 8005922:	461f      	mov	r7, r3
 8005924:	d838      	bhi.n	8005998 <__ssputs_r+0x84>
 8005926:	898a      	ldrh	r2, [r1, #12]
 8005928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800592c:	d032      	beq.n	8005994 <__ssputs_r+0x80>
 800592e:	6825      	ldr	r5, [r4, #0]
 8005930:	6909      	ldr	r1, [r1, #16]
 8005932:	eba5 0901 	sub.w	r9, r5, r1
 8005936:	6965      	ldr	r5, [r4, #20]
 8005938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800593c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005940:	3301      	adds	r3, #1
 8005942:	444b      	add	r3, r9
 8005944:	106d      	asrs	r5, r5, #1
 8005946:	429d      	cmp	r5, r3
 8005948:	bf38      	it	cc
 800594a:	461d      	movcc	r5, r3
 800594c:	0553      	lsls	r3, r2, #21
 800594e:	d531      	bpl.n	80059b4 <__ssputs_r+0xa0>
 8005950:	4629      	mov	r1, r5
 8005952:	f7ff fe65 	bl	8005620 <_malloc_r>
 8005956:	4606      	mov	r6, r0
 8005958:	b950      	cbnz	r0, 8005970 <__ssputs_r+0x5c>
 800595a:	230c      	movs	r3, #12
 800595c:	f8ca 3000 	str.w	r3, [sl]
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005970:	6921      	ldr	r1, [r4, #16]
 8005972:	464a      	mov	r2, r9
 8005974:	f7ff fe1e 	bl	80055b4 <memcpy>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800597e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005982:	81a3      	strh	r3, [r4, #12]
 8005984:	6126      	str	r6, [r4, #16]
 8005986:	6165      	str	r5, [r4, #20]
 8005988:	444e      	add	r6, r9
 800598a:	eba5 0509 	sub.w	r5, r5, r9
 800598e:	6026      	str	r6, [r4, #0]
 8005990:	60a5      	str	r5, [r4, #8]
 8005992:	463e      	mov	r6, r7
 8005994:	42be      	cmp	r6, r7
 8005996:	d900      	bls.n	800599a <__ssputs_r+0x86>
 8005998:	463e      	mov	r6, r7
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	4632      	mov	r2, r6
 800599e:	4641      	mov	r1, r8
 80059a0:	f000 faa8 	bl	8005ef4 <memmove>
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	1b9b      	subs	r3, r3, r6
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	4433      	add	r3, r6
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	2000      	movs	r0, #0
 80059b2:	e7db      	b.n	800596c <__ssputs_r+0x58>
 80059b4:	462a      	mov	r2, r5
 80059b6:	f000 fab7 	bl	8005f28 <_realloc_r>
 80059ba:	4606      	mov	r6, r0
 80059bc:	2800      	cmp	r0, #0
 80059be:	d1e1      	bne.n	8005984 <__ssputs_r+0x70>
 80059c0:	6921      	ldr	r1, [r4, #16]
 80059c2:	4650      	mov	r0, sl
 80059c4:	f7ff ff5a 	bl	800587c <_free_r>
 80059c8:	e7c7      	b.n	800595a <__ssputs_r+0x46>
	...

080059cc <_svfiprintf_r>:
 80059cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	4698      	mov	r8, r3
 80059d2:	898b      	ldrh	r3, [r1, #12]
 80059d4:	061b      	lsls	r3, r3, #24
 80059d6:	b09d      	sub	sp, #116	; 0x74
 80059d8:	4607      	mov	r7, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	4614      	mov	r4, r2
 80059de:	d50e      	bpl.n	80059fe <_svfiprintf_r+0x32>
 80059e0:	690b      	ldr	r3, [r1, #16]
 80059e2:	b963      	cbnz	r3, 80059fe <_svfiprintf_r+0x32>
 80059e4:	2140      	movs	r1, #64	; 0x40
 80059e6:	f7ff fe1b 	bl	8005620 <_malloc_r>
 80059ea:	6028      	str	r0, [r5, #0]
 80059ec:	6128      	str	r0, [r5, #16]
 80059ee:	b920      	cbnz	r0, 80059fa <_svfiprintf_r+0x2e>
 80059f0:	230c      	movs	r3, #12
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	e0d1      	b.n	8005b9e <_svfiprintf_r+0x1d2>
 80059fa:	2340      	movs	r3, #64	; 0x40
 80059fc:	616b      	str	r3, [r5, #20]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9309      	str	r3, [sp, #36]	; 0x24
 8005a02:	2320      	movs	r3, #32
 8005a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a0c:	2330      	movs	r3, #48	; 0x30
 8005a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bb8 <_svfiprintf_r+0x1ec>
 8005a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a16:	f04f 0901 	mov.w	r9, #1
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	469a      	mov	sl, r3
 8005a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a22:	b10a      	cbz	r2, 8005a28 <_svfiprintf_r+0x5c>
 8005a24:	2a25      	cmp	r2, #37	; 0x25
 8005a26:	d1f9      	bne.n	8005a1c <_svfiprintf_r+0x50>
 8005a28:	ebba 0b04 	subs.w	fp, sl, r4
 8005a2c:	d00b      	beq.n	8005a46 <_svfiprintf_r+0x7a>
 8005a2e:	465b      	mov	r3, fp
 8005a30:	4622      	mov	r2, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	f7ff ff6d 	bl	8005914 <__ssputs_r>
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f000 80aa 	beq.w	8005b94 <_svfiprintf_r+0x1c8>
 8005a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a42:	445a      	add	r2, fp
 8005a44:	9209      	str	r2, [sp, #36]	; 0x24
 8005a46:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80a2 	beq.w	8005b94 <_svfiprintf_r+0x1c8>
 8005a50:	2300      	movs	r3, #0
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295
 8005a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5a:	f10a 0a01 	add.w	sl, sl, #1
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	9307      	str	r3, [sp, #28]
 8005a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a66:	931a      	str	r3, [sp, #104]	; 0x68
 8005a68:	4654      	mov	r4, sl
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a70:	4851      	ldr	r0, [pc, #324]	; (8005bb8 <_svfiprintf_r+0x1ec>)
 8005a72:	f7fa fbad 	bl	80001d0 <memchr>
 8005a76:	9a04      	ldr	r2, [sp, #16]
 8005a78:	b9d8      	cbnz	r0, 8005ab2 <_svfiprintf_r+0xe6>
 8005a7a:	06d0      	lsls	r0, r2, #27
 8005a7c:	bf44      	itt	mi
 8005a7e:	2320      	movmi	r3, #32
 8005a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a84:	0711      	lsls	r1, r2, #28
 8005a86:	bf44      	itt	mi
 8005a88:	232b      	movmi	r3, #43	; 0x2b
 8005a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a92:	2b2a      	cmp	r3, #42	; 0x2a
 8005a94:	d015      	beq.n	8005ac2 <_svfiprintf_r+0xf6>
 8005a96:	9a07      	ldr	r2, [sp, #28]
 8005a98:	4654      	mov	r4, sl
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	f04f 0c0a 	mov.w	ip, #10
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aa6:	3b30      	subs	r3, #48	; 0x30
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	d94e      	bls.n	8005b4a <_svfiprintf_r+0x17e>
 8005aac:	b1b0      	cbz	r0, 8005adc <_svfiprintf_r+0x110>
 8005aae:	9207      	str	r2, [sp, #28]
 8005ab0:	e014      	b.n	8005adc <_svfiprintf_r+0x110>
 8005ab2:	eba0 0308 	sub.w	r3, r0, r8
 8005ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	9304      	str	r3, [sp, #16]
 8005abe:	46a2      	mov	sl, r4
 8005ac0:	e7d2      	b.n	8005a68 <_svfiprintf_r+0x9c>
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	1d19      	adds	r1, r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	9103      	str	r1, [sp, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bfbb      	ittet	lt
 8005ace:	425b      	neglt	r3, r3
 8005ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad4:	9307      	strge	r3, [sp, #28]
 8005ad6:	9307      	strlt	r3, [sp, #28]
 8005ad8:	bfb8      	it	lt
 8005ada:	9204      	strlt	r2, [sp, #16]
 8005adc:	7823      	ldrb	r3, [r4, #0]
 8005ade:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae0:	d10c      	bne.n	8005afc <_svfiprintf_r+0x130>
 8005ae2:	7863      	ldrb	r3, [r4, #1]
 8005ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae6:	d135      	bne.n	8005b54 <_svfiprintf_r+0x188>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	9203      	str	r2, [sp, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bfb8      	it	lt
 8005af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005af8:	3402      	adds	r4, #2
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bc8 <_svfiprintf_r+0x1fc>
 8005b00:	7821      	ldrb	r1, [r4, #0]
 8005b02:	2203      	movs	r2, #3
 8005b04:	4650      	mov	r0, sl
 8005b06:	f7fa fb63 	bl	80001d0 <memchr>
 8005b0a:	b140      	cbz	r0, 8005b1e <_svfiprintf_r+0x152>
 8005b0c:	2340      	movs	r3, #64	; 0x40
 8005b0e:	eba0 000a 	sub.w	r0, r0, sl
 8005b12:	fa03 f000 	lsl.w	r0, r3, r0
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	4303      	orrs	r3, r0
 8005b1a:	3401      	adds	r4, #1
 8005b1c:	9304      	str	r3, [sp, #16]
 8005b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b22:	4826      	ldr	r0, [pc, #152]	; (8005bbc <_svfiprintf_r+0x1f0>)
 8005b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b28:	2206      	movs	r2, #6
 8005b2a:	f7fa fb51 	bl	80001d0 <memchr>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d038      	beq.n	8005ba4 <_svfiprintf_r+0x1d8>
 8005b32:	4b23      	ldr	r3, [pc, #140]	; (8005bc0 <_svfiprintf_r+0x1f4>)
 8005b34:	bb1b      	cbnz	r3, 8005b7e <_svfiprintf_r+0x1b2>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	3307      	adds	r3, #7
 8005b3a:	f023 0307 	bic.w	r3, r3, #7
 8005b3e:	3308      	adds	r3, #8
 8005b40:	9303      	str	r3, [sp, #12]
 8005b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b44:	4433      	add	r3, r6
 8005b46:	9309      	str	r3, [sp, #36]	; 0x24
 8005b48:	e767      	b.n	8005a1a <_svfiprintf_r+0x4e>
 8005b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b4e:	460c      	mov	r4, r1
 8005b50:	2001      	movs	r0, #1
 8005b52:	e7a5      	b.n	8005aa0 <_svfiprintf_r+0xd4>
 8005b54:	2300      	movs	r3, #0
 8005b56:	3401      	adds	r4, #1
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f04f 0c0a 	mov.w	ip, #10
 8005b60:	4620      	mov	r0, r4
 8005b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b66:	3a30      	subs	r2, #48	; 0x30
 8005b68:	2a09      	cmp	r2, #9
 8005b6a:	d903      	bls.n	8005b74 <_svfiprintf_r+0x1a8>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0c5      	beq.n	8005afc <_svfiprintf_r+0x130>
 8005b70:	9105      	str	r1, [sp, #20]
 8005b72:	e7c3      	b.n	8005afc <_svfiprintf_r+0x130>
 8005b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b78:	4604      	mov	r4, r0
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e7f0      	b.n	8005b60 <_svfiprintf_r+0x194>
 8005b7e:	ab03      	add	r3, sp, #12
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	462a      	mov	r2, r5
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <_svfiprintf_r+0x1f8>)
 8005b86:	a904      	add	r1, sp, #16
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f3af 8000 	nop.w
 8005b8e:	1c42      	adds	r2, r0, #1
 8005b90:	4606      	mov	r6, r0
 8005b92:	d1d6      	bne.n	8005b42 <_svfiprintf_r+0x176>
 8005b94:	89ab      	ldrh	r3, [r5, #12]
 8005b96:	065b      	lsls	r3, r3, #25
 8005b98:	f53f af2c 	bmi.w	80059f4 <_svfiprintf_r+0x28>
 8005b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9e:	b01d      	add	sp, #116	; 0x74
 8005ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba4:	ab03      	add	r3, sp, #12
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <_svfiprintf_r+0x1f8>)
 8005bac:	a904      	add	r1, sp, #16
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f000 f87a 	bl	8005ca8 <_printf_i>
 8005bb4:	e7eb      	b.n	8005b8e <_svfiprintf_r+0x1c2>
 8005bb6:	bf00      	nop
 8005bb8:	080060c0 	.word	0x080060c0
 8005bbc:	080060ca 	.word	0x080060ca
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	08005915 	.word	0x08005915
 8005bc8:	080060c6 	.word	0x080060c6

08005bcc <_printf_common>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	688a      	ldr	r2, [r1, #8]
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bfb8      	it	lt
 8005be0:	4613      	movlt	r3, r2
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be8:	4607      	mov	r7, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	b10a      	cbz	r2, 8005bf2 <_printf_common+0x26>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	6833      	ldrmi	r3, [r6, #0]
 8005bfa:	3302      	addmi	r3, #2
 8005bfc:	6033      	strmi	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d106      	bne.n	8005c14 <_printf_common+0x48>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	6832      	ldr	r2, [r6, #0]
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc26      	bgt.n	8005c62 <_printf_common+0x96>
 8005c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c18:	1e13      	subs	r3, r2, #0
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	bf18      	it	ne
 8005c1e:	2301      	movne	r3, #1
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d42b      	bmi.n	8005c7c <_printf_common+0xb0>
 8005c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d01e      	beq.n	8005c70 <_printf_common+0xa4>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	68e5      	ldr	r5, [r4, #12]
 8005c36:	6832      	ldr	r2, [r6, #0]
 8005c38:	f003 0306 	and.w	r3, r3, #6
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	bf08      	it	eq
 8005c40:	1aad      	subeq	r5, r5, r2
 8005c42:	68a3      	ldr	r3, [r4, #8]
 8005c44:	6922      	ldr	r2, [r4, #16]
 8005c46:	bf0c      	ite	eq
 8005c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c4c:	2500      	movne	r5, #0
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	bfc4      	itt	gt
 8005c52:	1a9b      	subgt	r3, r3, r2
 8005c54:	18ed      	addgt	r5, r5, r3
 8005c56:	2600      	movs	r6, #0
 8005c58:	341a      	adds	r4, #26
 8005c5a:	42b5      	cmp	r5, r6
 8005c5c:	d11a      	bne.n	8005c94 <_printf_common+0xc8>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e008      	b.n	8005c74 <_printf_common+0xa8>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4649      	mov	r1, r9
 8005c68:	4638      	mov	r0, r7
 8005c6a:	47c0      	blx	r8
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d103      	bne.n	8005c78 <_printf_common+0xac>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	3501      	adds	r5, #1
 8005c7a:	e7c6      	b.n	8005c0a <_printf_common+0x3e>
 8005c7c:	18e1      	adds	r1, r4, r3
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	2030      	movs	r0, #48	; 0x30
 8005c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c86:	4422      	add	r2, r4
 8005c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c90:	3302      	adds	r3, #2
 8005c92:	e7c7      	b.n	8005c24 <_printf_common+0x58>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4622      	mov	r2, r4
 8005c98:	4649      	mov	r1, r9
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c0      	blx	r8
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0e6      	beq.n	8005c70 <_printf_common+0xa4>
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	e7d9      	b.n	8005c5a <_printf_common+0x8e>
	...

08005ca8 <_printf_i>:
 8005ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	7e0f      	ldrb	r7, [r1, #24]
 8005cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb0:	2f78      	cmp	r7, #120	; 0x78
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	469a      	mov	sl, r3
 8005cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cbe:	d807      	bhi.n	8005cd0 <_printf_i+0x28>
 8005cc0:	2f62      	cmp	r7, #98	; 0x62
 8005cc2:	d80a      	bhi.n	8005cda <_printf_i+0x32>
 8005cc4:	2f00      	cmp	r7, #0
 8005cc6:	f000 80d8 	beq.w	8005e7a <_printf_i+0x1d2>
 8005cca:	2f58      	cmp	r7, #88	; 0x58
 8005ccc:	f000 80a3 	beq.w	8005e16 <_printf_i+0x16e>
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cd8:	e03a      	b.n	8005d50 <_printf_i+0xa8>
 8005cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cde:	2b15      	cmp	r3, #21
 8005ce0:	d8f6      	bhi.n	8005cd0 <_printf_i+0x28>
 8005ce2:	a101      	add	r1, pc, #4	; (adr r1, 8005ce8 <_printf_i+0x40>)
 8005ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d55 	.word	0x08005d55
 8005cf0:	08005cd1 	.word	0x08005cd1
 8005cf4:	08005cd1 	.word	0x08005cd1
 8005cf8:	08005cd1 	.word	0x08005cd1
 8005cfc:	08005cd1 	.word	0x08005cd1
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005cd1 	.word	0x08005cd1
 8005d08:	08005cd1 	.word	0x08005cd1
 8005d0c:	08005cd1 	.word	0x08005cd1
 8005d10:	08005cd1 	.word	0x08005cd1
 8005d14:	08005e61 	.word	0x08005e61
 8005d18:	08005d85 	.word	0x08005d85
 8005d1c:	08005e43 	.word	0x08005e43
 8005d20:	08005cd1 	.word	0x08005cd1
 8005d24:	08005cd1 	.word	0x08005cd1
 8005d28:	08005e83 	.word	0x08005e83
 8005d2c:	08005cd1 	.word	0x08005cd1
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005cd1 	.word	0x08005cd1
 8005d38:	08005cd1 	.word	0x08005cd1
 8005d3c:	08005e4b 	.word	0x08005e4b
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	602a      	str	r2, [r5, #0]
 8005d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0a3      	b.n	8005e9c <_printf_i+0x1f4>
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	6829      	ldr	r1, [r5, #0]
 8005d58:	0606      	lsls	r6, r0, #24
 8005d5a:	f101 0304 	add.w	r3, r1, #4
 8005d5e:	d50a      	bpl.n	8005d76 <_printf_i+0xce>
 8005d60:	680e      	ldr	r6, [r1, #0]
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	da03      	bge.n	8005d70 <_printf_i+0xc8>
 8005d68:	232d      	movs	r3, #45	; 0x2d
 8005d6a:	4276      	negs	r6, r6
 8005d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d70:	485e      	ldr	r0, [pc, #376]	; (8005eec <_printf_i+0x244>)
 8005d72:	230a      	movs	r3, #10
 8005d74:	e019      	b.n	8005daa <_printf_i+0x102>
 8005d76:	680e      	ldr	r6, [r1, #0]
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d7e:	bf18      	it	ne
 8005d80:	b236      	sxthne	r6, r6
 8005d82:	e7ef      	b.n	8005d64 <_printf_i+0xbc>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	1d19      	adds	r1, r3, #4
 8005d8a:	6029      	str	r1, [r5, #0]
 8005d8c:	0601      	lsls	r1, r0, #24
 8005d8e:	d501      	bpl.n	8005d94 <_printf_i+0xec>
 8005d90:	681e      	ldr	r6, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <_printf_i+0xf2>
 8005d94:	0646      	lsls	r6, r0, #25
 8005d96:	d5fb      	bpl.n	8005d90 <_printf_i+0xe8>
 8005d98:	881e      	ldrh	r6, [r3, #0]
 8005d9a:	4854      	ldr	r0, [pc, #336]	; (8005eec <_printf_i+0x244>)
 8005d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d9e:	bf0c      	ite	eq
 8005da0:	2308      	moveq	r3, #8
 8005da2:	230a      	movne	r3, #10
 8005da4:	2100      	movs	r1, #0
 8005da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005daa:	6865      	ldr	r5, [r4, #4]
 8005dac:	60a5      	str	r5, [r4, #8]
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	bfa2      	ittt	ge
 8005db2:	6821      	ldrge	r1, [r4, #0]
 8005db4:	f021 0104 	bicge.w	r1, r1, #4
 8005db8:	6021      	strge	r1, [r4, #0]
 8005dba:	b90e      	cbnz	r6, 8005dc0 <_printf_i+0x118>
 8005dbc:	2d00      	cmp	r5, #0
 8005dbe:	d04d      	beq.n	8005e5c <_printf_i+0x1b4>
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dca:	5dc7      	ldrb	r7, [r0, r7]
 8005dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd0:	4637      	mov	r7, r6
 8005dd2:	42bb      	cmp	r3, r7
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	d9f4      	bls.n	8005dc2 <_printf_i+0x11a>
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d10b      	bne.n	8005df4 <_printf_i+0x14c>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	07de      	lsls	r6, r3, #31
 8005de0:	d508      	bpl.n	8005df4 <_printf_i+0x14c>
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	6861      	ldr	r1, [r4, #4]
 8005de6:	4299      	cmp	r1, r3
 8005de8:	bfde      	ittt	le
 8005dea:	2330      	movle	r3, #48	; 0x30
 8005dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005df4:	1b52      	subs	r2, r2, r5
 8005df6:	6122      	str	r2, [r4, #16]
 8005df8:	f8cd a000 	str.w	sl, [sp]
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	aa03      	add	r2, sp, #12
 8005e00:	4621      	mov	r1, r4
 8005e02:	4640      	mov	r0, r8
 8005e04:	f7ff fee2 	bl	8005bcc <_printf_common>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d14c      	bne.n	8005ea6 <_printf_i+0x1fe>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	b004      	add	sp, #16
 8005e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e16:	4835      	ldr	r0, [pc, #212]	; (8005eec <_printf_i+0x244>)
 8005e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e1c:	6829      	ldr	r1, [r5, #0]
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e24:	6029      	str	r1, [r5, #0]
 8005e26:	061d      	lsls	r5, r3, #24
 8005e28:	d514      	bpl.n	8005e54 <_printf_i+0x1ac>
 8005e2a:	07df      	lsls	r7, r3, #31
 8005e2c:	bf44      	itt	mi
 8005e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e32:	6023      	strmi	r3, [r4, #0]
 8005e34:	b91e      	cbnz	r6, 8005e3e <_printf_i+0x196>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f023 0320 	bic.w	r3, r3, #32
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	2310      	movs	r3, #16
 8005e40:	e7b0      	b.n	8005da4 <_printf_i+0xfc>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f043 0320 	orr.w	r3, r3, #32
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	2378      	movs	r3, #120	; 0x78
 8005e4c:	4828      	ldr	r0, [pc, #160]	; (8005ef0 <_printf_i+0x248>)
 8005e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e52:	e7e3      	b.n	8005e1c <_printf_i+0x174>
 8005e54:	0659      	lsls	r1, r3, #25
 8005e56:	bf48      	it	mi
 8005e58:	b2b6      	uxthmi	r6, r6
 8005e5a:	e7e6      	b.n	8005e2a <_printf_i+0x182>
 8005e5c:	4615      	mov	r5, r2
 8005e5e:	e7bb      	b.n	8005dd8 <_printf_i+0x130>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	6826      	ldr	r6, [r4, #0]
 8005e64:	6961      	ldr	r1, [r4, #20]
 8005e66:	1d18      	adds	r0, r3, #4
 8005e68:	6028      	str	r0, [r5, #0]
 8005e6a:	0635      	lsls	r5, r6, #24
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	d501      	bpl.n	8005e74 <_printf_i+0x1cc>
 8005e70:	6019      	str	r1, [r3, #0]
 8005e72:	e002      	b.n	8005e7a <_printf_i+0x1d2>
 8005e74:	0670      	lsls	r0, r6, #25
 8005e76:	d5fb      	bpl.n	8005e70 <_printf_i+0x1c8>
 8005e78:	8019      	strh	r1, [r3, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	4615      	mov	r5, r2
 8005e80:	e7ba      	b.n	8005df8 <_printf_i+0x150>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	1d1a      	adds	r2, r3, #4
 8005e86:	602a      	str	r2, [r5, #0]
 8005e88:	681d      	ldr	r5, [r3, #0]
 8005e8a:	6862      	ldr	r2, [r4, #4]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7fa f99e 	bl	80001d0 <memchr>
 8005e94:	b108      	cbz	r0, 8005e9a <_printf_i+0x1f2>
 8005e96:	1b40      	subs	r0, r0, r5
 8005e98:	6060      	str	r0, [r4, #4]
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	e7a8      	b.n	8005df8 <_printf_i+0x150>
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4640      	mov	r0, r8
 8005eae:	47d0      	blx	sl
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d0ab      	beq.n	8005e0c <_printf_i+0x164>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	079b      	lsls	r3, r3, #30
 8005eb8:	d413      	bmi.n	8005ee2 <_printf_i+0x23a>
 8005eba:	68e0      	ldr	r0, [r4, #12]
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	4298      	cmp	r0, r3
 8005ec0:	bfb8      	it	lt
 8005ec2:	4618      	movlt	r0, r3
 8005ec4:	e7a4      	b.n	8005e10 <_printf_i+0x168>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	47d0      	blx	sl
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d09b      	beq.n	8005e0c <_printf_i+0x164>
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	9903      	ldr	r1, [sp, #12]
 8005eda:	1a5b      	subs	r3, r3, r1
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dcf2      	bgt.n	8005ec6 <_printf_i+0x21e>
 8005ee0:	e7eb      	b.n	8005eba <_printf_i+0x212>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	f104 0619 	add.w	r6, r4, #25
 8005ee8:	e7f5      	b.n	8005ed6 <_printf_i+0x22e>
 8005eea:	bf00      	nop
 8005eec:	080060d1 	.word	0x080060d1
 8005ef0:	080060e2 	.word	0x080060e2

08005ef4 <memmove>:
 8005ef4:	4288      	cmp	r0, r1
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	eb01 0402 	add.w	r4, r1, r2
 8005efc:	d902      	bls.n	8005f04 <memmove+0x10>
 8005efe:	4284      	cmp	r4, r0
 8005f00:	4623      	mov	r3, r4
 8005f02:	d807      	bhi.n	8005f14 <memmove+0x20>
 8005f04:	1e43      	subs	r3, r0, #1
 8005f06:	42a1      	cmp	r1, r4
 8005f08:	d008      	beq.n	8005f1c <memmove+0x28>
 8005f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f12:	e7f8      	b.n	8005f06 <memmove+0x12>
 8005f14:	4402      	add	r2, r0
 8005f16:	4601      	mov	r1, r0
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	d100      	bne.n	8005f1e <memmove+0x2a>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f26:	e7f7      	b.n	8005f18 <memmove+0x24>

08005f28 <_realloc_r>:
 8005f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	4614      	mov	r4, r2
 8005f30:	460e      	mov	r6, r1
 8005f32:	b921      	cbnz	r1, 8005f3e <_realloc_r+0x16>
 8005f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f38:	4611      	mov	r1, r2
 8005f3a:	f7ff bb71 	b.w	8005620 <_malloc_r>
 8005f3e:	b92a      	cbnz	r2, 8005f4c <_realloc_r+0x24>
 8005f40:	f7ff fc9c 	bl	800587c <_free_r>
 8005f44:	4625      	mov	r5, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f4c:	f000 f81b 	bl	8005f86 <_malloc_usable_size_r>
 8005f50:	4284      	cmp	r4, r0
 8005f52:	4607      	mov	r7, r0
 8005f54:	d802      	bhi.n	8005f5c <_realloc_r+0x34>
 8005f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f5a:	d812      	bhi.n	8005f82 <_realloc_r+0x5a>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f7ff fb5e 	bl	8005620 <_malloc_r>
 8005f64:	4605      	mov	r5, r0
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d0ed      	beq.n	8005f46 <_realloc_r+0x1e>
 8005f6a:	42bc      	cmp	r4, r7
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	4631      	mov	r1, r6
 8005f70:	bf28      	it	cs
 8005f72:	463a      	movcs	r2, r7
 8005f74:	f7ff fb1e 	bl	80055b4 <memcpy>
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f7ff fc7e 	bl	800587c <_free_r>
 8005f80:	e7e1      	b.n	8005f46 <_realloc_r+0x1e>
 8005f82:	4635      	mov	r5, r6
 8005f84:	e7df      	b.n	8005f46 <_realloc_r+0x1e>

08005f86 <_malloc_usable_size_r>:
 8005f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8a:	1f18      	subs	r0, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfbc      	itt	lt
 8005f90:	580b      	ldrlt	r3, [r1, r0]
 8005f92:	18c0      	addlt	r0, r0, r3
 8005f94:	4770      	bx	lr
	...

08005f98 <_init>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr

08005fa4 <_fini>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr
