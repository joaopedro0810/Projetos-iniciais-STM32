
Projeto48 - RTOS 08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b9c  08005b9c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba4  08005ba4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b44  20004b44  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019743  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e6  00000000  00000000  000397e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001318  00000000  00000000  0003df00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000367e  00000000  00000000  0003f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a3d  00000000  00000000  00042896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a83  00000000  00000000  000582d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cd56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005854  00000000  00000000  0012cda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a78 	.word	0x08005a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005a78 	.word	0x08005a78

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa90 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f830 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8b6 	bl	8000650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f88a 	bl	80005fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f002 f89e 	bl	8002628 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tarefa1 */
  Tarefa1Handle = osThreadNew(Tarefa1_fun, NULL, &Tarefa1_attributes);
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <main+0x4c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <main+0x50>)
 80004f2:	f002 f8e3 	bl	80026bc <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <main+0x54>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* creation of Tarefa2 */
  Tarefa2Handle = osThreadNew(Tarefa2_fun, NULL, &Tarefa2_attributes);
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <main+0x58>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <main+0x5c>)
 8000502:	f002 f8db 	bl	80026bc <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <main+0x60>)
 800050a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <main+0x64>)
 800050e:	f002 f982 	bl	8002816 <osEventFlagsNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <main+0x68>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f002 f8aa 	bl	8002670 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x48>
 800051e:	bf00      	nop
 8000520:	08005acc 	.word	0x08005acc
 8000524:	08000701 	.word	0x08000701
 8000528:	200000d4 	.word	0x200000d4
 800052c:	08005af0 	.word	0x08005af0
 8000530:	08000739 	.word	0x08000739
 8000534:	200000d8 	.word	0x200000d8
 8000538:	08005b14 	.word	0x08005b14
 800053c:	200000dc 	.word	0x200000dc

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 f9c8 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xb4>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <SystemClock_Config+0xb8>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fcfb 	bl	8000fac <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005bc:	f000 f8e8 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff5e 	bl	800149c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e6:	f000 f8d3 	bl	8000790 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART1_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800060c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000622:	2208      	movs	r2, #8
 8000624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000634:	f001 fbf2 	bl	8001e1c <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f8a7 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090
 800064c:	40011000 	.word	0x40011000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_GPIO_Init+0x80>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <MX_GPIO_Init+0x80>)
 8000670:	f043 0310 	orr.w	r3, r3, #16
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_GPIO_Init+0x80>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0310 	and.w	r3, r3, #16
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_GPIO_Init+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x80>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_GPIO_Init+0x80>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOT_Pin */
  GPIO_InitStruct.Pin = BOT_Pin;
 800069e:	2310      	movs	r3, #16
 80006a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOT_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <MX_GPIO_Init+0x84>)
 80006b4:	f000 fac6 	bl	8000c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2105      	movs	r1, #5
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 fa97 	bl	8000bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fab0 	bl	8000c28 <HAL_NVIC_EnableIRQ>

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BOT_Pin)
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b10      	cmp	r3, #16
 80006e6:	d105      	bne.n	80006f4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osEventFlagsSet(myEvent01Handle, 0x20);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_GPIO_EXTI_Callback+0x24>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2120      	movs	r1, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f8d0 	bl	8002894 <osEventFlagsSet>
	}
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000dc 	.word	0x200000dc

08000700 <Tarefa1_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarefa1_fun */
void Tarefa1_fun(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *) "T1\n", strlen("T1\n"), 100);
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	2203      	movs	r2, #3
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <Tarefa1_fun+0x2c>)
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <Tarefa1_fun+0x30>)
 8000710:	f001 fbd1 	bl	8001eb6 <HAL_UART_Transmit>
	  osEventFlagsSet(myEvent01Handle, 0x10);
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <Tarefa1_fun+0x34>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2110      	movs	r1, #16
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f8ba 	bl	8002894 <osEventFlagsSet>
	  osDelay(1000);
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f002 f85c 	bl	80027e0 <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "T1\n", strlen("T1\n"), 100);
 8000728:	e7ee      	b.n	8000708 <Tarefa1_fun+0x8>
 800072a:	bf00      	nop
 800072c:	08005aac 	.word	0x08005aac
 8000730:	20000090 	.word	0x20000090
 8000734:	200000dc 	.word	0x200000dc

08000738 <Tarefa2_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa2_fun */
void Tarefa2_fun(void *argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa2_fun */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(myEvent01Handle, 0x30, osFlagsWaitAll, osWaitForever);
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <Tarefa2_fun+0x28>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2201      	movs	r2, #1
 800074a:	2130      	movs	r1, #48	; 0x30
 800074c:	f002 f8e6 	bl	800291c <osEventFlagsWait>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "T2\n", strlen("T2\n"), 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	2203      	movs	r2, #3
 8000754:	4903      	ldr	r1, [pc, #12]	; (8000764 <Tarefa2_fun+0x2c>)
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <Tarefa2_fun+0x30>)
 8000758:	f001 fbad 	bl	8001eb6 <HAL_UART_Transmit>
	  osEventFlagsWait(myEvent01Handle, 0x30, osFlagsWaitAll, osWaitForever);
 800075c:	e7f0      	b.n	8000740 <Tarefa2_fun+0x8>
 800075e:	bf00      	nop
 8000760:	200000dc 	.word	0x200000dc
 8000764:	08005ab0 	.word	0x08005ab0
 8000768:	20000090 	.word	0x20000090

0800076c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f000 f95f 	bl	8000a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010000 	.word	0x40010000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_MspInit+0x54>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a11      	ldr	r2, [pc, #68]	; (80007f0 <HAL_MspInit+0x54>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x54>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_MspInit+0x54>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_MspInit+0x54>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_MspInit+0x54>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	f06f 0001 	mvn.w	r0, #1
 80007e2:	f000 fa05 	bl	8000bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <HAL_UART_MspInit+0x84>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d12c      	bne.n	8000870 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_MspInit+0x88>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_UART_MspInit+0x88>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_UART_MspInit+0x88>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_UART_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_UART_MspInit+0x88>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_UART_MspInit+0x88>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800084e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000860:	2307      	movs	r3, #7
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <HAL_UART_MspInit+0x8c>)
 800086c:	f000 f9ea 	bl	8000c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40011000 	.word	0x40011000
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2019      	movs	r0, #25
 800089a:	f000 f9a9 	bl	8000bf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800089e:	2019      	movs	r0, #25
 80008a0:	f000 f9c2 	bl	8000c28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_InitTick+0xa0>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <HAL_InitTick+0xa0>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6453      	str	r3, [r2, #68]	; 0x44
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_InitTick+0xa0>)
 80008b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 ffc6 	bl	800185c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008d0:	f000 ffb0 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 80008d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_InitTick+0xa4>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_InitTick+0xa8>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_InitTick+0xac>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_InitTick+0xa8>)
 80008ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_InitTick+0xa8>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_InitTick+0xa8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_InitTick+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_InitTick+0xa8>)
 8000906:	f000 ffdb 	bl	80018c0 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_InitTick+0xa8>)
 8000912:	f001 f82f 	bl	8001974 <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	431bde83 	.word	0x431bde83
 800092c:	200000e0 	.word	0x200000e0
 8000930:	40010000 	.word	0x40010000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOT_Pin);
 8000964:	2010      	movs	r0, #16
 8000966:	f000 fb09 	bl	8000f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000976:	f001 f86d 	bl	8001a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000e0 	.word	0x200000e0

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d2:	f7ff ffd7 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f004 ff51 	bl	800587c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fd7b 	bl	80004d4 <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009ec:	08005bac 	.word	0x08005bac
  ldr r2, =_sbss
 80009f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009f4:	20004b44 	.word	0x20004b44

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_Init+0x40>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_Init+0x40>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x40>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f8d8 	bl	8000bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f7ff ff2a 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff feb4 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000128 	.word	0x20000128

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000128 	.word	0x20000128

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff4c 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c02:	f7ff ff61 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f7ff ffb1 	bl	8000b74 <NVIC_EncodePriority>
 8000c12:	4602      	mov	r2, r0
 8000c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff80 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff54 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	e16b      	b.n	8000f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c60:	2201      	movs	r2, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 815a 	bne.w	8000f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d005      	beq.n	8000c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d130      	bne.n	8000cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	f003 0201 	and.w	r2, r3, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d017      	beq.n	8000d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d123      	bne.n	8000d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	69b9      	ldr	r1, [r7, #24]
 8000d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0203 	and.w	r2, r3, #3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80b4 	beq.w	8000f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <HAL_GPIO_Init+0x30c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a5f      	ldr	r2, [pc, #380]	; (8000f50 <HAL_GPIO_Init+0x30c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <HAL_GPIO_Init+0x30c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de6:	4a5b      	ldr	r2, [pc, #364]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_GPIO_Init+0x314>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02b      	beq.n	8000e6a <HAL_GPIO_Init+0x226>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <HAL_GPIO_Init+0x318>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d025      	beq.n	8000e66 <HAL_GPIO_Init+0x222>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a50      	ldr	r2, [pc, #320]	; (8000f60 <HAL_GPIO_Init+0x31c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d01f      	beq.n	8000e62 <HAL_GPIO_Init+0x21e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d019      	beq.n	8000e5e <HAL_GPIO_Init+0x21a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4e      	ldr	r2, [pc, #312]	; (8000f68 <HAL_GPIO_Init+0x324>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0x216>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_GPIO_Init+0x328>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00d      	beq.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x32c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d007      	beq.n	8000e52 <HAL_GPIO_Init+0x20e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <HAL_GPIO_Init+0x330>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_GPIO_Init+0x20a>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e00e      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e4e:	2308      	movs	r3, #8
 8000e50:	e00c      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e52:	2306      	movs	r3, #6
 8000e54:	e00a      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e56:	2305      	movs	r3, #5
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x228>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7c:	4935      	ldr	r1, [pc, #212]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eae:	4a32      	ldr	r2, [pc, #200]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_GPIO_Init+0x334>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	f67f ae90 	bls.w	8000c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40021400 	.word	0x40021400
 8000f70:	40021800 	.word	0x40021800
 8000f74:	40021c00 	.word	0x40021c00
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fb9c 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e267      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d075      	beq.n	80010b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fca:	4b88      	ldr	r3, [pc, #544]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d00c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd6:	4b85      	ldr	r3, [pc, #532]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d112      	bne.n	8001008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe2:	4b82      	ldr	r3, [pc, #520]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fee:	d10b      	bne.n	8001008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d05b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x108>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d157      	bne.n	80010b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e242      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001010:	d106      	bne.n	8001020 <HAL_RCC_OscConfig+0x74>
 8001012:	4b76      	ldr	r3, [pc, #472]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a75      	ldr	r2, [pc, #468]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e01d      	b.n	800105c <HAL_RCC_OscConfig+0xb0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x98>
 800102a:	4b70      	ldr	r3, [pc, #448]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6f      	ldr	r2, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b6d      	ldr	r3, [pc, #436]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a6c      	ldr	r2, [pc, #432]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xb0>
 8001044:	4b69      	ldr	r3, [pc, #420]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a68      	ldr	r2, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b66      	ldr	r3, [pc, #408]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a65      	ldr	r2, [pc, #404]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d013      	beq.n	800108c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fd00 	bl	8000a68 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcfc 	bl	8000a68 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e207      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0xc0>
 800108a:	e014      	b.n	80010b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcec 	bl	8000a68 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fce8 	bl	8000a68 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1f3      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	4b51      	ldr	r3, [pc, #324]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0xe8>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d11c      	bne.n	8001114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d116      	bne.n	8001114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x152>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e1c7      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	e03a      	b.n	800118a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <HAL_RCC_OscConfig+0x244>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fca1 	bl	8000a68 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc9d 	bl	8000a68 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1a8      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4925      	ldr	r1, [pc, #148]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_OscConfig+0x244>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fc80 	bl	8000a68 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116c:	f7ff fc7c 	bl	8000a68 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e187      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d036      	beq.n	8001204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d016      	beq.n	80011cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_RCC_OscConfig+0x248>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a4:	f7ff fc60 	bl	8000a68 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc5c 	bl	8000a68 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e167      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x240>)
 80011c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x200>
 80011ca:	e01b      	b.n	8001204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_RCC_OscConfig+0x248>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fc49 	bl	8000a68 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	e00e      	b.n	80011f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011da:	f7ff fc45 	bl	8000a68 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d907      	bls.n	80011f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e150      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
 80011ec:	40023800 	.word	0x40023800
 80011f0:	42470000 	.word	0x42470000
 80011f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80011fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ea      	bne.n	80011da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8097 	beq.w	8001340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10f      	bne.n	8001242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b7d      	ldr	r3, [pc, #500]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a7c      	ldr	r2, [pc, #496]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b7a      	ldr	r3, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d118      	bne.n	8001280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a73      	ldr	r2, [pc, #460]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fc05 	bl	8000a68 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff fc01 	bl	8000a68 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e10c      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x474>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x2ea>
 8001288:	4b64      	ldr	r3, [pc, #400]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a63      	ldr	r2, [pc, #396]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x324>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b05      	cmp	r3, #5
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x30c>
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a2:	4a5e      	ldr	r2, [pc, #376]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6713      	str	r3, [r2, #112]	; 0x70
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6713      	str	r3, [r2, #112]	; 0x70
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0x324>
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c8:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d015      	beq.n	8001304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fbc6 	bl	8000a68 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fbc2 	bl	8000a68 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e0cb      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0ee      	beq.n	80012e0 <HAL_RCC_OscConfig+0x334>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7ff fbb0 	bl	8000a68 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fbac 	bl	8000a68 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0b5      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a1 	beq.w	800148c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_RCC_OscConfig+0x470>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d05c      	beq.n	8001410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d141      	bne.n	80013e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_RCC_OscConfig+0x478>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fb80 	bl	8000a68 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fb7c 	bl	8000a68 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e087      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	491b      	ldr	r1, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x478>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb55 	bl	8000a68 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb51 	bl	8000a68 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e05c      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_RCC_OscConfig+0x470>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x416>
 80013e0:	e054      	b.n	800148c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x478>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb3e 	bl	8000a68 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb3a 	bl	8000a68 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e045      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_RCC_OscConfig+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x444>
 800140e:	e03d      	b.n	800148c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e038      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000
 8001424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x4ec>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d028      	beq.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d121      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d11a      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800145e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001460:	4293      	cmp	r3, r2
 8001462:	d111      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	3b01      	subs	r3, #1
 8001472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0cc      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b68      	ldr	r3, [pc, #416]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d90c      	bls.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b65      	ldr	r3, [pc, #404]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b8      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	494d      	ldr	r1, [pc, #308]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d044      	beq.n	80015bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d119      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001556:	2b03      	cmp	r3, #3
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e067      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4934      	ldr	r1, [pc, #208]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff fa6c 	bl	8000a68 <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff fa68 	bl	8000a68 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e04f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 020c 	and.w	r2, r3, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1eb      	bne.n	8001594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d20c      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e032      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4916      	ldr	r1, [pc, #88]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	490e      	ldr	r1, [pc, #56]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001622:	f000 f821 	bl	8001668 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490a      	ldr	r1, [pc, #40]	; (800165c <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f91e 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00
 8001658:	40023800 	.word	0x40023800
 800165c:	08005b24 	.word	0x08005b24
 8001660:	20000000 	.word	0x20000000
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800166c:	b090      	sub	sp, #64	; 0x40
 800166e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001680:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d00d      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x40>
 800168c:	2b08      	cmp	r3, #8
 800168e:	f200 80a1 	bhi.w	80017d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x34>
 8001696:	2b04      	cmp	r3, #4
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800169a:	e09b      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_GetSysClockFreq+0x184>)
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016a0:	e09b      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016a6:	e098      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a8:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	2200      	movs	r2, #0
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	627a      	str	r2, [r7, #36]	; 0x24
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016d0:	2100      	movs	r1, #0
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016d4:	fb03 f201 	mul.w	r2, r3, r1
 80016d8:	2300      	movs	r3, #0
 80016da:	fb00 f303 	mul.w	r3, r0, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e2:	fba0 1202 	umull	r1, r2, r0, r2
 80016e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016e8:	460a      	mov	r2, r1
 80016ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80016ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ee:	4413      	add	r3, r2
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	2200      	movs	r2, #0
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	61fa      	str	r2, [r7, #28]
 80016fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001702:	f7fe fd65 	bl	80001d0 <__aeabi_uldivmod>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4613      	mov	r3, r2
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800170e:	e053      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	617a      	str	r2, [r7, #20]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001722:	f04f 0b00 	mov.w	fp, #0
 8001726:	4652      	mov	r2, sl
 8001728:	465b      	mov	r3, fp
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0159      	lsls	r1, r3, #5
 8001734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001738:	0150      	lsls	r0, r2, #5
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	ebb2 080a 	subs.w	r8, r2, sl
 8001742:	eb63 090b 	sbc.w	r9, r3, fp
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800175a:	ebb2 0408 	subs.w	r4, r2, r8
 800175e:	eb63 0509 	sbc.w	r5, r3, r9
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	00eb      	lsls	r3, r5, #3
 800176c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001770:	00e2      	lsls	r2, r4, #3
 8001772:	4614      	mov	r4, r2
 8001774:	461d      	mov	r5, r3
 8001776:	eb14 030a 	adds.w	r3, r4, sl
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	eb45 030b 	adc.w	r3, r5, fp
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800178e:	4629      	mov	r1, r5
 8001790:	028b      	lsls	r3, r1, #10
 8001792:	4621      	mov	r1, r4
 8001794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001798:	4621      	mov	r1, r4
 800179a:	028a      	lsls	r2, r1, #10
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	2200      	movs	r2, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	60fa      	str	r2, [r7, #12]
 80017a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ac:	f7fe fd10 	bl	80001d0 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	3301      	adds	r3, #1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_RCC_GetSysClockFreq+0x184>)
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3740      	adds	r7, #64	; 0x40
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	00f42400 	.word	0x00f42400
 80017f0:	017d7840 	.word	0x017d7840

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_GetHCLKFreq+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001810:	f7ff fff0 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	08005b34 	.word	0x08005b34

08001834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001838:	f7ff ffdc 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0b5b      	lsrs	r3, r3, #13
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	08005b34 	.word	0x08005b34

0800185c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	220f      	movs	r2, #15
 800186a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_RCC_GetClockConfig+0x60>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0207 	and.w	r2, r3, #7
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e041      	b.n	8001956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f839 	bl	800195e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3304      	adds	r3, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f000 f9d8 	bl	8001cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d001      	beq.n	800198c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e04e      	b.n	8001a2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d022      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d01d      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d018      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d009      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d010      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a16:	e007      	b.n	8001a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40000c00 	.word	0x40000c00
 8001a48:	40010400 	.word	0x40010400
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40001800 	.word	0x40001800

08001a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0202 	mvn.w	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8ee 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8e0 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8f1 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0204 	mvn.w	r2, #4
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8c4 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8b6 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8c7 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0208 	mvn.w	r2, #8
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f89a 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f88c 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f89d 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d122      	bne.n	8001bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d11b      	bne.n	8001bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0210 	mvn.w	r2, #16
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2208      	movs	r2, #8
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f870 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f862 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f873 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0201 	mvn.w	r2, #1
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fdca 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f902 	bl	8001e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f838 	bl	8001ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0220 	mvn.w	r2, #32
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8cc 	bl	8001df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <TIM_Base_SetConfig+0x114>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd2:	d00f      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <TIM_Base_SetConfig+0x118>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00b      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <TIM_Base_SetConfig+0x11c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <TIM_Base_SetConfig+0x120>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d003      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <TIM_Base_SetConfig+0x124>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d108      	bne.n	8001d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <TIM_Base_SetConfig+0x114>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02b      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d14:	d027      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a2c      	ldr	r2, [pc, #176]	; (8001dcc <TIM_Base_SetConfig+0x118>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d023      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <TIM_Base_SetConfig+0x11c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <TIM_Base_SetConfig+0x120>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01b      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <TIM_Base_SetConfig+0x124>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d017      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <TIM_Base_SetConfig+0x128>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <TIM_Base_SetConfig+0x12c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00f      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <TIM_Base_SetConfig+0x130>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00b      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <TIM_Base_SetConfig+0x134>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a24      	ldr	r2, [pc, #144]	; (8001dec <TIM_Base_SetConfig+0x138>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <TIM_Base_SetConfig+0x13c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <TIM_Base_SetConfig+0x114>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d003      	beq.n	8001dac <TIM_Base_SetConfig+0xf8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <TIM_Base_SetConfig+0x124>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d103      	bne.n	8001db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	615a      	str	r2, [r3, #20]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40010400 	.word	0x40010400
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40014400 	.word	0x40014400
 8001de4:	40014800 	.word	0x40014800
 8001de8:	40001800 	.word	0x40001800
 8001dec:	40001c00 	.word	0x40001c00
 8001df0:	40002000 	.word	0x40002000

08001df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e03f      	b.n	8001eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fcd6 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2224      	movs	r2, #36	; 0x24
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f929 	bl	80020b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d17c      	bne.n	8001fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_UART_Transmit+0x2c>
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e075      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_UART_Transmit+0x3e>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e06e      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2221      	movs	r2, #33	; 0x21
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f0a:	f7fe fdad 	bl	8000a68 <HAL_GetTick>
 8001f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f24:	d108      	bne.n	8001f38 <HAL_UART_Transmit+0x82>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e003      	b.n	8001f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f48:	e02a      	b.n	8001fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2200      	movs	r2, #0
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f840 	bl	8001fda <UART_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e036      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e007      	b.n	8001f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1cf      	bne.n	8001f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2140      	movs	r1, #64	; 0x40
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f810 	bl	8001fda <UART_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e006      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b090      	sub	sp, #64	; 0x40
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fea:	e050      	b.n	800208e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d04c      	beq.n	800208e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <UART_WaitOnFlagUntilTimeout+0x30>
 8001ffa:	f7fe fd35 	bl	8000a68 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002006:	429a      	cmp	r2, r3
 8002008:	d241      	bcs.n	800208e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	330c      	adds	r3, #12
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800202a:	637a      	str	r2, [r7, #52]	; 0x34
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e5      	bne.n	800200a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3314      	adds	r3, #20
 8002044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	e853 3f00 	ldrex	r3, [r3]
 800204c:	613b      	str	r3, [r7, #16]
   return(result);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3314      	adds	r3, #20
 800205c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800205e:	623a      	str	r2, [r7, #32]
 8002060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	69f9      	ldr	r1, [r7, #28]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	61bb      	str	r3, [r7, #24]
   return(result);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e5      	bne.n	800203e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e00f      	b.n	80020ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	429a      	cmp	r2, r3
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d09f      	beq.n	8001fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3740      	adds	r7, #64	; 0x40
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b0c0      	sub	sp, #256	; 0x100
 80020be:	af00      	add	r7, sp, #0
 80020c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	ea40 0301 	orr.w	r3, r0, r1
 80020e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002110:	f021 010c 	bic.w	r1, r1, #12
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800211e:	430b      	orrs	r3, r1
 8002120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	6999      	ldr	r1, [r3, #24]
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	ea40 0301 	orr.w	r3, r0, r1
 800213e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <UART_SetConfig+0x2cc>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d005      	beq.n	8002158 <UART_SetConfig+0xa0>
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b8d      	ldr	r3, [pc, #564]	; (8002388 <UART_SetConfig+0x2d0>)
 8002154:	429a      	cmp	r2, r3
 8002156:	d104      	bne.n	8002162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002158:	f7ff fb6c 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 800215c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002160:	e003      	b.n	800216a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002162:	f7ff fb53 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8002166:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002174:	f040 810c 	bne.w	8002390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217c:	2200      	movs	r2, #0
 800217e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	1891      	adds	r1, r2, r2
 8002190:	65b9      	str	r1, [r7, #88]	; 0x58
 8002192:	415b      	adcs	r3, r3
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800219a:	4621      	mov	r1, r4
 800219c:	eb12 0801 	adds.w	r8, r2, r1
 80021a0:	4629      	mov	r1, r5
 80021a2:	eb43 0901 	adc.w	r9, r3, r1
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ba:	4690      	mov	r8, r2
 80021bc:	4699      	mov	r9, r3
 80021be:	4623      	mov	r3, r4
 80021c0:	eb18 0303 	adds.w	r3, r8, r3
 80021c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021c8:	462b      	mov	r3, r5
 80021ca:	eb49 0303 	adc.w	r3, r9, r3
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021e6:	460b      	mov	r3, r1
 80021e8:	18db      	adds	r3, r3, r3
 80021ea:	653b      	str	r3, [r7, #80]	; 0x50
 80021ec:	4613      	mov	r3, r2
 80021ee:	eb42 0303 	adc.w	r3, r2, r3
 80021f2:	657b      	str	r3, [r7, #84]	; 0x54
 80021f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021fc:	f7fd ffe8 	bl	80001d0 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <UART_SetConfig+0x2d4>)
 8002206:	fba3 2302 	umull	r2, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	011c      	lsls	r4, r3, #4
 800220e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002212:	2200      	movs	r2, #0
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002218:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800221c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002220:	4642      	mov	r2, r8
 8002222:	464b      	mov	r3, r9
 8002224:	1891      	adds	r1, r2, r2
 8002226:	64b9      	str	r1, [r7, #72]	; 0x48
 8002228:	415b      	adcs	r3, r3
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800222c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002230:	4641      	mov	r1, r8
 8002232:	eb12 0a01 	adds.w	sl, r2, r1
 8002236:	4649      	mov	r1, r9
 8002238:	eb43 0b01 	adc.w	fp, r3, r1
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800224c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002250:	4692      	mov	sl, r2
 8002252:	469b      	mov	fp, r3
 8002254:	4643      	mov	r3, r8
 8002256:	eb1a 0303 	adds.w	r3, sl, r3
 800225a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800225e:	464b      	mov	r3, r9
 8002260:	eb4b 0303 	adc.w	r3, fp, r3
 8002264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002274:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800227c:	460b      	mov	r3, r1
 800227e:	18db      	adds	r3, r3, r3
 8002280:	643b      	str	r3, [r7, #64]	; 0x40
 8002282:	4613      	mov	r3, r2
 8002284:	eb42 0303 	adc.w	r3, r2, r3
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
 800228a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800228e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002292:	f7fd ff9d 	bl	80001d0 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4611      	mov	r1, r2
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <UART_SetConfig+0x2d4>)
 800229e:	fba3 2301 	umull	r2, r3, r3, r1
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2264      	movs	r2, #100	; 0x64
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	1acb      	subs	r3, r1, r3
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <UART_SetConfig+0x2d4>)
 80022b4:	fba3 2302 	umull	r2, r3, r3, r2
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c0:	441c      	add	r4, r3
 80022c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	1891      	adds	r1, r2, r2
 80022da:	63b9      	str	r1, [r7, #56]	; 0x38
 80022dc:	415b      	adcs	r3, r3
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022e4:	4641      	mov	r1, r8
 80022e6:	1851      	adds	r1, r2, r1
 80022e8:	6339      	str	r1, [r7, #48]	; 0x30
 80022ea:	4649      	mov	r1, r9
 80022ec:	414b      	adcs	r3, r1
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022fc:	4659      	mov	r1, fp
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002306:	4651      	mov	r1, sl
 8002308:	00ca      	lsls	r2, r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4603      	mov	r3, r0
 8002310:	4642      	mov	r2, r8
 8002312:	189b      	adds	r3, r3, r2
 8002314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002318:	464b      	mov	r3, r9
 800231a:	460a      	mov	r2, r1
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002330:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002338:	460b      	mov	r3, r1
 800233a:	18db      	adds	r3, r3, r3
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	4613      	mov	r3, r2
 8002340:	eb42 0303 	adc.w	r3, r2, r3
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800234a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800234e:	f7fd ff3f 	bl	80001d0 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <UART_SetConfig+0x2d4>)
 8002358:	fba3 1302 	umull	r1, r3, r3, r2
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	2164      	movs	r1, #100	; 0x64
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	3332      	adds	r3, #50	; 0x32
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <UART_SetConfig+0x2d4>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4422      	add	r2, r4
 800237e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002380:	e105      	b.n	800258e <UART_SetConfig+0x4d6>
 8002382:	bf00      	nop
 8002384:	40011000 	.word	0x40011000
 8002388:	40011400 	.word	0x40011400
 800238c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002394:	2200      	movs	r2, #0
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800239a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800239e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023a2:	4642      	mov	r2, r8
 80023a4:	464b      	mov	r3, r9
 80023a6:	1891      	adds	r1, r2, r2
 80023a8:	6239      	str	r1, [r7, #32]
 80023aa:	415b      	adcs	r3, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023b2:	4641      	mov	r1, r8
 80023b4:	1854      	adds	r4, r2, r1
 80023b6:	4649      	mov	r1, r9
 80023b8:	eb43 0501 	adc.w	r5, r3, r1
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	00eb      	lsls	r3, r5, #3
 80023c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ca:	00e2      	lsls	r2, r4, #3
 80023cc:	4614      	mov	r4, r2
 80023ce:	461d      	mov	r5, r3
 80023d0:	4643      	mov	r3, r8
 80023d2:	18e3      	adds	r3, r4, r3
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023d8:	464b      	mov	r3, r9
 80023da:	eb45 0303 	adc.w	r3, r5, r3
 80023de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023fe:	4629      	mov	r1, r5
 8002400:	008b      	lsls	r3, r1, #2
 8002402:	4621      	mov	r1, r4
 8002404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002408:	4621      	mov	r1, r4
 800240a:	008a      	lsls	r2, r1, #2
 800240c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002410:	f7fd fede 	bl	80001d0 <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <UART_SetConfig+0x4e4>)
 800241a:	fba3 2302 	umull	r2, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	011c      	lsls	r4, r3, #4
 8002422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800242c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002434:	4642      	mov	r2, r8
 8002436:	464b      	mov	r3, r9
 8002438:	1891      	adds	r1, r2, r2
 800243a:	61b9      	str	r1, [r7, #24]
 800243c:	415b      	adcs	r3, r3
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002444:	4641      	mov	r1, r8
 8002446:	1851      	adds	r1, r2, r1
 8002448:	6139      	str	r1, [r7, #16]
 800244a:	4649      	mov	r1, r9
 800244c:	414b      	adcs	r3, r1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800245c:	4659      	mov	r1, fp
 800245e:	00cb      	lsls	r3, r1, #3
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002466:	4651      	mov	r1, sl
 8002468:	00ca      	lsls	r2, r1, #3
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	4603      	mov	r3, r0
 8002470:	4642      	mov	r2, r8
 8002472:	189b      	adds	r3, r3, r2
 8002474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002478:	464b      	mov	r3, r9
 800247a:	460a      	mov	r2, r1
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	67bb      	str	r3, [r7, #120]	; 0x78
 800248e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800249c:	4649      	mov	r1, r9
 800249e:	008b      	lsls	r3, r1, #2
 80024a0:	4641      	mov	r1, r8
 80024a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a6:	4641      	mov	r1, r8
 80024a8:	008a      	lsls	r2, r1, #2
 80024aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024ae:	f7fd fe8f 	bl	80001d0 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <UART_SetConfig+0x4e4>)
 80024b8:	fba3 1302 	umull	r1, r3, r3, r2
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	2164      	movs	r1, #100	; 0x64
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	3332      	adds	r3, #50	; 0x32
 80024ca:	4a34      	ldr	r2, [pc, #208]	; (800259c <UART_SetConfig+0x4e4>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d6:	441c      	add	r4, r3
 80024d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024dc:	2200      	movs	r2, #0
 80024de:	673b      	str	r3, [r7, #112]	; 0x70
 80024e0:	677a      	str	r2, [r7, #116]	; 0x74
 80024e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024e6:	4642      	mov	r2, r8
 80024e8:	464b      	mov	r3, r9
 80024ea:	1891      	adds	r1, r2, r2
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	415b      	adcs	r3, r3
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f6:	4641      	mov	r1, r8
 80024f8:	1851      	adds	r1, r2, r1
 80024fa:	6039      	str	r1, [r7, #0]
 80024fc:	4649      	mov	r1, r9
 80024fe:	414b      	adcs	r3, r1
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800250e:	4659      	mov	r1, fp
 8002510:	00cb      	lsls	r3, r1, #3
 8002512:	4651      	mov	r1, sl
 8002514:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002518:	4651      	mov	r1, sl
 800251a:	00ca      	lsls	r2, r1, #3
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	4603      	mov	r3, r0
 8002522:	4642      	mov	r2, r8
 8002524:	189b      	adds	r3, r3, r2
 8002526:	66bb      	str	r3, [r7, #104]	; 0x68
 8002528:	464b      	mov	r3, r9
 800252a:	460a      	mov	r2, r1
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	663b      	str	r3, [r7, #96]	; 0x60
 800253c:	667a      	str	r2, [r7, #100]	; 0x64
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800254a:	4649      	mov	r1, r9
 800254c:	008b      	lsls	r3, r1, #2
 800254e:	4641      	mov	r1, r8
 8002550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002554:	4641      	mov	r1, r8
 8002556:	008a      	lsls	r2, r1, #2
 8002558:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800255c:	f7fd fe38 	bl	80001d0 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <UART_SetConfig+0x4e4>)
 8002566:	fba3 1302 	umull	r1, r3, r3, r2
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2164      	movs	r1, #100	; 0x64
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	3332      	adds	r3, #50	; 0x32
 8002578:	4a08      	ldr	r2, [pc, #32]	; (800259c <UART_SetConfig+0x4e4>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4422      	add	r2, r4
 800258c:	609a      	str	r2, [r3, #8]
}
 800258e:	bf00      	nop
 8002590:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002594:	46bd      	mov	sp, r7
 8002596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800259a:	bf00      	nop
 800259c:	51eb851f 	.word	0x51eb851f

080025a0 <__NVIC_SetPriority>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Handler+0x1c>)
 80025fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025fc:	f002 f89c 	bl	8004738 <xTaskGetSchedulerState>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002606:	f002 febf 	bl	8005388 <xPortSysTickHandler>
  }
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002618:	2100      	movs	r1, #0
 800261a:	f06f 0004 	mvn.w	r0, #4
 800261e:	f7ff ffbf 	bl	80025a0 <__NVIC_SetPriority>
#endif
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800262e:	f3ef 8305 	mrs	r3, IPSR
 8002632:	603b      	str	r3, [r7, #0]
  return(result);
 8002634:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800263a:	f06f 0305 	mvn.w	r3, #5
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	e00c      	b.n	800265c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <osKernelInitialize+0x44>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <osKernelInitialize+0x44>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	e002      	b.n	800265c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2000012c 	.word	0x2000012c

08002670 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002676:	f3ef 8305 	mrs	r3, IPSR
 800267a:	603b      	str	r3, [r7, #0]
  return(result);
 800267c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002682:	f06f 0305 	mvn.w	r3, #5
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	e010      	b.n	80026ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <osKernelStart+0x48>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d109      	bne.n	80026a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002692:	f7ff ffbf 	bl	8002614 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <osKernelStart+0x48>)
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800269c:	f001 fb52 	bl	8003d44 <vTaskStartScheduler>
      stat = osOK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	e002      	b.n	80026ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000012c 	.word	0x2000012c

080026bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026cc:	f3ef 8305 	mrs	r3, IPSR
 80026d0:	617b      	str	r3, [r7, #20]
  return(result);
 80026d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d17e      	bne.n	80027d6 <osThreadNew+0x11a>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d07b      	beq.n	80027d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80026e2:	2318      	movs	r3, #24
 80026e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d045      	beq.n	8002782 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <osThreadNew+0x48>
        name = attr->name;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <osThreadNew+0x6e>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b38      	cmp	r3, #56	; 0x38
 800271c:	d805      	bhi.n	800272a <osThreadNew+0x6e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <osThreadNew+0x72>
        return (NULL);
 800272a:	2300      	movs	r3, #0
 800272c:	e054      	b.n	80027d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00e      	beq.n	8002764 <osThreadNew+0xa8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2bbb      	cmp	r3, #187	; 0xbb
 800274c:	d90a      	bls.n	8002764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <osThreadNew+0xa8>
        mem = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e010      	b.n	8002786 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10c      	bne.n	8002786 <osThreadNew+0xca>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <osThreadNew+0xca>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <osThreadNew+0xca>
          mem = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	e001      	b.n	8002786 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d110      	bne.n	80027ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002794:	9202      	str	r2, [sp, #8]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a3a      	ldr	r2, [r7, #32]
 80027a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f001 f8e2 	bl	800396c <xTaskCreateStatic>
 80027a8:	4603      	mov	r3, r0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	e013      	b.n	80027d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d110      	bne.n	80027d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f001 f92d 	bl	8003a26 <xTaskCreate>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <osThreadNew+0x11a>
            hTask = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027d6:	693b      	ldr	r3, [r7, #16]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e8:	f3ef 8305 	mrs	r3, IPSR
 80027ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80027ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <osDelay+0x1c>
    stat = osErrorISR;
 80027f4:	f06f 0305 	mvn.w	r3, #5
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e007      	b.n	800280c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 fa68 	bl	8003cdc <vTaskDelay>
    }
  }

  return (stat);
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002822:	f3ef 8305 	mrs	r3, IPSR
 8002826:	60fb      	str	r3, [r7, #12]
  return(result);
 8002828:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800282a:	2b00      	cmp	r3, #0
 800282c:	d12d      	bne.n	800288a <osEventFlagsNew+0x74>
    mem = -1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <osEventFlagsNew+0x3a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b1f      	cmp	r3, #31
 8002848:	d902      	bls.n	8002850 <osEventFlagsNew+0x3a>
        mem = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e00c      	b.n	800286a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <osEventFlagsNew+0x54>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <osEventFlagsNew+0x54>
          mem = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e001      	b.n	800286a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f8eb 	bl	8002a50 <xEventGroupCreateStatic>
 800287a:	6178      	str	r0, [r7, #20]
 800287c:	e005      	b.n	800288a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002884:	f000 f91b 	bl	8002abe <xEventGroupCreate>
 8002888:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800288a:	697b      	ldr	r3, [r7, #20]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <osEventFlagsSet+0x1e>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80028b2:	f06f 0303 	mvn.w	r3, #3
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e028      	b.n	800290c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ba:	f3ef 8305 	mrs	r3, IPSR
 80028be:	60fb      	str	r3, [r7, #12]
  return(result);
 80028c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01d      	beq.n	8002902 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	461a      	mov	r2, r3
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	6938      	ldr	r0, [r7, #16]
 80028d4:	f000 fa96 	bl	8002e04 <xEventGroupSetBitsFromISR>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80028de:	f06f 0302 	mvn.w	r3, #2
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e012      	b.n	800290c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <osEventFlagsSet+0x78>
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <osEventFlagsSet+0x84>)
 80028f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	e004      	b.n	800290c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	6938      	ldr	r0, [r7, #16]
 8002906:	f000 f9c3 	bl	8002c90 <xEventGroupSetBits>
 800290a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800290c:	697b      	ldr	r3, [r7, #20]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000ed04 	.word	0xe000ed04

0800291c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <osEventFlagsWait+0x22>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800293e:	f06f 0303 	mvn.w	r3, #3
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e04b      	b.n	80029de <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002946:	f3ef 8305 	mrs	r3, IPSR
 800294a:	617b      	str	r3, [r7, #20]
  return(result);
 800294c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8002952:	f06f 0305 	mvn.w	r3, #5
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	e041      	b.n	80029de <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	e001      	b.n	800296e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	e001      	b.n	8002982 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800297e:	2301      	movs	r3, #1
 8002980:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	69b8      	ldr	r0, [r7, #24]
 800298e:	f000 f8b1 	bl	8002af4 <xEventGroupWaitBits>
 8002992:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4013      	ands	r3, r2
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d019      	beq.n	80029de <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80029b0:	f06f 0301 	mvn.w	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e012      	b.n	80029de <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80029b8:	f06f 0302 	mvn.w	r3, #2
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e00e      	b.n	80029de <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80029d0:	f06f 0301 	mvn.w	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e002      	b.n	80029de <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80029d8:	f06f 0302 	mvn.w	r3, #2
 80029dc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80029de:	69fb      	ldr	r3, [r7, #28]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <vApplicationGetIdleTaskMemory+0x2c>)
 80029f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <vApplicationGetIdleTaskMemory+0x30>)
 80029fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000130 	.word	0x20000130
 8002a18:	200001ec 	.word	0x200001ec

08002a1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <vApplicationGetTimerTaskMemory+0x30>)
 8002a32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	200003ec 	.word	0x200003ec
 8002a4c:	200004a8 	.word	0x200004a8

08002a50 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002a74:	2320      	movs	r3, #32
 8002a76:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d00a      	beq.n	8002a94 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	60fb      	str	r3, [r7, #12]
}
 8002a90:	bf00      	nop
 8002a92:	e7fe      	b.n	8002a92 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f9bf 	bl	8002e2c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002ab4:	697b      	ldr	r3, [r7, #20]
	}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002ac4:	2020      	movs	r0, #32
 8002ac6:	f002 fcef 	bl	80054a8 <pvPortMalloc>
 8002aca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f9a5 	bl	8002e2c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002ae8:	687b      	ldr	r3, [r7, #4]
	}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b090      	sub	sp, #64	; 0x40
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xEventGroupWaitBits+0x36>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	623b      	str	r3, [r7, #32]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <xEventGroupWaitBits+0x56>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	61fb      	str	r3, [r7, #28]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xEventGroupWaitBits+0x72>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	61bb      	str	r3, [r7, #24]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b66:	f001 fde7 	bl	8004738 <xTaskGetSchedulerState>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <xEventGroupWaitBits+0x82>
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <xEventGroupWaitBits+0x86>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xEventGroupWaitBits+0x88>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	617b      	str	r3, [r7, #20]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8002b96:	f001 f945 	bl	8003e24 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba6:	f000 f90b 	bl	8002dc0 <prvTestWaitCondition>
 8002baa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00e      	beq.n	8002bd0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d028      	beq.n	8002c12 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e020      	b.n	8002c12 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d104      	bne.n	8002be0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bde:	e018      	b.n	8002c12 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	1d18      	adds	r0, r3, #4
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	4313      	orrs	r3, r2
 8002c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f001 fb09 	bl	8004220 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002c12:	f001 f915 	bl	8003e40 <xTaskResumeAll>
 8002c16:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d031      	beq.n	8002c82 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <xEventGroupWaitBits+0x198>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002c34:	f001 fe0c 	bl	8004850 <uxTaskResetEventItemValue>
 8002c38:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11a      	bne.n	8002c7a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8002c44:	f002 fb0e 	bl	8005264 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c54:	f000 f8b4 	bl	8002dc0 <prvTestWaitCondition>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002c76:	f002 fb25 	bl	80052c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3740      	adds	r7, #64	; 0x40
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08e      	sub	sp, #56	; 0x38
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xEventGroupSetBits+0x32>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	613b      	str	r3, [r7, #16]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <xEventGroupSetBits+0x52>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60fb      	str	r3, [r7, #12]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3308      	adds	r3, #8
 8002cec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002cee:	f001 f899 	bl	8003e24 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002d04:	e03c      	b.n	8002d80 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d1c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d24:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d108      	bne.n	8002d42 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d40:	e008      	b.n	8002d54 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d101      	bne.n	8002d54 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d010      	beq.n	8002d7c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d74:	4619      	mov	r1, r3
 8002d76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d78:	f001 fb1e 	bl	80043b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1be      	bne.n	8002d06 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002d96:	f001 f853 	bl	8003e40 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3738      	adds	r7, #56	; 0x38
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff6c 	bl	8002c90 <xEventGroupSetBits>
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e007      	b.n	8002df6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d101      	bne.n	8002df6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002df6:	697b      	ldr	r3, [r7, #20]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	4804      	ldr	r0, [pc, #16]	; (8002e28 <xEventGroupSetBitsFromISR+0x24>)
 8002e18:	f002 f8d4 	bl	8004fc4 <xTimerPendFunctionCallFromISR>
 8002e1c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8002e1e:	697b      	ldr	r3, [r7, #20]
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	08002da7 	.word	0x08002da7

08002e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f103 0208 	add.w	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 0208 	add.w	r2, r3, #8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f103 0208 	add.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d103      	bne.n	8002eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e00c      	b.n	8002f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e002      	b.n	8002efc <vListInsert+0x2e>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d2f6      	bcs.n	8002ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6852      	ldr	r2, [r2, #4]
 8002f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d103      	bne.n	8002f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericReset+0x2a>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	60bb      	str	r3, [r7, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fbe:	f002 f951 	bl	8005264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d114      	bne.n	800303e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3310      	adds	r3, #16
 8003020:	4618      	mov	r0, r3
 8003022:	f001 f965 	bl	80042f0 <xTaskRemoveFromEventList>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <xQueueGenericReset+0xcc>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	e009      	b.n	8003052 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3310      	adds	r3, #16
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fef2 	bl	8002e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3324      	adds	r3, #36	; 0x24
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff feed 	bl	8002e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003052:	f002 f937 	bl	80052c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <xQueueGenericCreateStatic+0x52>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <xQueueGenericCreateStatic+0x56>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueGenericCreateStatic+0x58>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	623b      	str	r3, [r7, #32]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <xQueueGenericCreateStatic+0x7e>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <xQueueGenericCreateStatic+0x82>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <xQueueGenericCreateStatic+0x84>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	61fb      	str	r3, [r7, #28]
}
 80030fe:	bf00      	nop
 8003100:	e7fe      	b.n	8003100 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003102:	2350      	movs	r3, #80	; 0x50
 8003104:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b50      	cmp	r3, #80	; 0x50
 800310a:	d00a      	beq.n	8003122 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	61bb      	str	r3, [r7, #24]
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003122:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003136:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f805 	bl	8003154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800314c:	4618      	mov	r0, r3
 800314e:	3730      	adds	r7, #48	; 0x30
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e002      	b.n	8003176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003182:	2101      	movs	r1, #1
 8003184:	69b8      	ldr	r0, [r7, #24]
 8003186:	f7ff ff05 	bl	8002f94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	; 0x38
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031aa:	2300      	movs	r3, #0
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xQueueGenericSend+0x32>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <xQueueGenericSend+0x40>
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <xQueueGenericSend+0x44>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <xQueueGenericSend+0x46>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <xQueueGenericSend+0x60>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d103      	bne.n	800320a <xQueueGenericSend+0x6e>
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <xQueueGenericSend+0x72>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <xQueueGenericSend+0x74>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueGenericSend+0x8e>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	623b      	str	r3, [r7, #32]
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800322a:	f001 fa85 	bl	8004738 <xTaskGetSchedulerState>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <xQueueGenericSend+0x9e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <xQueueGenericSend+0xa2>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <xQueueGenericSend+0xa4>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueGenericSend+0xbe>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	61fb      	str	r3, [r7, #28]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800325a:	f002 f803 	bl	8005264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <xQueueGenericSend+0xd4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d129      	bne.n	80032c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003276:	f000 fa0b 	bl	8003690 <prvCopyDataToQueue>
 800327a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f831 	bl	80042f0 <xTaskRemoveFromEventList>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <xQueueGenericSend+0x1f8>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	e00a      	b.n	80032bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <xQueueGenericSend+0x1f8>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032bc:	f002 f802 	bl	80052c4 <vPortExitCritical>
				return pdPASS;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e063      	b.n	800338c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ca:	f001 fffb 	bl	80052c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e05c      	b.n	800338c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 f8cd 	bl	800447c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032e6:	f001 ffed 	bl	80052c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ea:	f000 fd9b 	bl	8003e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ee:	f001 ffb9 	bl	8005264 <vPortEnterCritical>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d103      	bne.n	8003308 <xQueueGenericSend+0x16c>
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueGenericSend+0x182>
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800331e:	f001 ffd1 	bl	80052c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003322:	1d3a      	adds	r2, r7, #4
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f001 f8bc 	bl	80044a8 <xTaskCheckForTimeOut>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d124      	bne.n	8003380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003338:	f000 faa2 	bl	8003880 <prvIsQueueFull>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	3310      	adds	r3, #16
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 ff44 	bl	80041d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003352:	f000 fa2d 	bl	80037b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003356:	f000 fd73 	bl	8003e40 <xTaskResumeAll>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af7c 	bne.w	800325a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <xQueueGenericSend+0x1f8>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	e772      	b.n	800325a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003376:	f000 fa1b 	bl	80037b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800337a:	f000 fd61 	bl	8003e40 <xTaskResumeAll>
 800337e:	e76c      	b.n	800325a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003382:	f000 fa15 	bl	80037b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003386:	f000 fd5b 	bl	8003e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800338a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800338c:	4618      	mov	r0, r3
 800338e:	3738      	adds	r7, #56	; 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b090      	sub	sp, #64	; 0x40
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <xQueueGenericSendFromISR+0x3c>
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <xQueueGenericSendFromISR+0x40>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xQueueGenericSendFromISR+0x42>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d103      	bne.n	8003402 <xQueueGenericSendFromISR+0x6a>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <xQueueGenericSendFromISR+0x6e>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <xQueueGenericSendFromISR+0x70>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	623b      	str	r3, [r7, #32]
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003422:	f002 f801 	bl	8005428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003426:	f3ef 8211 	mrs	r2, BASEPRI
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	61fa      	str	r2, [r7, #28]
 800343c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800343e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	429a      	cmp	r2, r3
 800344c:	d302      	bcc.n	8003454 <xQueueGenericSendFromISR+0xbc>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d12f      	bne.n	80034b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800345a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800346a:	f000 f911 	bl	8003690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800346e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d112      	bne.n	800349e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d016      	beq.n	80034ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	4618      	mov	r0, r3
 8003486:	f000 ff33 	bl	80042f0 <xTaskRemoveFromEventList>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e007      	b.n	80034ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800349e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034a2:	3301      	adds	r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	b25a      	sxtb	r2, r3
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034ae:	2301      	movs	r3, #1
 80034b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80034b2:	e001      	b.n	80034b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3740      	adds	r7, #64	; 0x40
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08c      	sub	sp, #48	; 0x30
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xQueueReceive+0x30>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	623b      	str	r3, [r7, #32]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <xQueueReceive+0x3e>
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <xQueueReceive+0x42>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <xQueueReceive+0x44>
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueReceive+0x5e>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61fb      	str	r3, [r7, #28]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800352e:	f001 f903 	bl	8004738 <xTaskGetSchedulerState>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <xQueueReceive+0x6e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <xQueueReceive+0x72>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <xQueueReceive+0x74>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <xQueueReceive+0x8e>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	61bb      	str	r3, [r7, #24]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800355e:	f001 fe81 	bl	8005264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01f      	beq.n	80035ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003572:	f000 f8f7 	bl	8003764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1e5a      	subs	r2, r3, #1
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00f      	beq.n	80035a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	3310      	adds	r3, #16
 800358a:	4618      	mov	r0, r3
 800358c:	f000 feb0 	bl	80042f0 <xTaskRemoveFromEventList>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <xQueueReceive+0x1bc>)
 8003598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035a6:	f001 fe8d 	bl	80052c4 <vPortExitCritical>
				return pdPASS;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e069      	b.n	8003682 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035b4:	f001 fe86 	bl	80052c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e062      	b.n	8003682 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035c2:	f107 0310 	add.w	r3, r7, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 ff58 	bl	800447c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035d0:	f001 fe78 	bl	80052c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035d4:	f000 fc26 	bl	8003e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035d8:	f001 fe44 	bl	8005264 <vPortEnterCritical>
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d103      	bne.n	80035f2 <xQueueReceive+0x122>
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d103      	bne.n	8003608 <xQueueReceive+0x138>
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003608:	f001 fe5c 	bl	80052c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800360c:	1d3a      	adds	r2, r7, #4
 800360e:	f107 0310 	add.w	r3, r7, #16
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 ff47 	bl	80044a8 <xTaskCheckForTimeOut>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d123      	bne.n	8003668 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003622:	f000 f917 	bl	8003854 <prvIsQueueEmpty>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fdcf 	bl	80041d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800363a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363c:	f000 f8b8 	bl	80037b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003640:	f000 fbfe 	bl	8003e40 <xTaskResumeAll>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d189      	bne.n	800355e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <xQueueReceive+0x1bc>)
 800364c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	e780      	b.n	800355e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800365c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365e:	f000 f8a7 	bl	80037b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003662:	f000 fbed 	bl	8003e40 <xTaskResumeAll>
 8003666:	e77a      	b.n	800355e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366a:	f000 f8a1 	bl	80037b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800366e:	f000 fbe7 	bl	8003e40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003674:	f000 f8ee 	bl	8003854 <prvIsQueueEmpty>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	f43f af6f 	beq.w	800355e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003682:	4618      	mov	r0, r3
 8003684:	3730      	adds	r7, #48	; 0x30
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d14d      	bne.n	8003752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 f85a 	bl	8004774 <xTaskPriorityDisinherit>
 80036c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	e043      	b.n	8003752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d119      	bne.n	8003704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6858      	ldr	r0, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	461a      	mov	r2, r3
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	f002 f8f4 	bl	80058c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	441a      	add	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d32b      	bcc.n	8003752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	e026      	b.n	8003752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68d8      	ldr	r0, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	461a      	mov	r2, r3
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	f002 f8da 	bl	80058c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	425b      	negs	r3, r3
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	425b      	negs	r3, r3
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d105      	bne.n	8003752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3b01      	subs	r3, #1
 8003750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800375a:	697b      	ldr	r3, [r7, #20]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	441a      	add	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d303      	bcc.n	8003798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	461a      	mov	r2, r3
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f002 f890 	bl	80058c8 <memcpy>
	}
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037b8:	f001 fd54 	bl	8005264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037c4:	e011      	b.n	80037ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3324      	adds	r3, #36	; 0x24
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fd8c 	bl	80042f0 <xTaskRemoveFromEventList>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037de:	f000 fec5 	bl	800456c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	dce9      	bgt.n	80037c6 <prvUnlockQueue+0x16>
 80037f2:	e000      	b.n	80037f6 <prvUnlockQueue+0x46>
					break;
 80037f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037fe:	f001 fd61 	bl	80052c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003802:	f001 fd2f 	bl	8005264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800380c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800380e:	e011      	b.n	8003834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d012      	beq.n	800383e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3310      	adds	r3, #16
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd67 	bl	80042f0 <xTaskRemoveFromEventList>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003828:	f000 fea0 	bl	800456c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800382c:	7bbb      	ldrb	r3, [r7, #14]
 800382e:	3b01      	subs	r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003838:	2b00      	cmp	r3, #0
 800383a:	dce9      	bgt.n	8003810 <prvUnlockQueue+0x60>
 800383c:	e000      	b.n	8003840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800383e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	22ff      	movs	r2, #255	; 0xff
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003848:	f001 fd3c 	bl	80052c4 <vPortExitCritical>
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800385c:	f001 fd02 	bl	8005264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e001      	b.n	8003872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003872:	f001 fd27 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003888:	f001 fcec 	bl	8005264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	429a      	cmp	r2, r3
 8003896:	d102      	bne.n	800389e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e001      	b.n	80038a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038a2:	f001 fd0f 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e014      	b.n	80038ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038c0:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <vQueueAddToRegistry+0x50>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <vQueueAddToRegistry+0x50>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <vQueueAddToRegistry+0x50>)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038e2:	e006      	b.n	80038f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b07      	cmp	r3, #7
 80038ee:	d9e7      	bls.n	80038c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	200008a8 	.word	0x200008a8

08003904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003914:	f001 fca6 	bl	8005264 <vPortEnterCritical>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800391e:	b25b      	sxtb	r3, r3
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d103      	bne.n	800392e <vQueueWaitForMessageRestricted+0x2a>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003934:	b25b      	sxtb	r3, r3
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d103      	bne.n	8003944 <vQueueWaitForMessageRestricted+0x40>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003944:	f001 fcbe 	bl	80052c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fc9d 	bl	8004298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff ff26 	bl	80037b0 <prvUnlockQueue>
	}
 8003964:	bf00      	nop
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af04      	add	r7, sp, #16
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	623b      	str	r3, [r7, #32]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	61fb      	str	r3, [r7, #28]
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b2:	23bc      	movs	r3, #188	; 0xbc
 80039b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2bbc      	cmp	r3, #188	; 0xbc
 80039ba:	d00a      	beq.n	80039d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	61bb      	str	r3, [r7, #24]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01e      	beq.n	8003a18 <xTaskCreateStatic+0xac>
 80039da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f2:	2300      	movs	r3, #0
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f850 	bl	8003ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a12:	f000 f8f3 	bl	8003bfc <prvAddNewTaskToReadyList>
 8003a16:	e001      	b.n	8003a1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a1c:	697b      	ldr	r3, [r7, #20]
	}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b08c      	sub	sp, #48	; 0x30
 8003a2a:	af04      	add	r7, sp, #16
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fd34 	bl	80054a8 <pvPortMalloc>
 8003a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a48:	20bc      	movs	r0, #188	; 0xbc
 8003a4a:	f001 fd2d 	bl	80054a8 <pvPortMalloc>
 8003a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5c:	e005      	b.n	8003a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	f001 fdee 	bl	8005640 <vPortFree>
 8003a64:	e001      	b.n	8003a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d017      	beq.n	8003aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f80e 	bl	8003ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a94:	69f8      	ldr	r0, [r7, #28]
 8003a96:	f000 f8b1 	bl	8003bfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e002      	b.n	8003aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	21a5      	movs	r1, #165	; 0xa5
 8003aca:	f001 ff0b 	bl	80058e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f023 0307 	bic.w	r3, r3, #7
 8003ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	617b      	str	r3, [r7, #20]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01f      	beq.n	8003b4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e012      	b.n	8003b3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	7819      	ldrb	r1, [r3, #0]
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	3334      	adds	r3, #52	; 0x34
 8003b24:	460a      	mov	r2, r1
 8003b26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d9e9      	bls.n	8003b14 <prvInitialiseNewTask+0x64>
 8003b40:	e000      	b.n	8003b44 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b4c:	e003      	b.n	8003b56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2b37      	cmp	r3, #55	; 0x37
 8003b5a:	d901      	bls.n	8003b60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b5c:	2337      	movs	r3, #55	; 0x37
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	2200      	movs	r2, #0
 8003b70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	3304      	adds	r3, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff f978 	bl	8002e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	3318      	adds	r3, #24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f973 	bl	8002e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	3354      	adds	r3, #84	; 0x54
 8003bb0:	2260      	movs	r2, #96	; 0x60
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fe95 	bl	80058e4 <memset>
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <prvInitialiseNewTask+0x140>)
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <prvInitialiseNewTask+0x144>)
 8003bc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	4a0b      	ldr	r2, [pc, #44]	; (8003bf8 <prvInitialiseNewTask+0x148>)
 8003bca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	69b8      	ldr	r0, [r7, #24]
 8003bd2:	f001 fa17 	bl	8005004 <pxPortInitialiseStack>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08005b5c 	.word	0x08005b5c
 8003bf4:	08005b7c 	.word	0x08005b7c
 8003bf8:	08005b3c 	.word	0x08005b3c

08003bfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c04:	f001 fb2e 	bl	8005264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <prvAddNewTaskToReadyList+0xc4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <prvAddNewTaskToReadyList+0xc4>)
 8003c10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c12:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <prvAddNewTaskToReadyList+0xc8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c1a:	4a2a      	ldr	r2, [pc, #168]	; (8003cc4 <prvAddNewTaskToReadyList+0xc8>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <prvAddNewTaskToReadyList+0xc4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d110      	bne.n	8003c4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c28:	f000 fcc4 	bl	80045b4 <prvInitialiseTaskLists>
 8003c2c:	e00d      	b.n	8003c4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <prvAddNewTaskToReadyList+0xcc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c36:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <prvAddNewTaskToReadyList+0xc8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d802      	bhi.n	8003c4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c44:	4a1f      	ldr	r2, [pc, #124]	; (8003cc4 <prvAddNewTaskToReadyList+0xc8>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <prvAddNewTaskToReadyList+0xd0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <prvAddNewTaskToReadyList+0xd0>)
 8003c52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <prvAddNewTaskToReadyList+0xd0>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <prvAddNewTaskToReadyList+0xd4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d903      	bls.n	8003c70 <prvAddNewTaskToReadyList+0x74>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <prvAddNewTaskToReadyList+0xd4>)
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <prvAddNewTaskToReadyList+0xd8>)
 8003c7e:	441a      	add	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7ff f8fd 	bl	8002e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c8c:	f001 fb1a 	bl	80052c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <prvAddNewTaskToReadyList+0xcc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <prvAddNewTaskToReadyList+0xc8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d207      	bcs.n	8003cb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <prvAddNewTaskToReadyList+0xdc>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000dbc 	.word	0x20000dbc
 8003cc4:	200008e8 	.word	0x200008e8
 8003cc8:	20000dc8 	.word	0x20000dc8
 8003ccc:	20000dd8 	.word	0x20000dd8
 8003cd0:	20000dc4 	.word	0x20000dc4
 8003cd4:	200008ec 	.word	0x200008ec
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d017      	beq.n	8003d1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <vTaskDelay+0x60>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <vTaskDelay+0x30>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	60bb      	str	r3, [r7, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d0c:	f000 f88a 	bl	8003e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d10:	2100      	movs	r1, #0
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fdb4 	bl	8004880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d18:	f000 f892 	bl	8003e40 <xTaskResumeAll>
 8003d1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <vTaskDelay+0x64>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000de4 	.word	0x20000de4
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d52:	463a      	mov	r2, r7
 8003d54:	1d39      	adds	r1, r7, #4
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fe44 	bl	80029e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	9202      	str	r2, [sp, #8]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	460a      	mov	r2, r1
 8003d72:	4924      	ldr	r1, [pc, #144]	; (8003e04 <vTaskStartScheduler+0xc0>)
 8003d74:	4824      	ldr	r0, [pc, #144]	; (8003e08 <vTaskStartScheduler+0xc4>)
 8003d76:	f7ff fdf9 	bl	800396c <xTaskCreateStatic>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <vTaskStartScheduler+0xc8>)
 8003d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <vTaskStartScheduler+0xc8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e001      	b.n	8003d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d102      	bne.n	8003d9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d98:	f000 fdc6 	bl	8004928 <xTimerCreateTimerTask>
 8003d9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d11b      	bne.n	8003ddc <vTaskStartScheduler+0x98>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	613b      	str	r3, [r7, #16]
}
 8003db6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <vTaskStartScheduler+0xcc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3354      	adds	r3, #84	; 0x54
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <vTaskStartScheduler+0xd0>)
 8003dc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <vTaskStartScheduler+0xd4>)
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dca:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <vTaskStartScheduler+0xd8>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <vTaskStartScheduler+0xdc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dd6:	f001 f9a3 	bl	8005120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dda:	e00e      	b.n	8003dfa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d10a      	bne.n	8003dfa <vTaskStartScheduler+0xb6>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <vTaskStartScheduler+0xb4>
}
 8003dfa:	bf00      	nop
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	08005ab4 	.word	0x08005ab4
 8003e08:	08004585 	.word	0x08004585
 8003e0c:	20000de0 	.word	0x20000de0
 8003e10:	200008e8 	.word	0x200008e8
 8003e14:	20000010 	.word	0x20000010
 8003e18:	20000ddc 	.word	0x20000ddc
 8003e1c:	20000dc8 	.word	0x20000dc8
 8003e20:	20000dc0 	.word	0x20000dc0

08003e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <vTaskSuspendAll+0x18>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	4a03      	ldr	r2, [pc, #12]	; (8003e3c <vTaskSuspendAll+0x18>)
 8003e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20000de4 	.word	0x20000de4

08003e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e4e:	4b42      	ldr	r3, [pc, #264]	; (8003f58 <xTaskResumeAll+0x118>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	603b      	str	r3, [r7, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e6c:	f001 f9fa 	bl	8005264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e70:	4b39      	ldr	r3, [pc, #228]	; (8003f58 <xTaskResumeAll+0x118>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	4a38      	ldr	r2, [pc, #224]	; (8003f58 <xTaskResumeAll+0x118>)
 8003e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <xTaskResumeAll+0x118>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d162      	bne.n	8003f48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e82:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <xTaskResumeAll+0x11c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d05e      	beq.n	8003f48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8a:	e02f      	b.n	8003eec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8c:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <xTaskResumeAll+0x120>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3318      	adds	r3, #24
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff f851 	bl	8002f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff f84c 	bl	8002f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <xTaskResumeAll+0x124>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d903      	bls.n	8003ebc <xTaskResumeAll+0x7c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <xTaskResumeAll+0x124>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <xTaskResumeAll+0x128>)
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7fe ffd7 	bl	8002e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <xTaskResumeAll+0x12c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <xTaskResumeAll+0x130>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eec:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <xTaskResumeAll+0x120>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1cb      	bne.n	8003e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003efa:	f000 fbfd 	bl	80046f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <xTaskResumeAll+0x134>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d010      	beq.n	8003f2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f0a:	f000 f847 	bl	8003f9c <xTaskIncrementTick>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <xTaskResumeAll+0x130>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f1      	bne.n	8003f0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <xTaskResumeAll+0x134>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <xTaskResumeAll+0x130>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <xTaskResumeAll+0x138>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f48:	f001 f9bc 	bl	80052c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000de4 	.word	0x20000de4
 8003f5c:	20000dbc 	.word	0x20000dbc
 8003f60:	20000d7c 	.word	0x20000d7c
 8003f64:	20000dc4 	.word	0x20000dc4
 8003f68:	200008ec 	.word	0x200008ec
 8003f6c:	200008e8 	.word	0x200008e8
 8003f70:	20000dd0 	.word	0x20000dd0
 8003f74:	20000dcc 	.word	0x20000dcc
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <xTaskGetTickCount+0x1c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000dc0 	.word	0x20000dc0

08003f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa6:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <xTaskIncrementTick+0x148>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 808f 	bne.w	80040ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <xTaskIncrementTick+0x14c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fb8:	4a4b      	ldr	r2, [pc, #300]	; (80040e8 <xTaskIncrementTick+0x14c>)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d120      	bne.n	8004006 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fc4:	4b49      	ldr	r3, [pc, #292]	; (80040ec <xTaskIncrementTick+0x150>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	603b      	str	r3, [r7, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <xTaskIncrementTick+0x46>
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <xTaskIncrementTick+0x150>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <xTaskIncrementTick+0x154>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <xTaskIncrementTick+0x150>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <xTaskIncrementTick+0x154>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <xTaskIncrementTick+0x158>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	4a3d      	ldr	r2, [pc, #244]	; (80040f4 <xTaskIncrementTick+0x158>)
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	f000 fb79 	bl	80046f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <xTaskIncrementTick+0x15c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d349      	bcc.n	80040a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <xTaskIncrementTick+0x150>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <xTaskIncrementTick+0x15c>)
 800401c:	f04f 32ff 	mov.w	r2, #4294967295
 8004020:	601a      	str	r2, [r3, #0]
					break;
 8004022:	e03f      	b.n	80040a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <xTaskIncrementTick+0x150>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d203      	bcs.n	8004044 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800403c:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <xTaskIncrementTick+0x15c>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004042:	e02f      	b.n	80040a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3304      	adds	r3, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe ff79 	bl	8002f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3318      	adds	r3, #24
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe ff70 	bl	8002f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <xTaskIncrementTick+0x160>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d903      	bls.n	8004074 <xTaskIncrementTick+0xd8>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <xTaskIncrementTick+0x160>)
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <xTaskIncrementTick+0x164>)
 8004082:	441a      	add	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f7fe fefb 	bl	8002e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <xTaskIncrementTick+0x168>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	429a      	cmp	r2, r3
 800409c:	d3b8      	bcc.n	8004010 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a2:	e7b5      	b.n	8004010 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040a4:	4b17      	ldr	r3, [pc, #92]	; (8004104 <xTaskIncrementTick+0x168>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4915      	ldr	r1, [pc, #84]	; (8004100 <xTaskIncrementTick+0x164>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d901      	bls.n	80040c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <xTaskIncrementTick+0x16c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e004      	b.n	80040d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <xTaskIncrementTick+0x170>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <xTaskIncrementTick+0x170>)
 80040d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040d8:	697b      	ldr	r3, [r7, #20]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000de4 	.word	0x20000de4
 80040e8:	20000dc0 	.word	0x20000dc0
 80040ec:	20000d74 	.word	0x20000d74
 80040f0:	20000d78 	.word	0x20000d78
 80040f4:	20000dd4 	.word	0x20000dd4
 80040f8:	20000ddc 	.word	0x20000ddc
 80040fc:	20000dc4 	.word	0x20000dc4
 8004100:	200008ec 	.word	0x200008ec
 8004104:	200008e8 	.word	0x200008e8
 8004108:	20000dd0 	.word	0x20000dd0
 800410c:	20000dcc 	.word	0x20000dcc

08004110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <vTaskSwitchContext+0xb0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800411e:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <vTaskSwitchContext+0xb4>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004124:	e046      	b.n	80041b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004126:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <vTaskSwitchContext+0xb4>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412c:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <vTaskSwitchContext+0xb8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e010      	b.n	8004156 <vTaskSwitchContext+0x46>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <vTaskSwitchContext+0x40>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	607b      	str	r3, [r7, #4]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <vTaskSwitchContext+0x3e>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	491d      	ldr	r1, [pc, #116]	; (80041cc <vTaskSwitchContext+0xbc>)
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0e4      	beq.n	8004134 <vTaskSwitchContext+0x24>
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <vTaskSwitchContext+0xbc>)
 8004176:	4413      	add	r3, r2
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3308      	adds	r3, #8
 800418c:	429a      	cmp	r2, r3
 800418e:	d104      	bne.n	800419a <vTaskSwitchContext+0x8a>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <vTaskSwitchContext+0xc0>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <vTaskSwitchContext+0xb8>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <vTaskSwitchContext+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3354      	adds	r3, #84	; 0x54
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <vTaskSwitchContext+0xc4>)
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000de4 	.word	0x20000de4
 80041c4:	20000dd0 	.word	0x20000dd0
 80041c8:	20000dc4 	.word	0x20000dc4
 80041cc:	200008ec 	.word	0x200008ec
 80041d0:	200008e8 	.word	0x200008e8
 80041d4:	20000010 	.word	0x20000010

080041d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <vTaskPlaceOnEventList+0x44>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3318      	adds	r3, #24
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe fe61 	bl	8002ece <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800420c:	2101      	movs	r1, #1
 800420e:	6838      	ldr	r0, [r7, #0]
 8004210:	f000 fb36 	bl	8004880 <prvAddCurrentTaskToDelayedList>
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200008e8 	.word	0x200008e8

08004220 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	617b      	str	r3, [r7, #20]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <vTaskPlaceOnUnorderedEventList+0x70>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004270:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3318      	adds	r3, #24
 8004278:	4619      	mov	r1, r3
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7fe fe03 	bl	8002e86 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004280:	2101      	movs	r1, #1
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fafc 	bl	8004880 <prvAddCurrentTaskToDelayedList>
}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000de4 	.word	0x20000de4
 8004294:	200008e8 	.word	0x200008e8

08004298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	617b      	str	r3, [r7, #20]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vTaskPlaceOnEventListRestricted+0x54>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3318      	adds	r3, #24
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7fe fddc 	bl	8002e86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295
 80042d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	68b8      	ldr	r0, [r7, #8]
 80042de:	f000 facf 	bl	8004880 <prvAddCurrentTaskToDelayedList>
	}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200008e8 	.word	0x200008e8

080042f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60fb      	str	r3, [r7, #12]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3318      	adds	r3, #24
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fe0d 	bl	8002f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <xTaskRemoveFromEventList+0xb0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fe04 	bl	8002f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <xTaskRemoveFromEventList+0xb4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d903      	bls.n	800434c <xTaskRemoveFromEventList+0x5c>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <xTaskRemoveFromEventList+0xb4>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <xTaskRemoveFromEventList+0xb8>)
 800435a:	441a      	add	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7fe fd8f 	bl	8002e86 <vListInsertEnd>
 8004368:	e005      	b.n	8004376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3318      	adds	r3, #24
 800436e:	4619      	mov	r1, r3
 8004370:	480e      	ldr	r0, [pc, #56]	; (80043ac <xTaskRemoveFromEventList+0xbc>)
 8004372:	f7fe fd88 	bl	8002e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <xTaskRemoveFromEventList+0xc0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	429a      	cmp	r2, r3
 8004382:	d905      	bls.n	8004390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <xTaskRemoveFromEventList+0xc4>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e001      	b.n	8004394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004394:	697b      	ldr	r3, [r7, #20]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000de4 	.word	0x20000de4
 80043a4:	20000dc4 	.word	0x20000dc4
 80043a8:	200008ec 	.word	0x200008ec
 80043ac:	20000d7c 	.word	0x20000d7c
 80043b0:	200008e8 	.word	0x200008e8
 80043b4:	20000dd0 	.word	0x20000dd0

080043b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	613b      	str	r3, [r7, #16]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60fb      	str	r3, [r7, #12]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fe fd97 	bl	8002f40 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fd92 	bl	8002f40 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d903      	bls.n	8004430 <vTaskRemoveFromUnorderedEventList+0x78>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a0f      	ldr	r2, [pc, #60]	; (800446c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800443e:	441a      	add	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe fd1d 	bl	8002e86 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	429a      	cmp	r2, r3
 8004458:	d902      	bls.n	8004460 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
	}
}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000de4 	.word	0x20000de4
 800446c:	20000dc4 	.word	0x20000dc4
 8004470:	200008ec 	.word	0x200008ec
 8004474:	200008e8 	.word	0x200008e8
 8004478:	20000dd0 	.word	0x20000dd0

0800447c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <vTaskInternalSetTimeOutState+0x24>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <vTaskInternalSetTimeOutState+0x28>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000dd4 	.word	0x20000dd4
 80044a4:	20000dc0 	.word	0x20000dc0

080044a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	613b      	str	r3, [r7, #16]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60fb      	str	r3, [r7, #12]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80044ea:	f000 febb 	bl	8005264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <xTaskCheckForTimeOut+0xbc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d102      	bne.n	800450e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e023      	b.n	8004556 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <xTaskCheckForTimeOut+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d007      	beq.n	800452a <xTaskCheckForTimeOut+0x82>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e015      	b.n	8004556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	d20b      	bcs.n	800454c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff ff9b 	bl	800447c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e004      	b.n	8004556 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004556:	f000 feb5 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 800455a:	69fb      	ldr	r3, [r7, #28]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000dc0 	.word	0x20000dc0
 8004568:	20000dd4 	.word	0x20000dd4

0800456c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <vTaskMissedYield+0x14>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20000dd0 	.word	0x20000dd0

08004584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800458c:	f000 f852 	bl	8004634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <prvIdleTask+0x28>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d9f9      	bls.n	800458c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <prvIdleTask+0x2c>)
 800459a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045a8:	e7f0      	b.n	800458c <prvIdleTask+0x8>
 80045aa:	bf00      	nop
 80045ac:	200008ec 	.word	0x200008ec
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e00c      	b.n	80045da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <prvInitialiseTaskLists+0x60>)
 80045cc:	4413      	add	r3, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fc2c 	bl	8002e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3301      	adds	r3, #1
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b37      	cmp	r3, #55	; 0x37
 80045de:	d9ef      	bls.n	80045c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045e0:	480d      	ldr	r0, [pc, #52]	; (8004618 <prvInitialiseTaskLists+0x64>)
 80045e2:	f7fe fc23 	bl	8002e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045e6:	480d      	ldr	r0, [pc, #52]	; (800461c <prvInitialiseTaskLists+0x68>)
 80045e8:	f7fe fc20 	bl	8002e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045ec:	480c      	ldr	r0, [pc, #48]	; (8004620 <prvInitialiseTaskLists+0x6c>)
 80045ee:	f7fe fc1d 	bl	8002e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045f2:	480c      	ldr	r0, [pc, #48]	; (8004624 <prvInitialiseTaskLists+0x70>)
 80045f4:	f7fe fc1a 	bl	8002e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045f8:	480b      	ldr	r0, [pc, #44]	; (8004628 <prvInitialiseTaskLists+0x74>)
 80045fa:	f7fe fc17 	bl	8002e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <prvInitialiseTaskLists+0x78>)
 8004600:	4a05      	ldr	r2, [pc, #20]	; (8004618 <prvInitialiseTaskLists+0x64>)
 8004602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <prvInitialiseTaskLists+0x7c>)
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <prvInitialiseTaskLists+0x68>)
 8004608:	601a      	str	r2, [r3, #0]
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	200008ec 	.word	0x200008ec
 8004618:	20000d4c 	.word	0x20000d4c
 800461c:	20000d60 	.word	0x20000d60
 8004620:	20000d7c 	.word	0x20000d7c
 8004624:	20000d90 	.word	0x20000d90
 8004628:	20000da8 	.word	0x20000da8
 800462c:	20000d74 	.word	0x20000d74
 8004630:	20000d78 	.word	0x20000d78

08004634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800463a:	e019      	b.n	8004670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800463c:	f000 fe12 	bl	8005264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <prvCheckTasksWaitingTermination+0x50>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fc77 	bl	8002f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <prvCheckTasksWaitingTermination+0x54>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3b01      	subs	r3, #1
 8004658:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <prvCheckTasksWaitingTermination+0x54>)
 800465a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <prvCheckTasksWaitingTermination+0x58>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3b01      	subs	r3, #1
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <prvCheckTasksWaitingTermination+0x58>)
 8004664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004666:	f000 fe2d 	bl	80052c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f810 	bl	8004690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <prvCheckTasksWaitingTermination+0x58>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e1      	bne.n	800463c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000d90 	.word	0x20000d90
 8004688:	20000dbc 	.word	0x20000dbc
 800468c:	20000da4 	.word	0x20000da4

08004690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3354      	adds	r3, #84	; 0x54
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f937 	bl	8005910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 ffc5 	bl	8005640 <vPortFree>
				vPortFree( pxTCB );
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 ffc2 	bl	8005640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046bc:	e018      	b.n	80046f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d103      	bne.n	80046d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 ffb9 	bl	8005640 <vPortFree>
	}
 80046ce:	e00f      	b.n	80046f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d00a      	beq.n	80046f0 <prvDeleteTCB+0x60>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60fb      	str	r3, [r7, #12]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <prvDeleteTCB+0x5e>
	}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <prvResetNextTaskUnblockTime+0x38>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvResetNextTaskUnblockTime+0x3c>)
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004710:	e008      	b.n	8004724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <prvResetNextTaskUnblockTime+0x38>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <prvResetNextTaskUnblockTime+0x3c>)
 8004722:	6013      	str	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000d74 	.word	0x20000d74
 8004734:	20000ddc 	.word	0x20000ddc

08004738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <xTaskGetSchedulerState+0x34>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004746:	2301      	movs	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	e008      	b.n	800475e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <xTaskGetSchedulerState+0x38>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004754:	2302      	movs	r3, #2
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e001      	b.n	800475e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800475e:	687b      	ldr	r3, [r7, #4]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20000dc8 	.word	0x20000dc8
 8004770:	20000de4 	.word	0x20000de4

08004774 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d056      	beq.n	8004838 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800478a:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <xTaskPriorityDisinherit+0xd0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	429a      	cmp	r2, r3
 8004792:	d00a      	beq.n	80047aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d02c      	beq.n	8004838 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d128      	bne.n	8004838 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe fba8 	bl	8002f40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <xTaskPriorityDisinherit+0xd4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d903      	bls.n	8004818 <xTaskPriorityDisinherit+0xa4>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <xTaskPriorityDisinherit+0xd4>)
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <xTaskPriorityDisinherit+0xd8>)
 8004826:	441a      	add	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fe fb29 	bl	8002e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004838:	697b      	ldr	r3, [r7, #20]
	}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200008e8 	.word	0x200008e8
 8004848:	20000dc4 	.word	0x20000dc4
 800484c:	200008ec 	.word	0x200008ec

08004850 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <uxTaskResetEventItemValue+0x2c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <uxTaskResetEventItemValue+0x2c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <uxTaskResetEventItemValue+0x2c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800486c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800486e:	687b      	ldr	r3, [r7, #4]
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	200008e8 	.word	0x200008e8

08004880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <prvAddCurrentTaskToDelayedList+0x90>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <prvAddCurrentTaskToDelayedList+0x94>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fb52 	bl	8002f40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d10a      	bne.n	80048ba <prvAddCurrentTaskToDelayedList+0x3a>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048aa:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <prvAddCurrentTaskToDelayedList+0x94>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4819      	ldr	r0, [pc, #100]	; (8004918 <prvAddCurrentTaskToDelayedList+0x98>)
 80048b4:	f7fe fae7 	bl	8002e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048b8:	e026      	b.n	8004908 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048c2:	4b14      	ldr	r3, [pc, #80]	; (8004914 <prvAddCurrentTaskToDelayedList+0x94>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d209      	bcs.n	80048e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <prvAddCurrentTaskToDelayedList+0x9c>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <prvAddCurrentTaskToDelayedList+0x94>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7fe faf5 	bl	8002ece <vListInsert>
}
 80048e4:	e010      	b.n	8004908 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <prvAddCurrentTaskToDelayedList+0x94>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe faeb 	bl	8002ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d202      	bcs.n	8004908 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6013      	str	r3, [r2, #0]
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000dc0 	.word	0x20000dc0
 8004914:	200008e8 	.word	0x200008e8
 8004918:	20000da8 	.word	0x20000da8
 800491c:	20000d78 	.word	0x20000d78
 8004920:	20000d74 	.word	0x20000d74
 8004924:	20000ddc 	.word	0x20000ddc

08004928 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004932:	f000 fb07 	bl	8004f44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <xTimerCreateTimerTask+0x80>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d021      	beq.n	8004982 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004946:	1d3a      	adds	r2, r7, #4
 8004948:	f107 0108 	add.w	r1, r7, #8
 800494c:	f107 030c 	add.w	r3, r7, #12
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe f863 	bl	8002a1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	9202      	str	r2, [sp, #8]
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	2302      	movs	r3, #2
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	460a      	mov	r2, r1
 8004968:	4910      	ldr	r1, [pc, #64]	; (80049ac <xTimerCreateTimerTask+0x84>)
 800496a:	4811      	ldr	r0, [pc, #68]	; (80049b0 <xTimerCreateTimerTask+0x88>)
 800496c:	f7fe fffe 	bl	800396c <xTaskCreateStatic>
 8004970:	4603      	mov	r3, r0
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <xTimerCreateTimerTask+0x8c>)
 8004974:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <xTimerCreateTimerTask+0x8c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800497e:	2301      	movs	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	613b      	str	r3, [r7, #16]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800499e:	697b      	ldr	r3, [r7, #20]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20000e18 	.word	0x20000e18
 80049ac:	08005abc 	.word	0x08005abc
 80049b0:	08004aed 	.word	0x08004aed
 80049b4:	20000e1c 	.word	0x20000e1c

080049b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	623b      	str	r3, [r7, #32]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049e6:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <xTimerGenericCommand+0x98>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02a      	beq.n	8004a44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	dc18      	bgt.n	8004a32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a00:	f7ff fe9a 	bl	8004738 <xTaskGetSchedulerState>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d109      	bne.n	8004a1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <xTimerGenericCommand+0x98>)
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	f107 0110 	add.w	r1, r7, #16
 8004a12:	2300      	movs	r3, #0
 8004a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a16:	f7fe fbc1 	bl	800319c <xQueueGenericSend>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a1c:	e012      	b.n	8004a44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <xTimerGenericCommand+0x98>)
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	f107 0110 	add.w	r1, r7, #16
 8004a26:	2300      	movs	r3, #0
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f7fe fbb7 	bl	800319c <xQueueGenericSend>
 8004a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a30:	e008      	b.n	8004a44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <xTimerGenericCommand+0x98>)
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f107 0110 	add.w	r1, r7, #16
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	f7fe fcab 	bl	8003398 <xQueueGenericSendFromISR>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3728      	adds	r7, #40	; 0x28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000e18 	.word	0x20000e18

08004a54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5e:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <prvProcessExpiredTimer+0x94>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fa67 	bl	8002f40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d022      	beq.n	8004ac6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	18d1      	adds	r1, r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	6978      	ldr	r0, [r7, #20]
 8004a8e:	f000 f8d1 	bl	8004c34 <prvInsertTimerInActiveList>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01f      	beq.n	8004ad8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	f7ff ff88 	bl	80049b8 <xTimerGenericCommand>
 8004aa8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d113      	bne.n	8004ad8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	6978      	ldr	r0, [r7, #20]
 8004ade:	4798      	blx	r3
}
 8004ae0:	bf00      	nop
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000e10 	.word	0x20000e10

08004aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004af4:	f107 0308 	add.w	r3, r7, #8
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f857 	bl	8004bac <prvGetNextExpireTime>
 8004afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4619      	mov	r1, r3
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f803 	bl	8004b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b0a:	f000 f8d5 	bl	8004cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b0e:	e7f1      	b.n	8004af4 <prvTimerTask+0x8>

08004b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b1a:	f7ff f983 	bl	8003e24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b1e:	f107 0308 	add.w	r3, r7, #8
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f866 	bl	8004bf4 <prvSampleTimeNow>
 8004b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d130      	bne.n	8004b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <prvProcessTimerOrBlockTask+0x3c>
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d806      	bhi.n	8004b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b3e:	f7ff f97f 	bl	8003e40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff85 	bl	8004a54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b4a:	e024      	b.n	8004b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <prvProcessTimerOrBlockTask+0x90>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <prvProcessTimerOrBlockTask+0x50>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <prvProcessTimerOrBlockTask+0x52>
 8004b60:	2300      	movs	r3, #0
 8004b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b64:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <prvProcessTimerOrBlockTask+0x94>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	f7fe fec7 	bl	8003904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b76:	f7ff f963 	bl	8003e40 <xTaskResumeAll>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <prvProcessTimerOrBlockTask+0x98>)
 8004b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	f3bf 8f6f 	isb	sy
}
 8004b90:	e001      	b.n	8004b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b92:	f7ff f955 	bl	8003e40 <xTaskResumeAll>
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000e14 	.word	0x20000e14
 8004ba4:	20000e18 	.word	0x20000e18
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <prvGetNextExpireTime+0x44>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <prvGetNextExpireTime+0x16>
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	e000      	b.n	8004bc4 <prvGetNextExpireTime+0x18>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d105      	bne.n	8004bdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <prvGetNextExpireTime+0x44>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e001      	b.n	8004be0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004be0:	68fb      	ldr	r3, [r7, #12]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000e10 	.word	0x20000e10

08004bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bfc:	f7ff f9be 	bl	8003f7c <xTaskGetTickCount>
 8004c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <prvSampleTimeNow+0x3c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d205      	bcs.n	8004c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c0c:	f000 f936 	bl	8004e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c1e:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <prvSampleTimeNow+0x3c>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c24:	68fb      	ldr	r3, [r7, #12]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000e20 	.word	0x20000e20

08004c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d812      	bhi.n	8004c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	1ad2      	subs	r2, r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e01b      	b.n	8004ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <prvInsertTimerInActiveList+0x7c>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7fe f928 	bl	8002ece <vListInsert>
 8004c7e:	e012      	b.n	8004ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d206      	bcs.n	8004c96 <prvInsertTimerInActiveList+0x62>
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e007      	b.n	8004ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <prvInsertTimerInActiveList+0x80>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7fe f914 	bl	8002ece <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ca6:	697b      	ldr	r3, [r7, #20]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000e14 	.word	0x20000e14
 8004cb4:	20000e10 	.word	0x20000e10

08004cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08e      	sub	sp, #56	; 0x38
 8004cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cbe:	e0ca      	b.n	8004e56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da18      	bge.n	8004cf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	3304      	adds	r3, #4
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	61fb      	str	r3, [r7, #28]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cee:	6850      	ldr	r0, [r2, #4]
 8004cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf2:	6892      	ldr	r2, [r2, #8]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f2c0 80aa 	blt.w	8004e54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe f915 	bl	8002f40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d16:	463b      	mov	r3, r7
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff6b 	bl	8004bf4 <prvSampleTimeNow>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b09      	cmp	r3, #9
 8004d24:	f200 8097 	bhi.w	8004e56 <prvProcessReceivedCommands+0x19e>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <prvProcessReceivedCommands+0x78>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d59 	.word	0x08004d59
 8004d3c:	08004dcd 	.word	0x08004dcd
 8004d40:	08004de1 	.word	0x08004de1
 8004d44:	08004e2b 	.word	0x08004e2b
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d59 	.word	0x08004d59
 8004d50:	08004dcd 	.word	0x08004dcd
 8004d54:	08004de1 	.word	0x08004de1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	18d1      	adds	r1, r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d78:	f7ff ff5c 	bl	8004c34 <prvInsertTimerInActiveList>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d069      	beq.n	8004e56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05e      	beq.n	8004e56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	441a      	add	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	2100      	movs	r1, #0
 8004da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004daa:	f7ff fe05 	bl	80049b8 <xTimerGenericCommand>
 8004dae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d14f      	bne.n	8004e56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61bb      	str	r3, [r7, #24]
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004dde:	e03a      	b.n	8004e56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	617b      	str	r3, [r7, #20]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	18d1      	adds	r1, r2, r3
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e24:	f7ff ff06 	bl	8004c34 <prvInsertTimerInActiveList>
					break;
 8004e28:	e015      	b.n	8004e56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3a:	f000 fc01 	bl	8005640 <vPortFree>
 8004e3e:	e00a      	b.n	8004e56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e52:	e000      	b.n	8004e56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <prvProcessReceivedCommands+0x1c0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	1d39      	adds	r1, r7, #4
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fb36 	bl	80034d0 <xQueueReceive>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f47f af2a 	bne.w	8004cc0 <prvProcessReceivedCommands+0x8>
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	3730      	adds	r7, #48	; 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000e18 	.word	0x20000e18

08004e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e82:	e048      	b.n	8004f16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e84:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <prvSwitchTimerLists+0xc0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e8e:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <prvSwitchTimerLists+0xc0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe f84f 	bl	8002f40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02e      	beq.n	8004f16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90e      	bls.n	8004ee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ed6:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <prvSwitchTimerLists+0xc0>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fd fff4 	bl	8002ece <vListInsert>
 8004ee6:	e016      	b.n	8004f16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2300      	movs	r3, #0
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fd60 	bl	80049b8 <xTimerGenericCommand>
 8004ef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	603b      	str	r3, [r7, #0]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <prvSwitchTimerLists+0xc0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1b1      	bne.n	8004e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <prvSwitchTimerLists+0xc0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <prvSwitchTimerLists+0xc4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <prvSwitchTimerLists+0xc0>)
 8004f2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f2e:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <prvSwitchTimerLists+0xc4>)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000e10 	.word	0x20000e10
 8004f40:	20000e14 	.word	0x20000e14

08004f44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f4a:	f000 f98b 	bl	8005264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <prvCheckForValidListAndQueue+0x60>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d120      	bne.n	8004f98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f56:	4814      	ldr	r0, [pc, #80]	; (8004fa8 <prvCheckForValidListAndQueue+0x64>)
 8004f58:	f7fd ff68 	bl	8002e2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f5c:	4813      	ldr	r0, [pc, #76]	; (8004fac <prvCheckForValidListAndQueue+0x68>)
 8004f5e:	f7fd ff65 	bl	8002e2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <prvCheckForValidListAndQueue+0x6c>)
 8004f64:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <prvCheckForValidListAndQueue+0x64>)
 8004f66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <prvCheckForValidListAndQueue+0x70>)
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <prvCheckForValidListAndQueue+0x68>)
 8004f6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <prvCheckForValidListAndQueue+0x74>)
 8004f74:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <prvCheckForValidListAndQueue+0x78>)
 8004f76:	2110      	movs	r1, #16
 8004f78:	200a      	movs	r0, #10
 8004f7a:	f7fe f873 	bl	8003064 <xQueueGenericCreateStatic>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <prvCheckForValidListAndQueue+0x60>)
 8004f82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <prvCheckForValidListAndQueue+0x60>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <prvCheckForValidListAndQueue+0x60>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	490b      	ldr	r1, [pc, #44]	; (8004fc0 <prvCheckForValidListAndQueue+0x7c>)
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fc8c 	bl	80038b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f98:	f000 f994 	bl	80052c4 <vPortExitCritical>
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000e18 	.word	0x20000e18
 8004fa8:	20000de8 	.word	0x20000de8
 8004fac:	20000dfc 	.word	0x20000dfc
 8004fb0:	20000e10 	.word	0x20000e10
 8004fb4:	20000e14 	.word	0x20000e14
 8004fb8:	20000ec4 	.word	0x20000ec4
 8004fbc:	20000e24 	.word	0x20000e24
 8004fc0:	08005ac4 	.word	0x08005ac4

08004fc4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004fd2:	f06f 0301 	mvn.w	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <xTimerPendFunctionCallFromISR+0x3c>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	f107 0114 	add.w	r1, r7, #20
 8004fec:	2300      	movs	r3, #0
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	f7fe f9d2 	bl	8003398 <xQueueGenericSendFromISR>
 8004ff4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000e18 	.word	0x20000e18

08005004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b04      	subs	r3, #4
 8005014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800501c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3b04      	subs	r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b04      	subs	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005034:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <pxPortInitialiseStack+0x64>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b14      	subs	r3, #20
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f06f 0202 	mvn.w	r2, #2
 8005052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b20      	subs	r3, #32
 8005058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	0800506d 	.word	0x0800506d

0800506c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <prvTaskExitError+0x54>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d00a      	beq.n	8005096 <prvTaskExitError+0x2a>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <prvTaskExitError+0x28>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
}
 80050a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050aa:	bf00      	nop
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0fc      	beq.n	80050ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	2000000c 	.word	0x2000000c
	...

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	4770      	bx	lr
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst2>:
 80050f0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <prvPortStartFirstTask+0x24>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8814 	msr	CONTROL, r0
 800510a:	b662      	cpsie	i
 800510c:	b661      	cpsie	f
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	df00      	svc	0
 8005118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800511a:	bf00      	nop
 800511c:	e000ed08 	.word	0xe000ed08

08005120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <xPortStartScheduler+0x120>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a46      	ldr	r2, [pc, #280]	; (8005244 <xPortStartScheduler+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10a      	bne.n	8005146 <xPortStartScheduler+0x26>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005146:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <xPortStartScheduler+0x120>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <xPortStartScheduler+0x128>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10a      	bne.n	8005166 <xPortStartScheduler+0x46>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60fb      	str	r3, [r7, #12]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005166:	4b39      	ldr	r3, [pc, #228]	; (800524c <xPortStartScheduler+0x12c>)
 8005168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <xPortStartScheduler+0x130>)
 800518c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800518e:	4b31      	ldr	r3, [pc, #196]	; (8005254 <xPortStartScheduler+0x134>)
 8005190:	2207      	movs	r2, #7
 8005192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005194:	e009      	b.n	80051aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <xPortStartScheduler+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3b01      	subs	r3, #1
 800519c:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <xPortStartScheduler+0x134>)
 800519e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d0ef      	beq.n	8005196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <xPortStartScheduler+0x134>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00a      	beq.n	80051d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60bb      	str	r3, [r7, #8]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <xPortStartScheduler+0x134>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <xPortStartScheduler+0x134>)
 80051e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xPortStartScheduler+0x134>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ea:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <xPortStartScheduler+0x134>)
 80051ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <xPortStartScheduler+0x138>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <xPortStartScheduler+0x138>)
 80051fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <xPortStartScheduler+0x138>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a14      	ldr	r2, [pc, #80]	; (8005258 <xPortStartScheduler+0x138>)
 8005208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800520c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800520e:	f000 f8dd 	bl	80053cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <xPortStartScheduler+0x13c>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005218:	f000 f8fc 	bl	8005414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <xPortStartScheduler+0x140>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0f      	ldr	r2, [pc, #60]	; (8005260 <xPortStartScheduler+0x140>)
 8005222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005228:	f7ff ff66 	bl	80050f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800522c:	f7fe ff70 	bl	8004110 <vTaskSwitchContext>
	prvTaskExitError();
 8005230:	f7ff ff1c 	bl	800506c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	e000ed00 	.word	0xe000ed00
 8005244:	410fc271 	.word	0x410fc271
 8005248:	410fc270 	.word	0x410fc270
 800524c:	e000e400 	.word	0xe000e400
 8005250:	20000f14 	.word	0x20000f14
 8005254:	20000f18 	.word	0x20000f18
 8005258:	e000ed20 	.word	0xe000ed20
 800525c:	2000000c 	.word	0x2000000c
 8005260:	e000ef34 	.word	0xe000ef34

08005264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	607b      	str	r3, [r7, #4]
}
 800527c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <vPortEnterCritical+0x58>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <vPortEnterCritical+0x58>)
 8005286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <vPortEnterCritical+0x58>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10f      	bne.n	80052b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <vPortEnterCritical+0x5c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	603b      	str	r3, [r7, #0]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <vPortEnterCritical+0x4a>
	}
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	2000000c 	.word	0x2000000c
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <vPortExitCritical+0x50>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <vPortExitCritical+0x24>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	607b      	str	r3, [r7, #4]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <vPortExitCritical+0x50>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <vPortExitCritical+0x50>)
 80052f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <vPortExitCritical+0x50>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <vPortExitCritical+0x42>
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f383 8811 	msr	BASEPRI, r3
}
 8005304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000000c 	.word	0x2000000c
	...

08005320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f7fe fede 	bl	8004110 <vTaskSwitchContext>
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f380 8811 	msr	BASEPRI, r0
 800535c:	bc09      	pop	{r0, r3}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f01e 0f10 	tst.w	lr, #16
 800536a:	bf08      	it	eq
 800536c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005370:	f380 8809 	msr	PSP, r0
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst>:
 8005380:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053a2:	f7fe fdfb 	bl	8003f9c <xTaskIncrementTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <xPortSysTickHandler+0x40>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
}
 80053be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <vPortSetupTimerInterrupt+0x38>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <vPortSetupTimerInterrupt+0x40>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <vPortSetupTimerInterrupt+0x44>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010
 8005404:	e000e018 	.word	0xe000e018
 8005408:	20000000 	.word	0x20000000
 800540c:	10624dd3 	.word	0x10624dd3
 8005410:	e000e014 	.word	0xe000e014

08005414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005424 <vPortEnableVFP+0x10>
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541e:	6001      	str	r1, [r0, #0]
 8005420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005422:	bf00      	nop
 8005424:	e000ed88 	.word	0xe000ed88

08005428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800542e:	f3ef 8305 	mrs	r3, IPSR
 8005432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d914      	bls.n	8005464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <vPortValidateInterruptPriority+0x70>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <vPortValidateInterruptPriority+0x74>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	7afa      	ldrb	r2, [r7, #11]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20a      	bcs.n	8005464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <vPortValidateInterruptPriority+0x78>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <vPortValidateInterruptPriority+0x7c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d90a      	bls.n	800548a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	603b      	str	r3, [r7, #0]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <vPortValidateInterruptPriority+0x60>
	}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	e000e3f0 	.word	0xe000e3f0
 800549c:	20000f14 	.word	0x20000f14
 80054a0:	e000ed0c 	.word	0xe000ed0c
 80054a4:	20000f18 	.word	0x20000f18

080054a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054b4:	f7fe fcb6 	bl	8003e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054b8:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <pvPortMalloc+0x180>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054c0:	f000 f920 	bl	8005704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <pvPortMalloc+0x184>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8093 	bne.w	80055f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01d      	beq.n	8005514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054d8:	2208      	movs	r2, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	3308      	adds	r3, #8
 80054f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <pvPortMalloc+0x6c>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	617b      	str	r3, [r7, #20]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d06e      	beq.n	80055f8 <pvPortMalloc+0x150>
 800551a:	4b45      	ldr	r3, [pc, #276]	; (8005630 <pvPortMalloc+0x188>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d869      	bhi.n	80055f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005524:	4b43      	ldr	r3, [pc, #268]	; (8005634 <pvPortMalloc+0x18c>)
 8005526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <pvPortMalloc+0x18c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552e:	e004      	b.n	800553a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <pvPortMalloc+0xa4>
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f1      	bne.n	8005530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <pvPortMalloc+0x180>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	429a      	cmp	r2, r3
 8005554:	d050      	beq.n	80055f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2208      	movs	r2, #8
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	2308      	movs	r3, #8
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	429a      	cmp	r2, r3
 8005576:	d91f      	bls.n	80055b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <pvPortMalloc+0xf8>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	613b      	str	r3, [r7, #16]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f000 f908 	bl	80057c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055b8:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <pvPortMalloc+0x188>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <pvPortMalloc+0x188>)
 80055c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <pvPortMalloc+0x188>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <pvPortMalloc+0x190>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d203      	bcs.n	80055da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <pvPortMalloc+0x188>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <pvPortMalloc+0x190>)
 80055d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <pvPortMalloc+0x194>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <pvPortMalloc+0x194>)
 80055f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055f8:	f7fe fc22 	bl	8003e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <pvPortMalloc+0x174>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <pvPortMalloc+0x172>
	return pvReturn;
 800561c:	69fb      	ldr	r3, [r7, #28]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20004b24 	.word	0x20004b24
 800562c:	20004b38 	.word	0x20004b38
 8005630:	20004b28 	.word	0x20004b28
 8005634:	20004b1c 	.word	0x20004b1c
 8005638:	20004b2c 	.word	0x20004b2c
 800563c:	20004b30 	.word	0x20004b30

08005640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04d      	beq.n	80056ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005652:	2308      	movs	r3, #8
 8005654:	425b      	negs	r3, r3
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <vPortFree+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <vPortFree+0x44>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <vPortFree+0x62>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60bb      	str	r3, [r7, #8]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <vPortFree+0xb8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01e      	beq.n	80056ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11a      	bne.n	80056ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <vPortFree+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056c8:	f7fe fbac 	bl	8003e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vPortFree+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <vPortFree+0xbc>)
 80056d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f000 f874 	bl	80057c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <vPortFree+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	4a06      	ldr	r2, [pc, #24]	; (8005700 <vPortFree+0xc0>)
 80056e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056ea:	f7fe fba9 	bl	8003e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20004b38 	.word	0x20004b38
 80056fc:	20004b28 	.word	0x20004b28
 8005700:	20004b34 	.word	0x20004b34

08005704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800570a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800570e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <prvHeapInit+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <prvHeapInit+0xac>)
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800573c:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <prvHeapInit+0xb0>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <prvHeapInit+0xb0>)
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005750:	2208      	movs	r2, #8
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvHeapInit+0xb4>)
 8005764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvHeapInit+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvHeapInit+0xb4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvHeapInit+0xb4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <prvHeapInit+0xb8>)
 8005792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <prvHeapInit+0xbc>)
 800579a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <prvHeapInit+0xc0>)
 800579e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000f1c 	.word	0x20000f1c
 80057b4:	20004b1c 	.word	0x20004b1c
 80057b8:	20004b24 	.word	0x20004b24
 80057bc:	20004b2c 	.word	0x20004b2c
 80057c0:	20004b28 	.word	0x20004b28
 80057c4:	20004b38 	.word	0x20004b38

080057c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <prvInsertBlockIntoFreeList+0xac>)
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e002      	b.n	80057dc <prvInsertBlockIntoFreeList+0x14>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d8f7      	bhi.n	80057d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d108      	bne.n	800580a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	441a      	add	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d118      	bne.n	8005850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d00d      	beq.n	8005846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e008      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e003      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d002      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20004b1c 	.word	0x20004b1c
 8005878:	20004b24 	.word	0x20004b24

0800587c <__libc_init_array>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4d0d      	ldr	r5, [pc, #52]	; (80058b4 <__libc_init_array+0x38>)
 8005880:	4c0d      	ldr	r4, [pc, #52]	; (80058b8 <__libc_init_array+0x3c>)
 8005882:	1b64      	subs	r4, r4, r5
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	2600      	movs	r6, #0
 8005888:	42a6      	cmp	r6, r4
 800588a:	d109      	bne.n	80058a0 <__libc_init_array+0x24>
 800588c:	4d0b      	ldr	r5, [pc, #44]	; (80058bc <__libc_init_array+0x40>)
 800588e:	4c0c      	ldr	r4, [pc, #48]	; (80058c0 <__libc_init_array+0x44>)
 8005890:	f000 f8f2 	bl	8005a78 <_init>
 8005894:	1b64      	subs	r4, r4, r5
 8005896:	10a4      	asrs	r4, r4, #2
 8005898:	2600      	movs	r6, #0
 800589a:	42a6      	cmp	r6, r4
 800589c:	d105      	bne.n	80058aa <__libc_init_array+0x2e>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a4:	4798      	blx	r3
 80058a6:	3601      	adds	r6, #1
 80058a8:	e7ee      	b.n	8005888 <__libc_init_array+0xc>
 80058aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ae:	4798      	blx	r3
 80058b0:	3601      	adds	r6, #1
 80058b2:	e7f2      	b.n	800589a <__libc_init_array+0x1e>
 80058b4:	08005ba4 	.word	0x08005ba4
 80058b8:	08005ba4 	.word	0x08005ba4
 80058bc:	08005ba4 	.word	0x08005ba4
 80058c0:	08005ba8 	.word	0x08005ba8

080058c4 <__retarget_lock_acquire_recursive>:
 80058c4:	4770      	bx	lr

080058c6 <__retarget_lock_release_recursive>:
 80058c6:	4770      	bx	lr

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058de:	4291      	cmp	r1, r2
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <cleanup_glue>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	6809      	ldr	r1, [r1, #0]
 80058fa:	4605      	mov	r5, r0
 80058fc:	b109      	cbz	r1, 8005902 <cleanup_glue+0xe>
 80058fe:	f7ff fff9 	bl	80058f4 <cleanup_glue>
 8005902:	4621      	mov	r1, r4
 8005904:	4628      	mov	r0, r5
 8005906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800590a:	f000 b869 	b.w	80059e0 <_free_r>
	...

08005910 <_reclaim_reent>:
 8005910:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <_reclaim_reent+0xb4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4283      	cmp	r3, r0
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	4604      	mov	r4, r0
 800591a:	d051      	beq.n	80059c0 <_reclaim_reent+0xb0>
 800591c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800591e:	b143      	cbz	r3, 8005932 <_reclaim_reent+0x22>
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d14a      	bne.n	80059bc <_reclaim_reent+0xac>
 8005926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	b111      	cbz	r1, 8005932 <_reclaim_reent+0x22>
 800592c:	4620      	mov	r0, r4
 800592e:	f000 f857 	bl	80059e0 <_free_r>
 8005932:	6961      	ldr	r1, [r4, #20]
 8005934:	b111      	cbz	r1, 800593c <_reclaim_reent+0x2c>
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f852 	bl	80059e0 <_free_r>
 800593c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800593e:	b111      	cbz	r1, 8005946 <_reclaim_reent+0x36>
 8005940:	4620      	mov	r0, r4
 8005942:	f000 f84d 	bl	80059e0 <_free_r>
 8005946:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005948:	b111      	cbz	r1, 8005950 <_reclaim_reent+0x40>
 800594a:	4620      	mov	r0, r4
 800594c:	f000 f848 	bl	80059e0 <_free_r>
 8005950:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005952:	b111      	cbz	r1, 800595a <_reclaim_reent+0x4a>
 8005954:	4620      	mov	r0, r4
 8005956:	f000 f843 	bl	80059e0 <_free_r>
 800595a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800595c:	b111      	cbz	r1, 8005964 <_reclaim_reent+0x54>
 800595e:	4620      	mov	r0, r4
 8005960:	f000 f83e 	bl	80059e0 <_free_r>
 8005964:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005966:	b111      	cbz	r1, 800596e <_reclaim_reent+0x5e>
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f839 	bl	80059e0 <_free_r>
 800596e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005970:	b111      	cbz	r1, 8005978 <_reclaim_reent+0x68>
 8005972:	4620      	mov	r0, r4
 8005974:	f000 f834 	bl	80059e0 <_free_r>
 8005978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800597a:	b111      	cbz	r1, 8005982 <_reclaim_reent+0x72>
 800597c:	4620      	mov	r0, r4
 800597e:	f000 f82f 	bl	80059e0 <_free_r>
 8005982:	69a3      	ldr	r3, [r4, #24]
 8005984:	b1e3      	cbz	r3, 80059c0 <_reclaim_reent+0xb0>
 8005986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005988:	4620      	mov	r0, r4
 800598a:	4798      	blx	r3
 800598c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800598e:	b1b9      	cbz	r1, 80059c0 <_reclaim_reent+0xb0>
 8005990:	4620      	mov	r0, r4
 8005992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005996:	f7ff bfad 	b.w	80058f4 <cleanup_glue>
 800599a:	5949      	ldr	r1, [r1, r5]
 800599c:	b941      	cbnz	r1, 80059b0 <_reclaim_reent+0xa0>
 800599e:	3504      	adds	r5, #4
 80059a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a2:	2d80      	cmp	r5, #128	; 0x80
 80059a4:	68d9      	ldr	r1, [r3, #12]
 80059a6:	d1f8      	bne.n	800599a <_reclaim_reent+0x8a>
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 f819 	bl	80059e0 <_free_r>
 80059ae:	e7ba      	b.n	8005926 <_reclaim_reent+0x16>
 80059b0:	680e      	ldr	r6, [r1, #0]
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 f814 	bl	80059e0 <_free_r>
 80059b8:	4631      	mov	r1, r6
 80059ba:	e7ef      	b.n	800599c <_reclaim_reent+0x8c>
 80059bc:	2500      	movs	r5, #0
 80059be:	e7ef      	b.n	80059a0 <_reclaim_reent+0x90>
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	bf00      	nop
 80059c4:	20000010 	.word	0x20000010

080059c8 <__malloc_lock>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__malloc_lock+0x8>)
 80059ca:	f7ff bf7b 	b.w	80058c4 <__retarget_lock_acquire_recursive>
 80059ce:	bf00      	nop
 80059d0:	20004b3c 	.word	0x20004b3c

080059d4 <__malloc_unlock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__malloc_unlock+0x8>)
 80059d6:	f7ff bf76 	b.w	80058c6 <__retarget_lock_release_recursive>
 80059da:	bf00      	nop
 80059dc:	20004b3c 	.word	0x20004b3c

080059e0 <_free_r>:
 80059e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059e2:	2900      	cmp	r1, #0
 80059e4:	d044      	beq.n	8005a70 <_free_r+0x90>
 80059e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ea:	9001      	str	r0, [sp, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f1a1 0404 	sub.w	r4, r1, #4
 80059f2:	bfb8      	it	lt
 80059f4:	18e4      	addlt	r4, r4, r3
 80059f6:	f7ff ffe7 	bl	80059c8 <__malloc_lock>
 80059fa:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <_free_r+0x94>)
 80059fc:	9801      	ldr	r0, [sp, #4]
 80059fe:	6813      	ldr	r3, [r2, #0]
 8005a00:	b933      	cbnz	r3, 8005a10 <_free_r+0x30>
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	6014      	str	r4, [r2, #0]
 8005a06:	b003      	add	sp, #12
 8005a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a0c:	f7ff bfe2 	b.w	80059d4 <__malloc_unlock>
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	d908      	bls.n	8005a26 <_free_r+0x46>
 8005a14:	6825      	ldr	r5, [r4, #0]
 8005a16:	1961      	adds	r1, r4, r5
 8005a18:	428b      	cmp	r3, r1
 8005a1a:	bf01      	itttt	eq
 8005a1c:	6819      	ldreq	r1, [r3, #0]
 8005a1e:	685b      	ldreq	r3, [r3, #4]
 8005a20:	1949      	addeq	r1, r1, r5
 8005a22:	6021      	streq	r1, [r4, #0]
 8005a24:	e7ed      	b.n	8005a02 <_free_r+0x22>
 8005a26:	461a      	mov	r2, r3
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b10b      	cbz	r3, 8005a30 <_free_r+0x50>
 8005a2c:	42a3      	cmp	r3, r4
 8005a2e:	d9fa      	bls.n	8005a26 <_free_r+0x46>
 8005a30:	6811      	ldr	r1, [r2, #0]
 8005a32:	1855      	adds	r5, r2, r1
 8005a34:	42a5      	cmp	r5, r4
 8005a36:	d10b      	bne.n	8005a50 <_free_r+0x70>
 8005a38:	6824      	ldr	r4, [r4, #0]
 8005a3a:	4421      	add	r1, r4
 8005a3c:	1854      	adds	r4, r2, r1
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	6011      	str	r1, [r2, #0]
 8005a42:	d1e0      	bne.n	8005a06 <_free_r+0x26>
 8005a44:	681c      	ldr	r4, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	6053      	str	r3, [r2, #4]
 8005a4a:	4421      	add	r1, r4
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	e7da      	b.n	8005a06 <_free_r+0x26>
 8005a50:	d902      	bls.n	8005a58 <_free_r+0x78>
 8005a52:	230c      	movs	r3, #12
 8005a54:	6003      	str	r3, [r0, #0]
 8005a56:	e7d6      	b.n	8005a06 <_free_r+0x26>
 8005a58:	6825      	ldr	r5, [r4, #0]
 8005a5a:	1961      	adds	r1, r4, r5
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf04      	itt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	bf04      	itt	eq
 8005a68:	1949      	addeq	r1, r1, r5
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	6054      	str	r4, [r2, #4]
 8005a6e:	e7ca      	b.n	8005a06 <_free_r+0x26>
 8005a70:	b003      	add	sp, #12
 8005a72:	bd30      	pop	{r4, r5, pc}
 8005a74:	20004b40 	.word	0x20004b40

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
