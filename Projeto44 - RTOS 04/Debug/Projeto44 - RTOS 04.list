
Projeto44 - RTOS 04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db4  08005db4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dbc  08005dbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ad8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b4c  20004b4c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001873e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f97  00000000  00000000  000387e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0003cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000032e0  00000000  00000000  0003dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f3b  00000000  00000000  00041088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47c4  00000000  00000000  00055fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a787  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055fc  00000000  00000000  0012a7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c58 	.word	0x08005c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c58 	.word	0x08005c58

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa7c 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f840 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8c6 	bl	8000670 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f89a 	bl	800061c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f002 f872 	bl	80025d0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semCont */
  semContHandle = osSemaphoreNew(2, 2, &semCont_attributes);
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <main+0x60>)
 80004ee:	2102      	movs	r1, #2
 80004f0:	2002      	movs	r0, #2
 80004f2:	f002 f964 	bl	80027be <osSemaphoreNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <main+0x64>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(task1_fun, NULL, &task1_attributes);
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <main+0x68>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x6c>)
 8000502:	f002 f8af 	bl	8002664 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <main+0x70>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(task2_fun, NULL, &task2_attributes);
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <main+0x74>)
 800050e:	2100      	movs	r1, #0
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x78>)
 8000512:	f002 f8a7 	bl	8002664 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x7c>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(task3_fun, NULL, &task3_attributes);
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <main+0x80>)
 800051e:	2100      	movs	r1, #0
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <main+0x84>)
 8000522:	f002 f89f 	bl	8002664 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <main+0x88>)
 800052a:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f002 f874 	bl	8002618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x5c>
 8000532:	bf00      	nop
 8000534:	08005d2c 	.word	0x08005d2c
 8000538:	200000e0 	.word	0x200000e0
 800053c:	08005cc0 	.word	0x08005cc0
 8000540:	080006a5 	.word	0x080006a5
 8000544:	200000d4 	.word	0x200000d4
 8000548:	08005ce4 	.word	0x08005ce4
 800054c:	080006dd 	.word	0x080006dd
 8000550:	200000d8 	.word	0x200000d8
 8000554:	08005d08 	.word	0x08005d08
 8000558:	0800072d 	.word	0x0800072d
 800055c:	200000dc 	.word	0x200000dc

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 faa8 	bl	8005ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xb4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xb4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <SystemClock_Config+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <SystemClock_Config+0xb8>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fcbf 	bl	8000f54 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005dc:	f000 f8cc 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff22 	bl	8001444 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000606:	f000 f8b7 	bl	8000778 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART1_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800062c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000654:	f001 fbb6 	bl	8001dc4 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f88b 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000090 	.word	0x20000090
 800066c:	40011000 	.word	0x40011000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_GPIO_Init+0x30>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <MX_GPIO_Init+0x30>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_GPIO_Init+0x30>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <task1_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_fun */
void task1_fun(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semContHandle, osWaitForever);
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <task1_fun+0x2c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f90b 	bl	80028d0 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "t1\r\n", strlen("t1\r\n"), 100);
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	2204      	movs	r2, #4
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <task1_fun+0x30>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <task1_fun+0x34>)
 80006c2:	f001 fbcc 	bl	8001e5e <HAL_UART_Transmit>
	  osDelay(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ca:	f002 f85d 	bl	8002788 <osDelay>
	  osSemaphoreAcquire(semContHandle, osWaitForever);
 80006ce:	e7ed      	b.n	80006ac <task1_fun+0x8>
 80006d0:	200000e0 	.word	0x200000e0
 80006d4:	08005c90 	.word	0x08005c90
 80006d8:	20000090 	.word	0x20000090

080006dc <task2_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_fun */
void task2_fun(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_fun */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semContHandle, osWaitForever);
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <task2_fun+0x40>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f8ef 	bl	80028d0 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "t2\r\n", strlen("t2\r\n"), 100);
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	2204      	movs	r2, #4
 80006f6:	490a      	ldr	r1, [pc, #40]	; (8000720 <task2_fun+0x44>)
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <task2_fun+0x48>)
 80006fa:	f001 fbb0 	bl	8001e5e <HAL_UART_Transmit>
	  osDelay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000702:	f002 f841 	bl	8002788 <osDelay>
	  cont = osSemaphoreGetCount(semContHandle);
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <task2_fun+0x40>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f932 	bl	8002974 <osSemaphoreGetCount>
 8000710:	4603      	mov	r3, r0
 8000712:	b25a      	sxtb	r2, r3
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <task2_fun+0x4c>)
 8000716:	701a      	strb	r2, [r3, #0]
	  osSemaphoreAcquire(semContHandle, osWaitForever);
 8000718:	e7e4      	b.n	80006e4 <task2_fun+0x8>
 800071a:	bf00      	nop
 800071c:	200000e0 	.word	0x200000e0
 8000720:	08005c98 	.word	0x08005c98
 8000724:	20000090 	.word	0x20000090
 8000728:	200000e4 	.word	0x200000e4

0800072c <task3_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task3_fun */
void task3_fun(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task3_fun */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *) "t3\r\n", strlen("t3\r\n"), 100);
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	2204      	movs	r2, #4
 8000738:	4904      	ldr	r1, [pc, #16]	; (800074c <task3_fun+0x20>)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <task3_fun+0x24>)
 800073c:	f001 fb8f 	bl	8001e5e <HAL_UART_Transmit>
	  osDelay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f002 f820 	bl	8002788 <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "t3\r\n", strlen("t3\r\n"), 100);
 8000748:	e7f4      	b.n	8000734 <task3_fun+0x8>
 800074a:	bf00      	nop
 800074c:	08005ca0 	.word	0x08005ca0
 8000750:	20000090 	.word	0x20000090

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000766:	f000 f957 	bl	8000a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010000 	.word	0x40010000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <HAL_MspInit+0x54>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_MspInit+0x54>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 f9fd 	bl	8000bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_UART_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_UART_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000836:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000848:	2307      	movs	r3, #7
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_UART_MspInit+0x8c>)
 8000854:	f000 f9e2 	bl	8000c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40011000 	.word	0x40011000
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	2019      	movs	r0, #25
 8000882:	f000 f9a1 	bl	8000bc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000886:	2019      	movs	r0, #25
 8000888:	f000 f9ba 	bl	8000c00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <HAL_InitTick+0xa0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <HAL_InitTick+0xa0>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6453      	str	r3, [r2, #68]	; 0x44
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_InitTick+0xa0>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffa6 	bl	8001804 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008b8:	f000 ff90 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 80008bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_InitTick+0xa4>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9b      	lsrs	r3, r3, #18
 80008c8:	3b01      	subs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_InitTick+0xa8>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <HAL_InitTick+0xac>)
 80008d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_InitTick+0xa8>)
 80008d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_InitTick+0xa8>)
 80008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_InitTick+0xa8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_InitTick+0xa8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <HAL_InitTick+0xa8>)
 80008ee:	f000 ffbb 	bl	8001868 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d104      	bne.n	8000902 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <HAL_InitTick+0xa8>)
 80008fa:	f001 f80f 	bl	800191c <HAL_TIM_Base_Start_IT>
 80008fe:	4603      	mov	r3, r0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	431bde83 	.word	0x431bde83
 8000914:	200000e8 	.word	0x200000e8
 8000918:	40010000 	.word	0x40010000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094e:	f001 f855 	bl	80019fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000e8 	.word	0x200000e8

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000986:	490e      	ldr	r1, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800099c:	4c0b      	ldr	r4, [pc, #44]	; (80009cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009aa:	f7ff ffd7 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f005 f855 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fd8f 	bl	80004d4 <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009c4:	08005dc4 	.word	0x08005dc4
  ldr r2, =_sbss
 80009c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009cc:	20004b4c 	.word	0x20004b4c

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_Init+0x40>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_Init+0x40>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x40>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f8d8 	bl	8000bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f7ff ff32 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff febc 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000130 	.word	0x20000130

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000130 	.word	0x20000130

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff4c 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bda:	f7ff ff61 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	6978      	ldr	r0, [r7, #20]
 8000be6:	f7ff ffb1 	bl	8000b4c <NVIC_EncodePriority>
 8000bea:	4602      	mov	r2, r0
 8000bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff80 	bl	8000af8 <__NVIC_SetPriority>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff54 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	e16b      	b.n	8000f10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f040 815a 	bne.w	8000f0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d005      	beq.n	8000c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d130      	bne.n	8000cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	f003 0201 	and.w	r2, r3, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d017      	beq.n	8000d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d123      	bne.n	8000d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	08da      	lsrs	r2, r3, #3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	220f      	movs	r2, #15
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	69b9      	ldr	r1, [r7, #24]
 8000d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0203 	and.w	r2, r3, #3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 80b4 	beq.w	8000f0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b60      	ldr	r3, [pc, #384]	; (8000f28 <HAL_GPIO_Init+0x30c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a5f      	ldr	r2, [pc, #380]	; (8000f28 <HAL_GPIO_Init+0x30c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b5d      	ldr	r3, [pc, #372]	; (8000f28 <HAL_GPIO_Init+0x30c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dbe:	4a5b      	ldr	r2, [pc, #364]	; (8000f2c <HAL_GPIO_Init+0x310>)
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a52      	ldr	r2, [pc, #328]	; (8000f30 <HAL_GPIO_Init+0x314>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d02b      	beq.n	8000e42 <HAL_GPIO_Init+0x226>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a51      	ldr	r2, [pc, #324]	; (8000f34 <HAL_GPIO_Init+0x318>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d025      	beq.n	8000e3e <HAL_GPIO_Init+0x222>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <HAL_GPIO_Init+0x31c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01f      	beq.n	8000e3a <HAL_GPIO_Init+0x21e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_GPIO_Init+0x320>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x21a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <HAL_GPIO_Init+0x324>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x216>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x328>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x212>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <HAL_GPIO_Init+0x32c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x20e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <HAL_GPIO_Init+0x330>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x20a>
 8000e22:	2307      	movs	r3, #7
 8000e24:	e00e      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e26:	2308      	movs	r3, #8
 8000e28:	e00c      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	e00a      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e2e:	2305      	movs	r3, #5
 8000e30:	e008      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e32:	2304      	movs	r3, #4
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x228>
 8000e42:	2300      	movs	r3, #0
 8000e44:	69fa      	ldr	r2, [r7, #28]
 8000e46:	f002 0203 	and.w	r2, r2, #3
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e54:	4935      	ldr	r1, [pc, #212]	; (8000f2c <HAL_GPIO_Init+0x310>)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e62:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e86:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e8c:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f04:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_GPIO_Init+0x334>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	f67f ae90 	bls.w	8000c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40013800 	.word	0x40013800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40021400 	.word	0x40021400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40021c00 	.word	0x40021c00
 8000f50:	40013c00 	.word	0x40013c00

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e267      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d075      	beq.n	800105e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f72:	4b88      	ldr	r3, [pc, #544]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d00c      	beq.n	8000f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7e:	4b85      	ldr	r3, [pc, #532]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d112      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8a:	4b82      	ldr	r3, [pc, #520]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f96:	d10b      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f98:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d05b      	beq.n	800105c <HAL_RCC_OscConfig+0x108>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d157      	bne.n	800105c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e242      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d106      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x74>
 8000fba:	4b76      	ldr	r3, [pc, #472]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a75      	ldr	r2, [pc, #468]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e01d      	b.n	8001004 <HAL_RCC_OscConfig+0xb0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x98>
 8000fd2:	4b70      	ldr	r3, [pc, #448]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6f      	ldr	r2, [pc, #444]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b6d      	ldr	r3, [pc, #436]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6c      	ldr	r2, [pc, #432]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0xb0>
 8000fec:	4b69      	ldr	r3, [pc, #420]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a68      	ldr	r2, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b66      	ldr	r3, [pc, #408]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a65      	ldr	r2, [pc, #404]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fd18 	bl	8000a40 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fd14 	bl	8000a40 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e207      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0xc0>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fd04 	bl	8000a40 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fd00 	bl	8000a40 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1f3      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0xe8>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d063      	beq.n	8001132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800106a:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800107e:	2b08      	cmp	r3, #8
 8001080:	d11c      	bne.n	80010bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001082:	4b44      	ldr	r3, [pc, #272]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x152>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e1c7      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4937      	ldr	r1, [pc, #220]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	e03a      	b.n	8001132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_RCC_OscConfig+0x244>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fcb9 	bl	8000a40 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fcb5 	bl	8000a40 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1a8      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4925      	ldr	r1, [pc, #148]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e015      	b.n	8001132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_RCC_OscConfig+0x244>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110c:	f7ff fc98 	bl	8000a40 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fc94 	bl	8000a40 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e187      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d036      	beq.n	80011ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d016      	beq.n	8001174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_RCC_OscConfig+0x248>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114c:	f7ff fc78 	bl	8000a40 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fc74 	bl	8000a40 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e167      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x240>)
 8001168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x200>
 8001172:	e01b      	b.n	80011ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_RCC_OscConfig+0x248>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fc61 	bl	8000a40 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001180:	e00e      	b.n	80011a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001182:	f7ff fc5d 	bl	8000a40 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d907      	bls.n	80011a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e150      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
 8001194:	40023800 	.word	0x40023800
 8001198:	42470000 	.word	0x42470000
 800119c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80011a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1ea      	bne.n	8001182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8097 	beq.w	80012e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a7c      	ldr	r2, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x474>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d118      	bne.n	8001228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f6:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <HAL_RCC_OscConfig+0x474>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a73      	ldr	r2, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x474>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001202:	f7ff fc1d 	bl	8000a40 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff fc19 	bl	8000a40 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e10c      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_RCC_OscConfig+0x474>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x2ea>
 8001230:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001234:	4a63      	ldr	r2, [pc, #396]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6713      	str	r3, [r2, #112]	; 0x70
 800123c:	e01c      	b.n	8001278 <HAL_RCC_OscConfig+0x324>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x30c>
 8001246:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124a:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6713      	str	r3, [r2, #112]	; 0x70
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0x324>
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001264:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	6713      	str	r3, [r2, #112]	; 0x70
 800126c:	4b55      	ldr	r3, [pc, #340]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001270:	4a54      	ldr	r2, [pc, #336]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 0304 	bic.w	r3, r3, #4
 8001276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d015      	beq.n	80012ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fbde 	bl	8000a40 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001286:	e00a      	b.n	800129e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fbda 	bl	8000a40 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	; 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e0cb      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129e:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0ee      	beq.n	8001288 <HAL_RCC_OscConfig+0x334>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fbc8 	bl	8000a40 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fbc4 	bl	8000a40 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e0b5      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ee      	bne.n	80012b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80012e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a1 	beq.w	8001434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d05c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d141      	bne.n	800138a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_RCC_OscConfig+0x478>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fb98 	bl	8000a40 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fb94 	bl	8000a40 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e087      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	085b      	lsrs	r3, r3, #1
 800134a:	3b01      	subs	r3, #1
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	491b      	ldr	r1, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x478>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fb6d 	bl	8000a40 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136a:	f7ff fb69 	bl	8000a40 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e05c      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x416>
 8001388:	e054      	b.n	8001434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_OscConfig+0x478>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb56 	bl	8000a40 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff fb52 	bl	8000a40 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e045      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_RCC_OscConfig+0x470>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x444>
 80013b6:	e03d      	b.n	8001434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e038      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000
 80013cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x4ec>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d028      	beq.n	8001430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d121      	bne.n	8001430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d11a      	bne.n	8001430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001400:	4013      	ands	r3, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001408:	4293      	cmp	r3, r2
 800140a:	d111      	bne.n	8001430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	085b      	lsrs	r3, r3, #1
 8001418:	3b01      	subs	r3, #1
 800141a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d107      	bne.n	8001430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0cc      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d90c      	bls.n	8001480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0b8      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d020      	beq.n	80014ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001498:	4b59      	ldr	r3, [pc, #356]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014bc:	4b50      	ldr	r3, [pc, #320]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	494d      	ldr	r1, [pc, #308]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d044      	beq.n	8001564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d119      	bne.n	8001522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e07f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d003      	beq.n	8001502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e06f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e067      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f023 0203 	bic.w	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4934      	ldr	r1, [pc, #208]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	4313      	orrs	r3, r2
 8001532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001534:	f7ff fa84 	bl	8000a40 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	e00a      	b.n	8001552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f7ff fa80 	bl	8000a40 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e04f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 020c 	and.w	r2, r3, #12
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d1eb      	bne.n	800153c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d20c      	bcs.n	800158c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e032      	b.n	80015f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4916      	ldr	r1, [pc, #88]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	490e      	ldr	r1, [pc, #56]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ca:	f000 f821 	bl	8001610 <HAL_RCC_GetSysClockFreq>
 80015ce:	4602      	mov	r2, r0
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	490a      	ldr	r1, [pc, #40]	; (8001604 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	5ccb      	ldrb	r3, [r1, r3]
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_RCC_ClockConfig+0x1c8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f93e 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00
 8001600:	40023800 	.word	0x40023800
 8001604:	08005d3c 	.word	0x08005d3c
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b090      	sub	sp, #64	; 0x40
 8001616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
 800161c:	2300      	movs	r3, #0
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_GetSysClockFreq+0x180>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d00d      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x40>
 8001634:	2b08      	cmp	r3, #8
 8001636:	f200 80a1 	bhi.w	800177c <HAL_RCC_GetSysClockFreq+0x16c>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x34>
 800163e:	2b04      	cmp	r3, #4
 8001640:	d003      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x3a>
 8001642:	e09b      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_GetSysClockFreq+0x184>)
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001648:	e09b      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_GetSysClockFreq+0x188>)
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800164e:	e098      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001650:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <HAL_RCC_GetSysClockFreq+0x180>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_RCC_GetSysClockFreq+0x180>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d028      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <HAL_RCC_GetSysClockFreq+0x180>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	099b      	lsrs	r3, r3, #6
 800166c:	2200      	movs	r2, #0
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	627a      	str	r2, [r7, #36]	; 0x24
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001678:	2100      	movs	r1, #0
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_GetSysClockFreq+0x188>)
 800167c:	fb03 f201 	mul.w	r2, r3, r1
 8001680:	2300      	movs	r3, #0
 8001682:	fb00 f303 	mul.w	r3, r0, r3
 8001686:	4413      	add	r3, r2
 8001688:	4a43      	ldr	r2, [pc, #268]	; (8001798 <HAL_RCC_GetSysClockFreq+0x188>)
 800168a:	fba0 1202 	umull	r1, r2, r0, r2
 800168e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001690:	460a      	mov	r2, r1
 8001692:	62ba      	str	r2, [r7, #40]	; 0x28
 8001694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001696:	4413      	add	r3, r2
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169c:	2200      	movs	r2, #0
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	61fa      	str	r2, [r7, #28]
 80016a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016aa:	f7fe fd91 	bl	80001d0 <__aeabi_uldivmod>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4613      	mov	r3, r2
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b6:	e053      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	2200      	movs	r2, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	617a      	str	r2, [r7, #20]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016ca:	f04f 0b00 	mov.w	fp, #0
 80016ce:	4652      	mov	r2, sl
 80016d0:	465b      	mov	r3, fp
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	0159      	lsls	r1, r3, #5
 80016dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e0:	0150      	lsls	r0, r2, #5
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	ebb2 080a 	subs.w	r8, r2, sl
 80016ea:	eb63 090b 	sbc.w	r9, r3, fp
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001702:	ebb2 0408 	subs.w	r4, r2, r8
 8001706:	eb63 0509 	sbc.w	r5, r3, r9
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	00eb      	lsls	r3, r5, #3
 8001714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001718:	00e2      	lsls	r2, r4, #3
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	eb14 030a 	adds.w	r3, r4, sl
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	eb45 030b 	adc.w	r3, r5, fp
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001736:	4629      	mov	r1, r5
 8001738:	028b      	lsls	r3, r1, #10
 800173a:	4621      	mov	r1, r4
 800173c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001740:	4621      	mov	r1, r4
 8001742:	028a      	lsls	r2, r1, #10
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	2200      	movs	r2, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	60fa      	str	r2, [r7, #12]
 8001750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001754:	f7fe fd3c 	bl	80001d0 <__aeabi_uldivmod>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4613      	mov	r3, r2
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_GetSysClockFreq+0x180>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800177a:	e002      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetSysClockFreq+0x184>)
 800177e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001784:	4618      	mov	r0, r3
 8001786:	3740      	adds	r7, #64	; 0x40
 8001788:	46bd      	mov	sp, r7
 800178a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	00f42400 	.word	0x00f42400
 8001798:	017d7840 	.word	0x017d7840

0800179c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000

080017b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017b8:	f7ff fff0 	bl	800179c <HAL_RCC_GetHCLKFreq>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	0a9b      	lsrs	r3, r3, #10
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	4903      	ldr	r1, [pc, #12]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ca:	5ccb      	ldrb	r3, [r1, r3]
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	08005d4c 	.word	0x08005d4c

080017dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017e0:	f7ff ffdc 	bl	800179c <HAL_RCC_GetHCLKFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	0b5b      	lsrs	r3, r3, #13
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	4903      	ldr	r1, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	08005d4c 	.word	0x08005d4c

08001804 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	220f      	movs	r2, #15
 8001812:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_GetClockConfig+0x5c>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_RCC_GetClockConfig+0x5c>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_GetClockConfig+0x5c>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_GetClockConfig+0x5c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_RCC_GetClockConfig+0x60>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0207 	and.w	r2, r3, #7
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e041      	b.n	80018fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f839 	bl	8001906 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f000 f9d8 	bl	8001c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d001      	beq.n	8001934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e04e      	b.n	80019d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d022      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195e:	d01d      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d018      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d013      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <HAL_TIM_Base_Start_IT+0xd0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00e      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x80>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d111      	bne.n	80019c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d010      	beq.n	80019d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019be:	e007      	b.n	80019d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40010000 	.word	0x40010000
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40000c00 	.word	0x40000c00
 80019f0:	40010400 	.word	0x40010400
 80019f4:	40014000 	.word	0x40014000
 80019f8:	40001800 	.word	0x40001800

080019fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d122      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d11b      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0202 	mvn.w	r2, #2
 8001a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f8ee 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 8001a44:	e005      	b.n	8001a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f8e0 	bl	8001c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8f1 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d122      	bne.n	8001aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d11b      	bne.n	8001aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0204 	mvn.w	r2, #4
 8001a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8c4 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 8001a98:	e005      	b.n	8001aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8b6 	bl	8001c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8c7 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d122      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d11b      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0208 	mvn.w	r2, #8
 8001ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f89a 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f88c 	bl	8001c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f89d 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d122      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d11b      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0210 	mvn.w	r2, #16
 8001b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f870 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 8001b40:	e005      	b.n	8001b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f862 	bl	8001c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f873 	bl	8001c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0201 	mvn.w	r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fdea 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b80      	cmp	r3, #128	; 0x80
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b80      	cmp	r3, #128	; 0x80
 8001b9a:	d107      	bne.n	8001bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f902 	bl	8001db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	2b40      	cmp	r3, #64	; 0x40
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc4:	2b40      	cmp	r3, #64	; 0x40
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f838 	bl	8001c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0220 	mvn.w	r2, #32
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8cc 	bl	8001d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a40      	ldr	r2, [pc, #256]	; (8001d70 <TIM_Base_SetConfig+0x114>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <TIM_Base_SetConfig+0x40>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d00f      	beq.n	8001c9c <TIM_Base_SetConfig+0x40>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3d      	ldr	r2, [pc, #244]	; (8001d74 <TIM_Base_SetConfig+0x118>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00b      	beq.n	8001c9c <TIM_Base_SetConfig+0x40>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <TIM_Base_SetConfig+0x11c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d007      	beq.n	8001c9c <TIM_Base_SetConfig+0x40>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3b      	ldr	r2, [pc, #236]	; (8001d7c <TIM_Base_SetConfig+0x120>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d003      	beq.n	8001c9c <TIM_Base_SetConfig+0x40>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3a      	ldr	r2, [pc, #232]	; (8001d80 <TIM_Base_SetConfig+0x124>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <TIM_Base_SetConfig+0x114>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d02b      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbc:	d027      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	; (8001d74 <TIM_Base_SetConfig+0x118>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d023      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <TIM_Base_SetConfig+0x11c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <TIM_Base_SetConfig+0x120>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01b      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <TIM_Base_SetConfig+0x124>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d017      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <TIM_Base_SetConfig+0x128>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <TIM_Base_SetConfig+0x12c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00f      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <TIM_Base_SetConfig+0x130>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00b      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <TIM_Base_SetConfig+0x134>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <TIM_Base_SetConfig+0x138>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d003      	beq.n	8001d0e <TIM_Base_SetConfig+0xb2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <TIM_Base_SetConfig+0x13c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d108      	bne.n	8001d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <TIM_Base_SetConfig+0x114>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <TIM_Base_SetConfig+0xf8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <TIM_Base_SetConfig+0x124>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d103      	bne.n	8001d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	615a      	str	r2, [r3, #20]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40010400 	.word	0x40010400
 8001d84:	40014000 	.word	0x40014000
 8001d88:	40014400 	.word	0x40014400
 8001d8c:	40014800 	.word	0x40014800
 8001d90:	40001800 	.word	0x40001800
 8001d94:	40001c00 	.word	0x40001c00
 8001d98:	40002000 	.word	0x40002000

08001d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e03f      	b.n	8001e56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fcf6 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f929 	bl	8002060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b08a      	sub	sp, #40	; 0x28
 8001e62:	af02      	add	r7, sp, #8
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d17c      	bne.n	8001f78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_UART_Transmit+0x2c>
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e075      	b.n	8001f7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_UART_Transmit+0x3e>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e06e      	b.n	8001f7a <HAL_UART_Transmit+0x11c>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2221      	movs	r2, #33	; 0x21
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe fdc5 	bl	8000a40 <HAL_GetTick>
 8001eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	88fa      	ldrh	r2, [r7, #6]
 8001ebc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	88fa      	ldrh	r2, [r7, #6]
 8001ec2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ecc:	d108      	bne.n	8001ee0 <HAL_UART_Transmit+0x82>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	e003      	b.n	8001ee8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ef0:	e02a      	b.n	8001f48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f840 	bl	8001f82 <UART_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e036      	b.n	8001f7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10b      	bne.n	8001f2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	3302      	adds	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e007      	b.n	8001f3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1cf      	bne.n	8001ef2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f810 	bl	8001f82 <UART_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e006      	b.n	8001f7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b090      	sub	sp, #64	; 0x40
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f92:	e050      	b.n	8002036 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d04c      	beq.n	8002036 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fa2:	f7fe fd4d 	bl	8000a40 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d241      	bcs.n	8002036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fd2:	637a      	str	r2, [r7, #52]	; 0x34
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fda:	e841 2300 	strex	r3, r2, [r1]
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e5      	bne.n	8001fb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3314      	adds	r3, #20
 8001fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	e853 3f00 	ldrex	r3, [r3]
 8001ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3314      	adds	r3, #20
 8002004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002006:	623a      	str	r2, [r7, #32]
 8002008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200a:	69f9      	ldr	r1, [r7, #28]
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	e841 2300 	strex	r3, r2, [r1]
 8002012:	61bb      	str	r3, [r7, #24]
   return(result);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e00f      	b.n	8002056 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4013      	ands	r3, r2
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	429a      	cmp	r2, r3
 8002052:	d09f      	beq.n	8001f94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3740      	adds	r7, #64	; 0x40
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002064:	b0c0      	sub	sp, #256	; 0x100
 8002066:	af00      	add	r7, sp, #0
 8002068:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	ea40 0301 	orr.w	r3, r0, r1
 8002088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	431a      	orrs	r2, r3
 8002098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	431a      	orrs	r2, r3
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020b8:	f021 010c 	bic.w	r1, r1, #12
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020c6:	430b      	orrs	r3, r1
 80020c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	6999      	ldr	r1, [r3, #24]
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	ea40 0301 	orr.w	r3, r0, r1
 80020e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b8f      	ldr	r3, [pc, #572]	; (800232c <UART_SetConfig+0x2cc>)
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d005      	beq.n	8002100 <UART_SetConfig+0xa0>
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b8d      	ldr	r3, [pc, #564]	; (8002330 <UART_SetConfig+0x2d0>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d104      	bne.n	800210a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002100:	f7ff fb6c 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8002104:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002108:	e003      	b.n	8002112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800210a:	f7ff fb53 	bl	80017b4 <HAL_RCC_GetPCLK1Freq>
 800210e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211c:	f040 810c 	bne.w	8002338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002124:	2200      	movs	r2, #0
 8002126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800212a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800212e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002132:	4622      	mov	r2, r4
 8002134:	462b      	mov	r3, r5
 8002136:	1891      	adds	r1, r2, r2
 8002138:	65b9      	str	r1, [r7, #88]	; 0x58
 800213a:	415b      	adcs	r3, r3
 800213c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800213e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002142:	4621      	mov	r1, r4
 8002144:	eb12 0801 	adds.w	r8, r2, r1
 8002148:	4629      	mov	r1, r5
 800214a:	eb43 0901 	adc.w	r9, r3, r1
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800215e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002162:	4690      	mov	r8, r2
 8002164:	4699      	mov	r9, r3
 8002166:	4623      	mov	r3, r4
 8002168:	eb18 0303 	adds.w	r3, r8, r3
 800216c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002170:	462b      	mov	r3, r5
 8002172:	eb49 0303 	adc.w	r3, r9, r3
 8002176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800217a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002186:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800218a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800218e:	460b      	mov	r3, r1
 8002190:	18db      	adds	r3, r3, r3
 8002192:	653b      	str	r3, [r7, #80]	; 0x50
 8002194:	4613      	mov	r3, r2
 8002196:	eb42 0303 	adc.w	r3, r2, r3
 800219a:	657b      	str	r3, [r7, #84]	; 0x54
 800219c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021a4:	f7fe f814 	bl	80001d0 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <UART_SetConfig+0x2d4>)
 80021ae:	fba3 2302 	umull	r2, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	011c      	lsls	r4, r3, #4
 80021b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021c8:	4642      	mov	r2, r8
 80021ca:	464b      	mov	r3, r9
 80021cc:	1891      	adds	r1, r2, r2
 80021ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80021d0:	415b      	adcs	r3, r3
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021d8:	4641      	mov	r1, r8
 80021da:	eb12 0a01 	adds.w	sl, r2, r1
 80021de:	4649      	mov	r1, r9
 80021e0:	eb43 0b01 	adc.w	fp, r3, r1
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f8:	4692      	mov	sl, r2
 80021fa:	469b      	mov	fp, r3
 80021fc:	4643      	mov	r3, r8
 80021fe:	eb1a 0303 	adds.w	r3, sl, r3
 8002202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002206:	464b      	mov	r3, r9
 8002208:	eb4b 0303 	adc.w	r3, fp, r3
 800220c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800221c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002224:	460b      	mov	r3, r1
 8002226:	18db      	adds	r3, r3, r3
 8002228:	643b      	str	r3, [r7, #64]	; 0x40
 800222a:	4613      	mov	r3, r2
 800222c:	eb42 0303 	adc.w	r3, r2, r3
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
 8002232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800223a:	f7fd ffc9 	bl	80001d0 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4611      	mov	r1, r2
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <UART_SetConfig+0x2d4>)
 8002246:	fba3 2301 	umull	r2, r3, r3, r1
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2264      	movs	r2, #100	; 0x64
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	1acb      	subs	r3, r1, r3
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800225a:	4b36      	ldr	r3, [pc, #216]	; (8002334 <UART_SetConfig+0x2d4>)
 800225c:	fba3 2302 	umull	r2, r3, r3, r2
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002268:	441c      	add	r4, r3
 800226a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002274:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	1891      	adds	r1, r2, r2
 8002282:	63b9      	str	r1, [r7, #56]	; 0x38
 8002284:	415b      	adcs	r3, r3
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800228c:	4641      	mov	r1, r8
 800228e:	1851      	adds	r1, r2, r1
 8002290:	6339      	str	r1, [r7, #48]	; 0x30
 8002292:	4649      	mov	r1, r9
 8002294:	414b      	adcs	r3, r1
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022a4:	4659      	mov	r1, fp
 80022a6:	00cb      	lsls	r3, r1, #3
 80022a8:	4651      	mov	r1, sl
 80022aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ae:	4651      	mov	r1, sl
 80022b0:	00ca      	lsls	r2, r1, #3
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	4642      	mov	r2, r8
 80022ba:	189b      	adds	r3, r3, r2
 80022bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022c0:	464b      	mov	r3, r9
 80022c2:	460a      	mov	r2, r1
 80022c4:	eb42 0303 	adc.w	r3, r2, r3
 80022c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022e0:	460b      	mov	r3, r1
 80022e2:	18db      	adds	r3, r3, r3
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e6:	4613      	mov	r3, r2
 80022e8:	eb42 0303 	adc.w	r3, r2, r3
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022f6:	f7fd ff6b 	bl	80001d0 <__aeabi_uldivmod>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <UART_SetConfig+0x2d4>)
 8002300:	fba3 1302 	umull	r1, r3, r3, r2
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	2164      	movs	r1, #100	; 0x64
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	3332      	adds	r3, #50	; 0x32
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <UART_SetConfig+0x2d4>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	f003 0207 	and.w	r2, r3, #7
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4422      	add	r2, r4
 8002326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002328:	e105      	b.n	8002536 <UART_SetConfig+0x4d6>
 800232a:	bf00      	nop
 800232c:	40011000 	.word	0x40011000
 8002330:	40011400 	.word	0x40011400
 8002334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233c:	2200      	movs	r2, #0
 800233e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002342:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800234a:	4642      	mov	r2, r8
 800234c:	464b      	mov	r3, r9
 800234e:	1891      	adds	r1, r2, r2
 8002350:	6239      	str	r1, [r7, #32]
 8002352:	415b      	adcs	r3, r3
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800235a:	4641      	mov	r1, r8
 800235c:	1854      	adds	r4, r2, r1
 800235e:	4649      	mov	r1, r9
 8002360:	eb43 0501 	adc.w	r5, r3, r1
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	00eb      	lsls	r3, r5, #3
 800236e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002372:	00e2      	lsls	r2, r4, #3
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4643      	mov	r3, r8
 800237a:	18e3      	adds	r3, r4, r3
 800237c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002380:	464b      	mov	r3, r9
 8002382:	eb45 0303 	adc.w	r3, r5, r3
 8002386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023a6:	4629      	mov	r1, r5
 80023a8:	008b      	lsls	r3, r1, #2
 80023aa:	4621      	mov	r1, r4
 80023ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b0:	4621      	mov	r1, r4
 80023b2:	008a      	lsls	r2, r1, #2
 80023b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023b8:	f7fd ff0a 	bl	80001d0 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4b60      	ldr	r3, [pc, #384]	; (8002544 <UART_SetConfig+0x4e4>)
 80023c2:	fba3 2302 	umull	r2, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	011c      	lsls	r4, r3, #4
 80023ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ce:	2200      	movs	r2, #0
 80023d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023dc:	4642      	mov	r2, r8
 80023de:	464b      	mov	r3, r9
 80023e0:	1891      	adds	r1, r2, r2
 80023e2:	61b9      	str	r1, [r7, #24]
 80023e4:	415b      	adcs	r3, r3
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ec:	4641      	mov	r1, r8
 80023ee:	1851      	adds	r1, r2, r1
 80023f0:	6139      	str	r1, [r7, #16]
 80023f2:	4649      	mov	r1, r9
 80023f4:	414b      	adcs	r3, r1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002404:	4659      	mov	r1, fp
 8002406:	00cb      	lsls	r3, r1, #3
 8002408:	4651      	mov	r1, sl
 800240a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800240e:	4651      	mov	r1, sl
 8002410:	00ca      	lsls	r2, r1, #3
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	4603      	mov	r3, r0
 8002418:	4642      	mov	r2, r8
 800241a:	189b      	adds	r3, r3, r2
 800241c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002420:	464b      	mov	r3, r9
 8002422:	460a      	mov	r2, r1
 8002424:	eb42 0303 	adc.w	r3, r2, r3
 8002428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
 8002436:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002444:	4649      	mov	r1, r9
 8002446:	008b      	lsls	r3, r1, #2
 8002448:	4641      	mov	r1, r8
 800244a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800244e:	4641      	mov	r1, r8
 8002450:	008a      	lsls	r2, r1, #2
 8002452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002456:	f7fd febb 	bl	80001d0 <__aeabi_uldivmod>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <UART_SetConfig+0x4e4>)
 8002460:	fba3 1302 	umull	r1, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	2164      	movs	r1, #100	; 0x64
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	3332      	adds	r3, #50	; 0x32
 8002472:	4a34      	ldr	r2, [pc, #208]	; (8002544 <UART_SetConfig+0x4e4>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247e:	441c      	add	r4, r3
 8002480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002484:	2200      	movs	r2, #0
 8002486:	673b      	str	r3, [r7, #112]	; 0x70
 8002488:	677a      	str	r2, [r7, #116]	; 0x74
 800248a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800248e:	4642      	mov	r2, r8
 8002490:	464b      	mov	r3, r9
 8002492:	1891      	adds	r1, r2, r2
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	415b      	adcs	r3, r3
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800249e:	4641      	mov	r1, r8
 80024a0:	1851      	adds	r1, r2, r1
 80024a2:	6039      	str	r1, [r7, #0]
 80024a4:	4649      	mov	r1, r9
 80024a6:	414b      	adcs	r3, r1
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024b6:	4659      	mov	r1, fp
 80024b8:	00cb      	lsls	r3, r1, #3
 80024ba:	4651      	mov	r1, sl
 80024bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024c0:	4651      	mov	r1, sl
 80024c2:	00ca      	lsls	r2, r1, #3
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	4642      	mov	r2, r8
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80024d0:	464b      	mov	r3, r9
 80024d2:	460a      	mov	r2, r1
 80024d4:	eb42 0303 	adc.w	r3, r2, r3
 80024d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
 80024e4:	667a      	str	r2, [r7, #100]	; 0x64
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024f2:	4649      	mov	r1, r9
 80024f4:	008b      	lsls	r3, r1, #2
 80024f6:	4641      	mov	r1, r8
 80024f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024fc:	4641      	mov	r1, r8
 80024fe:	008a      	lsls	r2, r1, #2
 8002500:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002504:	f7fd fe64 	bl	80001d0 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <UART_SetConfig+0x4e4>)
 800250e:	fba3 1302 	umull	r1, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2164      	movs	r1, #100	; 0x64
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	3332      	adds	r3, #50	; 0x32
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <UART_SetConfig+0x4e4>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4422      	add	r2, r4
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <__NVIC_SetPriority>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <SysTick_Handler+0x1c>)
 80025a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025a4:	f002 f8f4 	bl	8004790 <xTaskGetSchedulerState>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025ae:	f002 ffdb 	bl	8005568 <xPortSysTickHandler>
  }
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025c0:	2100      	movs	r1, #0
 80025c2:	f06f 0004 	mvn.w	r0, #4
 80025c6:	f7ff ffbf 	bl	8002548 <__NVIC_SetPriority>
#endif
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d6:	f3ef 8305 	mrs	r3, IPSR
 80025da:	603b      	str	r3, [r7, #0]
  return(result);
 80025dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80025e2:	f06f 0305 	mvn.w	r3, #5
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	e00c      	b.n	8002604 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <osKernelInitialize+0x44>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <osKernelInitialize+0x44>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	e002      	b.n	8002604 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000134 	.word	0x20000134

08002618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800261e:	f3ef 8305 	mrs	r3, IPSR
 8002622:	603b      	str	r3, [r7, #0]
  return(result);
 8002624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <osKernelStart+0x1a>
    stat = osErrorISR;
 800262a:	f06f 0305 	mvn.w	r3, #5
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	e010      	b.n	8002654 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <osKernelStart+0x48>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d109      	bne.n	800264e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800263a:	f7ff ffbf 	bl	80025bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <osKernelStart+0x48>)
 8002640:	2202      	movs	r2, #2
 8002642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002644:	f001 fc48 	bl	8003ed8 <vTaskStartScheduler>
      stat = osOK;
 8002648:	2300      	movs	r3, #0
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	e002      	b.n	8002654 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000134 	.word	0x20000134

08002664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b08e      	sub	sp, #56	; 0x38
 8002668:	af04      	add	r7, sp, #16
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002674:	f3ef 8305 	mrs	r3, IPSR
 8002678:	617b      	str	r3, [r7, #20]
  return(result);
 800267a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800267c:	2b00      	cmp	r3, #0
 800267e:	d17e      	bne.n	800277e <osThreadNew+0x11a>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07b      	beq.n	800277e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800268a:	2318      	movs	r3, #24
 800268c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d045      	beq.n	800272a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <osThreadNew+0x48>
        name = attr->name;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <osThreadNew+0x6e>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b38      	cmp	r3, #56	; 0x38
 80026c4:	d805      	bhi.n	80026d2 <osThreadNew+0x6e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <osThreadNew+0x72>
        return (NULL);
 80026d2:	2300      	movs	r3, #0
 80026d4:	e054      	b.n	8002780 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <osThreadNew+0xa8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2bbb      	cmp	r3, #187	; 0xbb
 80026f4:	d90a      	bls.n	800270c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <osThreadNew+0xa8>
        mem = 1;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e010      	b.n	800272e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <osThreadNew+0xca>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d108      	bne.n	800272e <osThreadNew+0xca>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <osThreadNew+0xca>
          mem = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e001      	b.n	800272e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d110      	bne.n	8002756 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800273c:	9202      	str	r2, [sp, #8]
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6a3a      	ldr	r2, [r7, #32]
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 f9d8 	bl	8003b00 <xTaskCreateStatic>
 8002750:	4603      	mov	r3, r0
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e013      	b.n	800277e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	b29a      	uxth	r2, r3
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f001 fa23 	bl	8003bba <xTaskCreate>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <osThreadNew+0x11a>
            hTask = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800277e:	693b      	ldr	r3, [r7, #16]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002790:	f3ef 8305 	mrs	r3, IPSR
 8002794:	60bb      	str	r3, [r7, #8]
  return(result);
 8002796:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <osDelay+0x1c>
    stat = osErrorISR;
 800279c:	f06f 0305 	mvn.w	r3, #5
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e007      	b.n	80027b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f001 fb5e 	bl	8003e70 <vTaskDelay>
    }
  }

  return (stat);
 80027b4:	68fb      	ldr	r3, [r7, #12]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80027be:	b580      	push	{r7, lr}
 80027c0:	b08a      	sub	sp, #40	; 0x28
 80027c2:	af02      	add	r7, sp, #8
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ce:	f3ef 8305 	mrs	r3, IPSR
 80027d2:	613b      	str	r3, [r7, #16]
  return(result);
 80027d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d175      	bne.n	80028c6 <osSemaphoreNew+0x108>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d072      	beq.n	80028c6 <osSemaphoreNew+0x108>
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d86e      	bhi.n	80028c6 <osSemaphoreNew+0x108>
    mem = -1;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <osSemaphoreNew+0x4c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b4f      	cmp	r3, #79	; 0x4f
 8002802:	d902      	bls.n	800280a <osSemaphoreNew+0x4c>
        mem = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	e00c      	b.n	8002824 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <osSemaphoreNew+0x66>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <osSemaphoreNew+0x66>
          mem = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e001      	b.n	8002824 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d04c      	beq.n	80028c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d128      	bne.n	8002884 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10a      	bne.n	800284e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2203      	movs	r2, #3
 800283e:	9200      	str	r2, [sp, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	2001      	movs	r0, #1
 8002846:	f000 fa05 	bl	8002c54 <xQueueGenericCreateStatic>
 800284a:	61f8      	str	r0, [r7, #28]
 800284c:	e005      	b.n	800285a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800284e:	2203      	movs	r2, #3
 8002850:	2100      	movs	r1, #0
 8002852:	2001      	movs	r0, #1
 8002854:	f000 fa76 	bl	8002d44 <xQueueGenericCreate>
 8002858:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d022      	beq.n	80028a6 <osSemaphoreNew+0xe8>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01f      	beq.n	80028a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002866:	2300      	movs	r3, #0
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	69f8      	ldr	r0, [r7, #28]
 800286e:	f000 fb31 	bl	8002ed4 <xQueueGenericSend>
 8002872:	4603      	mov	r3, r0
 8002874:	2b01      	cmp	r3, #1
 8002876:	d016      	beq.n	80028a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002878:	69f8      	ldr	r0, [r7, #28]
 800287a:	f000 ff6d 	bl	8003758 <vQueueDelete>
            hSemaphore = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e010      	b.n	80028a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d108      	bne.n	800289c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	461a      	mov	r2, r3
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fab3 	bl	8002dfe <xQueueCreateCountingSemaphoreStatic>
 8002898:	61f8      	str	r0, [r7, #28]
 800289a:	e004      	b.n	80028a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fae4 	bl	8002e6c <xQueueCreateCountingSemaphore>
 80028a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e001      	b.n	80028be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	69f8      	ldr	r0, [r7, #28]
 80028c2:	f001 f895 	bl	80039f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80028c6:	69fb      	ldr	r3, [r7, #28]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80028e8:	f06f 0303 	mvn.w	r3, #3
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e039      	b.n	8002964 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f0:	f3ef 8305 	mrs	r3, IPSR
 80028f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80028f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d022      	beq.n	8002942 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002902:	f06f 0303 	mvn.w	r3, #3
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e02c      	b.n	8002964 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	461a      	mov	r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	6938      	ldr	r0, [r7, #16]
 8002918:	f000 fe62 	bl	80035e0 <xQueueReceiveFromISR>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d003      	beq.n	800292a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002922:	f06f 0302 	mvn.w	r3, #2
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e01c      	b.n	8002964 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d019      	beq.n	8002964 <osSemaphoreAcquire+0x94>
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <osSemaphoreAcquire+0xa0>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	e010      	b.n	8002964 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002942:	6839      	ldr	r1, [r7, #0]
 8002944:	6938      	ldr	r0, [r7, #16]
 8002946:	f000 fd3f 	bl	80033c8 <xQueueSemaphoreTake>
 800294a:	4603      	mov	r3, r0
 800294c:	2b01      	cmp	r3, #1
 800294e:	d009      	beq.n	8002964 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002956:	f06f 0301 	mvn.w	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e002      	b.n	8002964 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800295e:	f06f 0302 	mvn.w	r3, #2
 8002962:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002964:	697b      	ldr	r3, [r7, #20]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <osSemaphoreGetCount>:
  }

  return (stat);
}

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <osSemaphoreGetCount+0x18>
    count = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e00e      	b.n	80029aa <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800298c:	f3ef 8305 	mrs	r3, IPSR
 8002990:	60fb      	str	r3, [r7, #12]
  return(result);
 8002992:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8002998:	6938      	ldr	r0, [r7, #16]
 800299a:	f000 febf 	bl	800371c <uxQueueMessagesWaitingFromISR>
 800299e:	6178      	str	r0, [r7, #20]
 80029a0:	e003      	b.n	80029aa <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80029a2:	6938      	ldr	r0, [r7, #16]
 80029a4:	f000 fe9c 	bl	80036e0 <uxQueueMessagesWaiting>
 80029a8:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80029aa:	697b      	ldr	r3, [r7, #20]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80029c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4a06      	ldr	r2, [pc, #24]	; (80029e4 <vApplicationGetIdleTaskMemory+0x30>)
 80029ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000138 	.word	0x20000138
 80029e4:	200001f4 	.word	0x200001f4

080029e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <vApplicationGetTimerTaskMemory+0x2c>)
 80029f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <vApplicationGetTimerTaskMemory+0x30>)
 80029fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a06:	601a      	str	r2, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	200003f4 	.word	0x200003f4
 8002a18:	200004b0 	.word	0x200004b0

08002a1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f103 0208 	add.w	r2, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 0208 	add.w	r2, r3, #8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f103 0208 	add.w	r2, r3, #8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d103      	bne.n	8002ade <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e00c      	b.n	8002af8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e002      	b.n	8002aec <vListInsert+0x2e>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d2f6      	bcs.n	8002ae6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6852      	ldr	r2, [r2, #4]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d103      	bne.n	8002b64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bae:	f002 fc49 	bl	8005444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	3b01      	subs	r3, #1
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	441a      	add	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d114      	bne.n	8002c2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01a      	beq.n	8002c42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fbfb 	bl	800440c <xTaskRemoveFromEventList>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <xQueueGenericReset+0xcc>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	e009      	b.n	8002c42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3310      	adds	r3, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fef2 	bl	8002a1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3324      	adds	r3, #36	; 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff feed 	bl	8002a1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c42:	f002 fc2f 	bl	80054a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <xQueueGenericCreateStatic+0x52>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <xQueueGenericCreateStatic+0x56>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <xQueueGenericCreateStatic+0x58>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	623b      	str	r3, [r7, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	e7fe      	b.n	8002cc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xQueueGenericCreateStatic+0x7e>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericCreateStatic+0x82>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericCreateStatic+0x84>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61fb      	str	r3, [r7, #28]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cf2:	2350      	movs	r3, #80	; 0x50
 8002cf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b50      	cmp	r3, #80	; 0x50
 8002cfa:	d00a      	beq.n	8002d12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61bb      	str	r3, [r7, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00d      	beq.n	8002d3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f83f 	bl	8002db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	613b      	str	r3, [r7, #16]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3350      	adds	r3, #80	; 0x50
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fc83 	bl	8005688 <pvPortMalloc>
 8002d82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d011      	beq.n	8002dae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3350      	adds	r3, #80	; 0x50
 8002d92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f805 	bl	8002db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dae:	69bb      	ldr	r3, [r7, #24]
	}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e002      	b.n	8002dda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002de6:	2101      	movs	r1, #1
 8002de8:	69b8      	ldr	r0, [r7, #24]
 8002dea:	f7ff fecb 	bl	8002b84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b08a      	sub	sp, #40	; 0x28
 8002e02:	af02      	add	r7, sp, #8
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61bb      	str	r3, [r7, #24]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d90a      	bls.n	8002e44 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	617b      	str	r3, [r7, #20]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e44:	2302      	movs	r3, #2
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff00 	bl	8002c54 <xQueueGenericCreateStatic>
 8002e54:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002e62:	69fb      	ldr	r3, [r7, #28]
	}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	613b      	str	r3, [r7, #16]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d90a      	bls.n	8002eb0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60fb      	str	r3, [r7, #12]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff45 	bl	8002d44 <xQueueGenericCreate>
 8002eba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ec8:	697b      	ldr	r3, [r7, #20]
	}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08e      	sub	sp, #56	; 0x38
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <xQueueGenericSend+0x32>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <xQueueGenericSend+0x40>
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <xQueueGenericSend+0x44>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <xQueueGenericSend+0x46>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <xQueueGenericSend+0x60>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d103      	bne.n	8002f42 <xQueueGenericSend+0x6e>
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <xQueueGenericSend+0x72>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <xQueueGenericSend+0x74>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	623b      	str	r3, [r7, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f62:	f001 fc15 	bl	8004790 <xTaskGetSchedulerState>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <xQueueGenericSend+0x9e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <xQueueGenericSend+0xa2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericSend+0xa4>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61fb      	str	r3, [r7, #28]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f92:	f002 fa57 	bl	8005444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <xQueueGenericSend+0xd4>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d129      	bne.n	8002ffc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fae:	f000 fc0e 	bl	80037ce <prvCopyDataToQueue>
 8002fb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	3324      	adds	r3, #36	; 0x24
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 fa23 	bl	800440c <xTaskRemoveFromEventList>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <xQueueGenericSend+0x1f8>)
 8002fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	e00a      	b.n	8002ff4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fe4:	4b39      	ldr	r3, [pc, #228]	; (80030cc <xQueueGenericSend+0x1f8>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ff4:	f002 fa56 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e063      	b.n	80030c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003002:	f002 fa4f 	bl	80054a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003006:	2300      	movs	r3, #0
 8003008:	e05c      	b.n	80030c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fa5d 	bl	80044d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800301a:	2301      	movs	r3, #1
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800301e:	f002 fa41 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003022:	f000 ffc9 	bl	8003fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003026:	f002 fa0d 	bl	8005444 <vPortEnterCritical>
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003030:	b25b      	sxtb	r3, r3
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d103      	bne.n	8003040 <xQueueGenericSend+0x16c>
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d103      	bne.n	8003056 <xQueueGenericSend+0x182>
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003056:	f002 fa25 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800305a:	1d3a      	adds	r2, r7, #4
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f001 fa4c 	bl	8004500 <xTaskCheckForTimeOut>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d124      	bne.n	80030b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800306e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003070:	f000 fca5 	bl	80039be <prvIsQueueFull>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d018      	beq.n	80030ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	3310      	adds	r3, #16
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f972 	bl	800436c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800308a:	f000 fc30 	bl	80038ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800308e:	f000 ffa1 	bl	8003fd4 <xTaskResumeAll>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f af7c 	bne.w	8002f92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <xQueueGenericSend+0x1f8>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	e772      	b.n	8002f92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ae:	f000 fc1e 	bl	80038ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030b2:	f000 ff8f 	bl	8003fd4 <xTaskResumeAll>
 80030b6:	e76c      	b.n	8002f92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ba:	f000 fc18 	bl	80038ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030be:	f000 ff89 	bl	8003fd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3738      	adds	r7, #56	; 0x38
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b090      	sub	sp, #64	; 0x40
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <xQueueGenericSendFromISR+0x3c>
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <xQueueGenericSendFromISR+0x40>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <xQueueGenericSendFromISR+0x42>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d103      	bne.n	800313a <xQueueGenericSendFromISR+0x6a>
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <xQueueGenericSendFromISR+0x6e>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <xQueueGenericSendFromISR+0x70>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	623b      	str	r3, [r7, #32]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800315a:	f002 fa55 	bl	8005608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800315e:	f3ef 8211 	mrs	r2, BASEPRI
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	61fa      	str	r2, [r7, #28]
 8003174:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003176:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <xQueueGenericSendFromISR+0xbc>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d12f      	bne.n	80031ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031a2:	f000 fb14 	bl	80037ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d112      	bne.n	80031d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	3324      	adds	r3, #36	; 0x24
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f925 	bl	800440c <xTaskRemoveFromEventList>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e007      	b.n	80031e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031da:	3301      	adds	r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	b25a      	sxtb	r2, r3
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031e6:	2301      	movs	r3, #1
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031ea:	e001      	b.n	80031f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3740      	adds	r7, #64	; 0x40
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <xQueueReceive+0x30>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	623b      	str	r3, [r7, #32]
}
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <xQueueReceive+0x3e>
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <xQueueReceive+0x42>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <xQueueReceive+0x44>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <xQueueReceive+0x5e>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61fb      	str	r3, [r7, #28]
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003266:	f001 fa93 	bl	8004790 <xTaskGetSchedulerState>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <xQueueReceive+0x6e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <xQueueReceive+0x72>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xQueueReceive+0x74>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xQueueReceive+0x8e>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61bb      	str	r3, [r7, #24]
}
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003296:	f002 f8d5 	bl	8005444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01f      	beq.n	80032e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032aa:	f000 fafa 	bl	80038a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00f      	beq.n	80032de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	3310      	adds	r3, #16
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f8a2 	bl	800440c <xTaskRemoveFromEventList>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ce:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <xQueueReceive+0x1bc>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032de:	f002 f8e1 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e069      	b.n	80033ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ec:	f002 f8da 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e062      	b.n	80033ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032fa:	f107 0310 	add.w	r3, r7, #16
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f8e8 	bl	80044d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003308:	f002 f8cc 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800330c:	f000 fe54 	bl	8003fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003310:	f002 f898 	bl	8005444 <vPortEnterCritical>
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800331a:	b25b      	sxtb	r3, r3
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d103      	bne.n	800332a <xQueueReceive+0x122>
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003330:	b25b      	sxtb	r3, r3
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d103      	bne.n	8003340 <xQueueReceive+0x138>
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003340:	f002 f8b0 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003344:	1d3a      	adds	r2, r7, #4
 8003346:	f107 0310 	add.w	r3, r7, #16
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f001 f8d7 	bl	8004500 <xTaskCheckForTimeOut>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d123      	bne.n	80033a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800335a:	f000 fb1a 	bl	8003992 <prvIsQueueEmpty>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	3324      	adds	r3, #36	; 0x24
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fffd 	bl	800436c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003374:	f000 fabb 	bl	80038ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003378:	f000 fe2c 	bl	8003fd4 <xTaskResumeAll>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d189      	bne.n	8003296 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <xQueueReceive+0x1bc>)
 8003384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	e780      	b.n	8003296 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003396:	f000 faaa 	bl	80038ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800339a:	f000 fe1b 	bl	8003fd4 <xTaskResumeAll>
 800339e:	e77a      	b.n	8003296 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a2:	f000 faa4 	bl	80038ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033a6:	f000 fe15 	bl	8003fd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ac:	f000 faf1 	bl	8003992 <prvIsQueueEmpty>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f43f af6f 	beq.w	8003296 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3730      	adds	r7, #48	; 0x30
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	623b      	str	r3, [r7, #32]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	61fb      	str	r3, [r7, #28]
}
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003418:	f001 f9ba 	bl	8004790 <xTaskGetSchedulerState>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <xQueueSemaphoreTake+0x60>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <xQueueSemaphoreTake+0x64>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <xQueueSemaphoreTake+0x66>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	61bb      	str	r3, [r7, #24]
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003448:	f001 fffc 	bl	8005444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d024      	beq.n	80034a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	1e5a      	subs	r2, r3, #1
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003468:	f001 fb08 	bl	8004a7c <pvTaskIncrementMutexHeldCount>
 800346c:	4602      	mov	r2, r0
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00f      	beq.n	800349a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	3310      	adds	r3, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ffc4 	bl	800440c <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800348a:	4b54      	ldr	r3, [pc, #336]	; (80035dc <xQueueSemaphoreTake+0x214>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800349a:	f002 f803 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 800349e:	2301      	movs	r3, #1
 80034a0:	e097      	b.n	80035d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	617b      	str	r3, [r7, #20]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80034c4:	f001 ffee 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e082      	b.n	80035d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fffc 	bl	80044d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034dc:	2301      	movs	r3, #1
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034e0:	f001 ffe0 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034e4:	f000 fd68 	bl	8003fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034e8:	f001 ffac 	bl	8005444 <vPortEnterCritical>
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d103      	bne.n	8003502 <xQueueSemaphoreTake+0x13a>
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003508:	b25b      	sxtb	r3, r3
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d103      	bne.n	8003518 <xQueueSemaphoreTake+0x150>
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003518:	f001 ffc4 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800351c:	463a      	mov	r2, r7
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f000 ffeb 	bl	8004500 <xTaskCheckForTimeOut>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d132      	bne.n	8003596 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003532:	f000 fa2e 	bl	8003992 <prvIsQueueEmpty>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d026      	beq.n	800358a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003544:	f001 ff7e 	bl	8005444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f93d 	bl	80047cc <xTaskPriorityInherit>
 8003552:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003554:	f001 ffa6 	bl	80054a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 ff03 	bl	800436c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003568:	f000 f9c1 	bl	80038ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800356c:	f000 fd32 	bl	8003fd4 <xTaskResumeAll>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f47f af68 	bne.w	8003448 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <xQueueSemaphoreTake+0x214>)
 800357a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	e75e      	b.n	8003448 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800358a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800358c:	f000 f9af 	bl	80038ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003590:	f000 fd20 	bl	8003fd4 <xTaskResumeAll>
 8003594:	e758      	b.n	8003448 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003598:	f000 f9a9 	bl	80038ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800359c:	f000 fd1a 	bl	8003fd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035a2:	f000 f9f6 	bl	8003992 <prvIsQueueEmpty>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f43f af4d 	beq.w	8003448 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80035b4:	f001 ff46 	bl	8005444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ba:	f000 f8f0 	bl	800379e <prvGetDisinheritPriorityAfterTimeout>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 f9d6 	bl	8004978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80035cc:	f001 ff6a 	bl	80054a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3738      	adds	r7, #56	; 0x38
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08e      	sub	sp, #56	; 0x38
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	623b      	str	r3, [r7, #32]
}
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <xQueueReceiveFromISR+0x3a>
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <xQueueReceiveFromISR+0x3e>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <xQueueReceiveFromISR+0x40>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	61fb      	str	r3, [r7, #28]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800363a:	f001 ffe5 	bl	8005608 <vPortValidateInterruptPriority>
	__asm volatile
 800363e:	f3ef 8211 	mrs	r2, BASEPRI
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	61ba      	str	r2, [r7, #24]
 8003654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02f      	beq.n	80036c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800366c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003674:	f000 f915 	bl	80038a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	1e5a      	subs	r2, r3, #1
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d112      	bne.n	80036b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	3310      	adds	r3, #16
 8003696:	4618      	mov	r0, r3
 8003698:	f000 feb8 	bl	800440c <xTaskRemoveFromEventList>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e007      	b.n	80036c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b4:	3301      	adds	r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	b25a      	sxtb	r2, r3
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80036c0:	2301      	movs	r3, #1
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
 80036c4:	e001      	b.n	80036ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f383 8811 	msr	BASEPRI, r3
}
 80036d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3738      	adds	r7, #56	; 0x38
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	60bb      	str	r3, [r7, #8]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003704:	f001 fe9e 	bl	8005444 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800370e:	f001 fec9 	bl	80054a4 <vPortExitCritical>

	return uxReturn;
 8003712:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	60fb      	str	r3, [r7, #12]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800374a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <vQueueDelete+0x28>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60bb      	str	r3, [r7, #8]
}
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f95f 	bl	8003a44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f002 f845 	bl	8005820 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e001      	b.n	80037c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037c0:	68fb      	ldr	r3, [r7, #12]
	}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d14d      	bne.n	8003890 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 f84f 	bl	800489c <xTaskPriorityDisinherit>
 80037fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	e043      	b.n	8003890 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d119      	bne.n	8003842 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6858      	ldr	r0, [r3, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	461a      	mov	r2, r3
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	f002 f945 	bl	8005aa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	441a      	add	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d32b      	bcc.n	8003890 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	e026      	b.n	8003890 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68d8      	ldr	r0, [r3, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	461a      	mov	r2, r3
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	f002 f92b 	bl	8005aa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	425b      	negs	r3, r3
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d207      	bcs.n	800387e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	425b      	negs	r3, r3
 8003878:	441a      	add	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d105      	bne.n	8003890 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3b01      	subs	r3, #1
 800388e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003898:	697b      	ldr	r3, [r7, #20]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d303      	bcc.n	80038d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	461a      	mov	r2, r3
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f002 f8e1 	bl	8005aa8 <memcpy>
	}
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038f6:	f001 fda5 	bl	8005444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003900:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003902:	e011      	b.n	8003928 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fd7b 	bl	800440c <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800391c:	f000 fe52 	bl	80045c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3b01      	subs	r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dce9      	bgt.n	8003904 <prvUnlockQueue+0x16>
 8003930:	e000      	b.n	8003934 <prvUnlockQueue+0x46>
					break;
 8003932:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800393c:	f001 fdb2 	bl	80054a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003940:	f001 fd80 	bl	8005444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800394c:	e011      	b.n	8003972 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d012      	beq.n	800397c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3310      	adds	r3, #16
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fd56 	bl	800440c <xTaskRemoveFromEventList>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003966:	f000 fe2d 	bl	80045c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	3b01      	subs	r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003976:	2b00      	cmp	r3, #0
 8003978:	dce9      	bgt.n	800394e <prvUnlockQueue+0x60>
 800397a:	e000      	b.n	800397e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800397c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003986:	f001 fd8d 	bl	80054a4 <vPortExitCritical>
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800399a:	f001 fd53 	bl	8005444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e001      	b.n	80039b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039b0:	f001 fd78 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80039b4:	68fb      	ldr	r3, [r7, #12]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039c6:	f001 fd3d 	bl	8005444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d102      	bne.n	80039dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e001      	b.n	80039e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039e0:	f001 fd60 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e014      	b.n	8003a2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <vQueueAddToRegistry+0x50>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a0c:	490c      	ldr	r1, [pc, #48]	; (8003a40 <vQueueAddToRegistry+0x50>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <vQueueAddToRegistry+0x50>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a22:	e006      	b.n	8003a32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b07      	cmp	r3, #7
 8003a2e:	d9e7      	bls.n	8003a00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	200008b0 	.word	0x200008b0

08003a44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e016      	b.n	8003a80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <vQueueUnregisterQueue+0x50>)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10b      	bne.n	8003a7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <vQueueUnregisterQueue+0x50>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2100      	movs	r1, #0
 8003a68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003a6c:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <vQueueUnregisterQueue+0x50>)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
				break;
 8003a78:	e006      	b.n	8003a88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b07      	cmp	r3, #7
 8003a84:	d9e5      	bls.n	8003a52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	200008b0 	.word	0x200008b0

08003a98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003aa8:	f001 fccc 	bl	8005444 <vPortEnterCritical>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d103      	bne.n	8003ac2 <vQueueWaitForMessageRestricted+0x2a>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d103      	bne.n	8003ad8 <vQueueWaitForMessageRestricted+0x40>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad8:	f001 fce4 	bl	80054a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fc61 	bl	80043b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff fefb 	bl	80038ee <prvUnlockQueue>
	}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	; 0x38
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b46:	23bc      	movs	r3, #188	; 0xbc
 8003b48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2bbc      	cmp	r3, #188	; 0xbc
 8003b4e:	d00a      	beq.n	8003b66 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61bb      	str	r3, [r7, #24]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <xTaskCreateStatic+0xac>
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b86:	2300      	movs	r3, #0
 8003b88:	9303      	str	r3, [sp, #12]
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f850 	bl	8003c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba6:	f000 f8f3 	bl	8003d90 <prvAddNewTaskToReadyList>
 8003baa:	e001      	b.n	8003bb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bb0:	697b      	ldr	r3, [r7, #20]
	}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3728      	adds	r7, #40	; 0x28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08c      	sub	sp, #48	; 0x30
 8003bbe:	af04      	add	r7, sp, #16
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fd5a 	bl	8005688 <pvPortMalloc>
 8003bd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bdc:	20bc      	movs	r0, #188	; 0xbc
 8003bde:	f001 fd53 	bl	8005688 <pvPortMalloc>
 8003be2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf0:	e005      	b.n	8003bfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f001 fe14 	bl	8005820 <vPortFree>
 8003bf8:	e001      	b.n	8003bfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d017      	beq.n	8003c34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9303      	str	r3, [sp, #12]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	9302      	str	r3, [sp, #8]
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f80e 	bl	8003c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c28:	69f8      	ldr	r0, [r7, #28]
 8003c2a:	f000 f8b1 	bl	8003d90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e002      	b.n	8003c3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	21a5      	movs	r1, #165	; 0xa5
 8003c5e:	f001 ff31 	bl	8005ac4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f023 0307 	bic.w	r3, r3, #7
 8003c7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	617b      	str	r3, [r7, #20]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01f      	beq.n	8003ce2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e012      	b.n	8003cce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	7819      	ldrb	r1, [r3, #0]
 8003cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3334      	adds	r3, #52	; 0x34
 8003cb8:	460a      	mov	r2, r1
 8003cba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d006      	beq.n	8003cd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d9e9      	bls.n	8003ca8 <prvInitialiseNewTask+0x64>
 8003cd4:	e000      	b.n	8003cd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003cd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ce0:	e003      	b.n	8003cea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	2b37      	cmp	r3, #55	; 0x37
 8003cee:	d901      	bls.n	8003cf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cf0:	2337      	movs	r3, #55	; 0x37
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	2200      	movs	r2, #0
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fea6 	bl	8002a5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	3318      	adds	r3, #24
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fea1 	bl	8002a5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	3354      	adds	r3, #84	; 0x54
 8003d44:	2260      	movs	r2, #96	; 0x60
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 febb 	bl	8005ac4 <memset>
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	4a0c      	ldr	r2, [pc, #48]	; (8003d84 <prvInitialiseNewTask+0x140>)
 8003d52:	659a      	str	r2, [r3, #88]	; 0x58
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <prvInitialiseNewTask+0x144>)
 8003d58:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <prvInitialiseNewTask+0x148>)
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	69b8      	ldr	r0, [r7, #24]
 8003d66:	f001 fa3f 	bl	80051e8 <pxPortInitialiseStack>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d7c:	bf00      	nop
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	08005d74 	.word	0x08005d74
 8003d88:	08005d94 	.word	0x08005d94
 8003d8c:	08005d54 	.word	0x08005d54

08003d90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d98:	f001 fb54 	bl	8005444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <prvAddNewTaskToReadyList+0xc4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <prvAddNewTaskToReadyList+0xc4>)
 8003da4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <prvAddNewTaskToReadyList+0xc8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dae:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <prvAddNewTaskToReadyList+0xc8>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <prvAddNewTaskToReadyList+0xc4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d110      	bne.n	8003dde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dbc:	f000 fc26 	bl	800460c <prvInitialiseTaskLists>
 8003dc0:	e00d      	b.n	8003dde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <prvAddNewTaskToReadyList+0xcc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <prvAddNewTaskToReadyList+0xc8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d802      	bhi.n	8003dde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <prvAddNewTaskToReadyList+0xc8>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <prvAddNewTaskToReadyList+0xd0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <prvAddNewTaskToReadyList+0xd0>)
 8003de6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <prvAddNewTaskToReadyList+0xd0>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <prvAddNewTaskToReadyList+0xd4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d903      	bls.n	8003e04 <prvAddNewTaskToReadyList+0x74>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <prvAddNewTaskToReadyList+0xd4>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <prvAddNewTaskToReadyList+0xd8>)
 8003e12:	441a      	add	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7fe fe2b 	bl	8002a76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e20:	f001 fb40 	bl	80054a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <prvAddNewTaskToReadyList+0xcc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <prvAddNewTaskToReadyList+0xc8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d207      	bcs.n	8003e4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <prvAddNewTaskToReadyList+0xdc>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000dc4 	.word	0x20000dc4
 8003e58:	200008f0 	.word	0x200008f0
 8003e5c:	20000dd0 	.word	0x20000dd0
 8003e60:	20000de0 	.word	0x20000de0
 8003e64:	20000dcc 	.word	0x20000dcc
 8003e68:	200008f4 	.word	0x200008f4
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d017      	beq.n	8003eb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <vTaskDelay+0x60>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <vTaskDelay+0x30>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60bb      	str	r3, [r7, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ea0:	f000 f88a 	bl	8003fb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fdfc 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003eac:	f000 f892 	bl	8003fd4 <xTaskResumeAll>
 8003eb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <vTaskDelay+0x64>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000dec 	.word	0x20000dec
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ee6:	463a      	mov	r2, r7
 8003ee8:	1d39      	adds	r1, r7, #4
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fd60 	bl	80029b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	9202      	str	r2, [sp, #8]
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	460a      	mov	r2, r1
 8003f06:	4924      	ldr	r1, [pc, #144]	; (8003f98 <vTaskStartScheduler+0xc0>)
 8003f08:	4824      	ldr	r0, [pc, #144]	; (8003f9c <vTaskStartScheduler+0xc4>)
 8003f0a:	f7ff fdf9 	bl	8003b00 <xTaskCreateStatic>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <vTaskStartScheduler+0xc8>)
 8003f12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <vTaskStartScheduler+0xc8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e001      	b.n	8003f26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d102      	bne.n	8003f32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f2c:	f000 fe0e 	bl	8004b4c <xTimerCreateTimerTask>
 8003f30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11b      	bne.n	8003f70 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	613b      	str	r3, [r7, #16]
}
 8003f4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <vTaskStartScheduler+0xcc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3354      	adds	r3, #84	; 0x54
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <vTaskStartScheduler+0xd0>)
 8003f54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <vTaskStartScheduler+0xd4>)
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <vTaskStartScheduler+0xd8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <vTaskStartScheduler+0xdc>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f6a:	f001 f9c9 	bl	8005300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f6e:	e00e      	b.n	8003f8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d10a      	bne.n	8003f8e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60fb      	str	r3, [r7, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <vTaskStartScheduler+0xb4>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	08005ca8 	.word	0x08005ca8
 8003f9c:	080045dd 	.word	0x080045dd
 8003fa0:	20000de8 	.word	0x20000de8
 8003fa4:	200008f0 	.word	0x200008f0
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	20000de4 	.word	0x20000de4
 8003fb0:	20000dd0 	.word	0x20000dd0
 8003fb4:	20000dc8 	.word	0x20000dc8

08003fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <vTaskSuspendAll+0x18>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <vTaskSuspendAll+0x18>)
 8003fc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000dec 	.word	0x20000dec

08003fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fe2:	4b42      	ldr	r3, [pc, #264]	; (80040ec <xTaskResumeAll+0x118>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004000:	f001 fa20 	bl	8005444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <xTaskResumeAll+0x118>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	4a38      	ldr	r2, [pc, #224]	; (80040ec <xTaskResumeAll+0x118>)
 800400c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400e:	4b37      	ldr	r3, [pc, #220]	; (80040ec <xTaskResumeAll+0x118>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d162      	bne.n	80040dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <xTaskResumeAll+0x11c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d05e      	beq.n	80040dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800401e:	e02f      	b.n	8004080 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004020:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <xTaskResumeAll+0x120>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3318      	adds	r3, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fd7f 	bl	8002b30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fd7a 	bl	8002b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <xTaskResumeAll+0x124>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d903      	bls.n	8004050 <xTaskResumeAll+0x7c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <xTaskResumeAll+0x124>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <xTaskResumeAll+0x128>)
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f7fe fd05 	bl	8002a76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4b23      	ldr	r3, [pc, #140]	; (8004100 <xTaskResumeAll+0x12c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <xTaskResumeAll+0x130>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <xTaskResumeAll+0x120>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1cb      	bne.n	8004020 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800408e:	f000 fb5f 	bl	8004750 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <xTaskResumeAll+0x134>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800409e:	f000 f847 	bl	8004130 <xTaskIncrementTick>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <xTaskResumeAll+0x130>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f1      	bne.n	800409e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <xTaskResumeAll+0x134>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <xTaskResumeAll+0x130>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <xTaskResumeAll+0x138>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040dc:	f001 f9e2 	bl	80054a4 <vPortExitCritical>

	return xAlreadyYielded;
 80040e0:	68bb      	ldr	r3, [r7, #8]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000dec 	.word	0x20000dec
 80040f0:	20000dc4 	.word	0x20000dc4
 80040f4:	20000d84 	.word	0x20000d84
 80040f8:	20000dcc 	.word	0x20000dcc
 80040fc:	200008f4 	.word	0x200008f4
 8004100:	200008f0 	.word	0x200008f0
 8004104:	20000dd8 	.word	0x20000dd8
 8004108:	20000dd4 	.word	0x20000dd4
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <xTaskGetTickCount+0x1c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800411c:	687b      	ldr	r3, [r7, #4]
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000dc8 	.word	0x20000dc8

08004130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413a:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <xTaskIncrementTick+0x148>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 808f 	bne.w	8004262 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004144:	4b4d      	ldr	r3, [pc, #308]	; (800427c <xTaskIncrementTick+0x14c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800414c:	4a4b      	ldr	r2, [pc, #300]	; (800427c <xTaskIncrementTick+0x14c>)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d120      	bne.n	800419a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004158:	4b49      	ldr	r3, [pc, #292]	; (8004280 <xTaskIncrementTick+0x150>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <xTaskIncrementTick+0x48>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	603b      	str	r3, [r7, #0]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xTaskIncrementTick+0x46>
 8004178:	4b41      	ldr	r3, [pc, #260]	; (8004280 <xTaskIncrementTick+0x150>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <xTaskIncrementTick+0x154>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3f      	ldr	r2, [pc, #252]	; (8004280 <xTaskIncrementTick+0x150>)
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <xTaskIncrementTick+0x154>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <xTaskIncrementTick+0x158>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	4a3d      	ldr	r2, [pc, #244]	; (8004288 <xTaskIncrementTick+0x158>)
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	f000 fadb 	bl	8004750 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800419a:	4b3c      	ldr	r3, [pc, #240]	; (800428c <xTaskIncrementTick+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d349      	bcc.n	8004238 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <xTaskIncrementTick+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <xTaskIncrementTick+0x15c>)
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	601a      	str	r2, [r3, #0]
					break;
 80041b6:	e03f      	b.n	8004238 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <xTaskIncrementTick+0x150>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d203      	bcs.n	80041d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041d0:	4a2e      	ldr	r2, [pc, #184]	; (800428c <xTaskIncrementTick+0x15c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041d6:	e02f      	b.n	8004238 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fca7 	bl	8002b30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	3318      	adds	r3, #24
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fc9e 	bl	8002b30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <xTaskIncrementTick+0x160>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d903      	bls.n	8004208 <xTaskIncrementTick+0xd8>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <xTaskIncrementTick+0x160>)
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <xTaskIncrementTick+0x164>)
 8004216:	441a      	add	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f7fe fc29 	bl	8002a76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <xTaskIncrementTick+0x168>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	429a      	cmp	r2, r3
 8004230:	d3b8      	bcc.n	80041a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004232:	2301      	movs	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004236:	e7b5      	b.n	80041a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <xTaskIncrementTick+0x168>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4915      	ldr	r1, [pc, #84]	; (8004294 <xTaskIncrementTick+0x164>)
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d901      	bls.n	8004254 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004250:	2301      	movs	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <xTaskIncrementTick+0x16c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e004      	b.n	800426c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004262:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <xTaskIncrementTick+0x170>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <xTaskIncrementTick+0x170>)
 800426a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800426c:	697b      	ldr	r3, [r7, #20]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000dec 	.word	0x20000dec
 800427c:	20000dc8 	.word	0x20000dc8
 8004280:	20000d7c 	.word	0x20000d7c
 8004284:	20000d80 	.word	0x20000d80
 8004288:	20000ddc 	.word	0x20000ddc
 800428c:	20000de4 	.word	0x20000de4
 8004290:	20000dcc 	.word	0x20000dcc
 8004294:	200008f4 	.word	0x200008f4
 8004298:	200008f0 	.word	0x200008f0
 800429c:	20000dd8 	.word	0x20000dd8
 80042a0:	20000dd4 	.word	0x20000dd4

080042a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <vTaskSwitchContext+0xb0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <vTaskSwitchContext+0xb4>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042b8:	e046      	b.n	8004348 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80042ba:	4b27      	ldr	r3, [pc, #156]	; (8004358 <vTaskSwitchContext+0xb4>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c0:	4b26      	ldr	r3, [pc, #152]	; (800435c <vTaskSwitchContext+0xb8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e010      	b.n	80042ea <vTaskSwitchContext+0x46>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vTaskSwitchContext+0x3e>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	491d      	ldr	r1, [pc, #116]	; (8004360 <vTaskSwitchContext+0xbc>)
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0e4      	beq.n	80042c8 <vTaskSwitchContext+0x24>
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <vTaskSwitchContext+0xbc>)
 800430a:	4413      	add	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3308      	adds	r3, #8
 8004320:	429a      	cmp	r2, r3
 8004322:	d104      	bne.n	800432e <vTaskSwitchContext+0x8a>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <vTaskSwitchContext+0xc0>)
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4a08      	ldr	r2, [pc, #32]	; (800435c <vTaskSwitchContext+0xb8>)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <vTaskSwitchContext+0xc0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3354      	adds	r3, #84	; 0x54
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <vTaskSwitchContext+0xc4>)
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	20000dec 	.word	0x20000dec
 8004358:	20000dd8 	.word	0x20000dd8
 800435c:	20000dcc 	.word	0x20000dcc
 8004360:	200008f4 	.word	0x200008f4
 8004364:	200008f0 	.word	0x200008f0
 8004368:	20000010 	.word	0x20000010

0800436c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <vTaskPlaceOnEventList+0x44>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3318      	adds	r3, #24
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fe fb8f 	bl	8002abe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043a0:	2101      	movs	r1, #1
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	f000 fb7e 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200008f0 	.word	0x200008f0

080043b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	617b      	str	r3, [r7, #20]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <vTaskPlaceOnEventListRestricted+0x54>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3318      	adds	r3, #24
 80043e2:	4619      	mov	r1, r3
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7fe fb46 	bl	8002a76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	68b8      	ldr	r0, [r7, #8]
 80043fa:	f000 fb53 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
	}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200008f0 	.word	0x200008f0

0800440c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60fb      	str	r3, [r7, #12]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	3318      	adds	r3, #24
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fb77 	bl	8002b30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <xTaskRemoveFromEventList+0xb0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11d      	bne.n	8004486 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3304      	adds	r3, #4
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fb6e 	bl	8002b30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <xTaskRemoveFromEventList+0xb4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d903      	bls.n	8004468 <xTaskRemoveFromEventList+0x5c>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <xTaskRemoveFromEventList+0xb4>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <xTaskRemoveFromEventList+0xb8>)
 8004476:	441a      	add	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3304      	adds	r3, #4
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7fe faf9 	bl	8002a76 <vListInsertEnd>
 8004484:	e005      	b.n	8004492 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3318      	adds	r3, #24
 800448a:	4619      	mov	r1, r3
 800448c:	480e      	ldr	r0, [pc, #56]	; (80044c8 <xTaskRemoveFromEventList+0xbc>)
 800448e:	f7fe faf2 	bl	8002a76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <xTaskRemoveFromEventList+0xc0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d905      	bls.n	80044ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <xTaskRemoveFromEventList+0xc4>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e001      	b.n	80044b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044b0:	697b      	ldr	r3, [r7, #20]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000dec 	.word	0x20000dec
 80044c0:	20000dcc 	.word	0x20000dcc
 80044c4:	200008f4 	.word	0x200008f4
 80044c8:	20000d84 	.word	0x20000d84
 80044cc:	200008f0 	.word	0x200008f0
 80044d0:	20000dd8 	.word	0x20000dd8

080044d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <vTaskInternalSetTimeOutState+0x24>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <vTaskInternalSetTimeOutState+0x28>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	605a      	str	r2, [r3, #4]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	20000ddc 	.word	0x20000ddc
 80044fc:	20000dc8 	.word	0x20000dc8

08004500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60fb      	str	r3, [r7, #12]
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004542:	f000 ff7f 	bl	8005444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <xTaskCheckForTimeOut+0xbc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e023      	b.n	80045ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <xTaskCheckForTimeOut+0xc0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d007      	beq.n	8004582 <xTaskCheckForTimeOut+0x82>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	e015      	b.n	80045ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	429a      	cmp	r2, r3
 800458a:	d20b      	bcs.n	80045a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff9b 	bl	80044d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e004      	b.n	80045ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f000 ff79 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80045b2:	69fb      	ldr	r3, [r7, #28]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000dc8 	.word	0x20000dc8
 80045c0:	20000ddc 	.word	0x20000ddc

080045c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <vTaskMissedYield+0x14>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000dd8 	.word	0x20000dd8

080045dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045e4:	f000 f852 	bl	800468c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <prvIdleTask+0x28>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d9f9      	bls.n	80045e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <prvIdleTask+0x2c>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004600:	e7f0      	b.n	80045e4 <prvIdleTask+0x8>
 8004602:	bf00      	nop
 8004604:	200008f4 	.word	0x200008f4
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	e00c      	b.n	8004632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <prvInitialiseTaskLists+0x60>)
 8004624:	4413      	add	r3, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe f9f8 	bl	8002a1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b37      	cmp	r3, #55	; 0x37
 8004636:	d9ef      	bls.n	8004618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004638:	480d      	ldr	r0, [pc, #52]	; (8004670 <prvInitialiseTaskLists+0x64>)
 800463a:	f7fe f9ef 	bl	8002a1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800463e:	480d      	ldr	r0, [pc, #52]	; (8004674 <prvInitialiseTaskLists+0x68>)
 8004640:	f7fe f9ec 	bl	8002a1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004644:	480c      	ldr	r0, [pc, #48]	; (8004678 <prvInitialiseTaskLists+0x6c>)
 8004646:	f7fe f9e9 	bl	8002a1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800464a:	480c      	ldr	r0, [pc, #48]	; (800467c <prvInitialiseTaskLists+0x70>)
 800464c:	f7fe f9e6 	bl	8002a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004650:	480b      	ldr	r0, [pc, #44]	; (8004680 <prvInitialiseTaskLists+0x74>)
 8004652:	f7fe f9e3 	bl	8002a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <prvInitialiseTaskLists+0x78>)
 8004658:	4a05      	ldr	r2, [pc, #20]	; (8004670 <prvInitialiseTaskLists+0x64>)
 800465a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <prvInitialiseTaskLists+0x7c>)
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <prvInitialiseTaskLists+0x68>)
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200008f4 	.word	0x200008f4
 8004670:	20000d54 	.word	0x20000d54
 8004674:	20000d68 	.word	0x20000d68
 8004678:	20000d84 	.word	0x20000d84
 800467c:	20000d98 	.word	0x20000d98
 8004680:	20000db0 	.word	0x20000db0
 8004684:	20000d7c 	.word	0x20000d7c
 8004688:	20000d80 	.word	0x20000d80

0800468c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004692:	e019      	b.n	80046c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004694:	f000 fed6 	bl	8005444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <prvCheckTasksWaitingTermination+0x50>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe fa43 	bl	8002b30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <prvCheckTasksWaitingTermination+0x54>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <prvCheckTasksWaitingTermination+0x54>)
 80046b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <prvCheckTasksWaitingTermination+0x58>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <prvCheckTasksWaitingTermination+0x58>)
 80046bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046be:	f000 fef1 	bl	80054a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f810 	bl	80046e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <prvCheckTasksWaitingTermination+0x58>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e1      	bne.n	8004694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000d98 	.word	0x20000d98
 80046e0:	20000dc4 	.word	0x20000dc4
 80046e4:	20000dac 	.word	0x20000dac

080046e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3354      	adds	r3, #84	; 0x54
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f9fb 	bl	8005af0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f889 	bl	8005820 <vPortFree>
				vPortFree( pxTCB );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 f886 	bl	8005820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004714:	e018      	b.n	8004748 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800471c:	2b01      	cmp	r3, #1
 800471e:	d103      	bne.n	8004728 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 f87d 	bl	8005820 <vPortFree>
	}
 8004726:	e00f      	b.n	8004748 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800472e:	2b02      	cmp	r3, #2
 8004730:	d00a      	beq.n	8004748 <prvDeleteTCB+0x60>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <prvDeleteTCB+0x5e>
	}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <prvResetNextTaskUnblockTime+0x38>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <prvResetNextTaskUnblockTime+0x3c>)
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004768:	e008      	b.n	800477c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <prvResetNextTaskUnblockTime+0x38>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <prvResetNextTaskUnblockTime+0x3c>)
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	20000d7c 	.word	0x20000d7c
 800478c:	20000de4 	.word	0x20000de4

08004790 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <xTaskGetSchedulerState+0x34>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800479e:	2301      	movs	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	e008      	b.n	80047b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <xTaskGetSchedulerState+0x38>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047ac:	2302      	movs	r3, #2
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	e001      	b.n	80047b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047b6:	687b      	ldr	r3, [r7, #4]
	}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000dd0 	.word	0x20000dd0
 80047c8:	20000dec 	.word	0x20000dec

080047cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d051      	beq.n	8004886 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <xTaskPriorityInherit+0xc4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d241      	bcs.n	8004874 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	db06      	blt.n	8004806 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <xTaskPriorityInherit+0xc4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <xTaskPriorityInherit+0xc8>)
 8004818:	4413      	add	r3, r2
 800481a:	4299      	cmp	r1, r3
 800481c:	d122      	bne.n	8004864 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe f984 	bl	8002b30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <xTaskPriorityInherit+0xc4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4b18      	ldr	r3, [pc, #96]	; (8004898 <xTaskPriorityInherit+0xcc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d903      	bls.n	8004846 <xTaskPriorityInherit+0x7a>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <xTaskPriorityInherit+0xcc>)
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <xTaskPriorityInherit+0xc8>)
 8004854:	441a      	add	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fe f90a 	bl	8002a76 <vListInsertEnd>
 8004862:	e004      	b.n	800486e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <xTaskPriorityInherit+0xc4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e008      	b.n	8004886 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <xTaskPriorityInherit+0xc4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	429a      	cmp	r2, r3
 8004880:	d201      	bcs.n	8004886 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004882:	2301      	movs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004886:	68fb      	ldr	r3, [r7, #12]
	}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	200008f0 	.word	0x200008f0
 8004894:	200008f4 	.word	0x200008f4
 8004898:	20000dcc 	.word	0x20000dcc

0800489c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d056      	beq.n	8004960 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048b2:	4b2e      	ldr	r3, [pc, #184]	; (800496c <xTaskPriorityDisinherit+0xd0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d00a      	beq.n	80048d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	60fb      	str	r3, [r7, #12]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60bb      	str	r3, [r7, #8]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	429a      	cmp	r2, r3
 8004904:	d02c      	beq.n	8004960 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490a:	2b00      	cmp	r3, #0
 800490c:	d128      	bne.n	8004960 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3304      	adds	r3, #4
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe f90c 	bl	8002b30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <xTaskPriorityDisinherit+0xd4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <xTaskPriorityDisinherit+0xa4>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <xTaskPriorityDisinherit+0xd4>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <xTaskPriorityDisinherit+0xd8>)
 800494e:	441a      	add	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fe f88d 	bl	8002a76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004960:	697b      	ldr	r3, [r7, #20]
	}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200008f0 	.word	0x200008f0
 8004970:	20000dcc 	.word	0x20000dcc
 8004974:	200008f4 	.word	0x200008f4

08004978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d06a      	beq.n	8004a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d902      	bls.n	80049be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	e002      	b.n	80049c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d04b      	beq.n	8004a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d146      	bne.n	8004a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049d8:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d10a      	bne.n	80049f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60bb      	str	r3, [r7, #8]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db04      	blt.n	8004a16 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	6959      	ldr	r1, [r3, #20]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004a26:	4413      	add	r3, r2
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	d11c      	bne.n	8004a66 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe f87d 	bl	8002b30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d903      	bls.n	8004a4a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004a58:	441a      	add	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f7fe f808 	bl	8002a76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a66:	bf00      	nop
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200008f0 	.word	0x200008f0
 8004a74:	200008f4 	.word	0x200008f4
 8004a78:	20000dcc 	.word	0x20000dcc

08004a7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a8e:	3201      	adds	r2, #1
 8004a90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004a92:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a94:	681b      	ldr	r3, [r3, #0]
	}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	200008f0 	.word	0x200008f0

08004aa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aae:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab4:	4b20      	ldr	r3, [pc, #128]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe f838 	bl	8002b30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d10a      	bne.n	8004ade <prvAddCurrentTaskToDelayedList+0x3a>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4819      	ldr	r0, [pc, #100]	; (8004b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ad8:	f7fd ffcd 	bl	8002a76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004adc:	e026      	b.n	8004b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d209      	bcs.n	8004b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af6:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fd ffdb 	bl	8002abe <vListInsert>
}
 8004b08:	e010      	b.n	8004b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fd ffd1 	bl	8002abe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d202      	bcs.n	8004b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000dc8 	.word	0x20000dc8
 8004b38:	200008f0 	.word	0x200008f0
 8004b3c:	20000db0 	.word	0x20000db0
 8004b40:	20000d80 	.word	0x20000d80
 8004b44:	20000d7c 	.word	0x20000d7c
 8004b48:	20000de4 	.word	0x20000de4

08004b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b56:	f000 fb07 	bl	8005168 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <xTimerCreateTimerTask+0x80>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d021      	beq.n	8004ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b6a:	1d3a      	adds	r2, r7, #4
 8004b6c:	f107 0108 	add.w	r1, r7, #8
 8004b70:	f107 030c 	add.w	r3, r7, #12
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fd ff37 	bl	80029e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	9202      	str	r2, [sp, #8]
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	2302      	movs	r3, #2
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	4910      	ldr	r1, [pc, #64]	; (8004bd0 <xTimerCreateTimerTask+0x84>)
 8004b8e:	4811      	ldr	r0, [pc, #68]	; (8004bd4 <xTimerCreateTimerTask+0x88>)
 8004b90:	f7fe ffb6 	bl	8003b00 <xTaskCreateStatic>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <xTimerCreateTimerTask+0x8c>)
 8004b98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <xTimerCreateTimerTask+0x8c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	613b      	str	r3, [r7, #16]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000e20 	.word	0x20000e20
 8004bd0:	08005cb0 	.word	0x08005cb0
 8004bd4:	08004d11 	.word	0x08004d11
 8004bd8:	20000e24 	.word	0x20000e24

08004bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	623b      	str	r3, [r7, #32]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d02a      	beq.n	8004c68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	dc18      	bgt.n	8004c56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c24:	f7ff fdb4 	bl	8004790 <xTaskGetSchedulerState>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d109      	bne.n	8004c42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f107 0110 	add.w	r1, r7, #16
 8004c36:	2300      	movs	r3, #0
 8004c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3a:	f7fe f94b 	bl	8002ed4 <xQueueGenericSend>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c40:	e012      	b.n	8004c68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f107 0110 	add.w	r1, r7, #16
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f7fe f941 	bl	8002ed4 <xQueueGenericSend>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24
 8004c54:	e008      	b.n	8004c68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f107 0110 	add.w	r1, r7, #16
 8004c5e:	2300      	movs	r3, #0
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	f7fe fa35 	bl	80030d0 <xQueueGenericSendFromISR>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000e20 	.word	0x20000e20

08004c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <prvProcessExpiredTimer+0x94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd ff4d 	bl	8002b30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d022      	beq.n	8004cea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	18d1      	adds	r1, r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	6978      	ldr	r0, [r7, #20]
 8004cb2:	f000 f8d1 	bl	8004e58 <prvInsertTimerInActiveList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01f      	beq.n	8004cfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6978      	ldr	r0, [r7, #20]
 8004cc8:	f7ff ff88 	bl	8004bdc <xTimerGenericCommand>
 8004ccc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d113      	bne.n	8004cfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	6978      	ldr	r0, [r7, #20]
 8004d02:	4798      	blx	r3
}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000e18 	.word	0x20000e18

08004d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 f857 	bl	8004dd0 <prvGetNextExpireTime>
 8004d22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f803 	bl	8004d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d2e:	f000 f8d5 	bl	8004edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d32:	e7f1      	b.n	8004d18 <prvTimerTask+0x8>

08004d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d3e:	f7ff f93b 	bl	8003fb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f866 	bl	8004e18 <prvSampleTimeNow>
 8004d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d130      	bne.n	8004db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <prvProcessTimerOrBlockTask+0x3c>
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d806      	bhi.n	8004d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d62:	f7ff f937 	bl	8003fd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff85 	bl	8004c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d6e:	e024      	b.n	8004dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <prvProcessTimerOrBlockTask+0x90>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <prvProcessTimerOrBlockTask+0x50>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <prvProcessTimerOrBlockTask+0x52>
 8004d84:	2300      	movs	r3, #0
 8004d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <prvProcessTimerOrBlockTask+0x94>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	f7fe fe7f 	bl	8003a98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d9a:	f7ff f91b 	bl	8003fd4 <xTaskResumeAll>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <prvProcessTimerOrBlockTask+0x98>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
}
 8004db4:	e001      	b.n	8004dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004db6:	f7ff f90d 	bl	8003fd4 <xTaskResumeAll>
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000e1c 	.word	0x20000e1c
 8004dc8:	20000e20 	.word	0x20000e20
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <prvGetNextExpireTime+0x44>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <prvGetNextExpireTime+0x16>
 8004de2:	2201      	movs	r2, #1
 8004de4:	e000      	b.n	8004de8 <prvGetNextExpireTime+0x18>
 8004de6:	2200      	movs	r2, #0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <prvGetNextExpireTime+0x44>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e001      	b.n	8004e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000e18 	.word	0x20000e18

08004e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e20:	f7ff f976 	bl	8004110 <xTaskGetTickCount>
 8004e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <prvSampleTimeNow+0x3c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d205      	bcs.n	8004e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e30:	f000 f936 	bl	80050a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <prvSampleTimeNow+0x3c>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000e28 	.word	0x20000e28

08004e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d812      	bhi.n	8004ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e01b      	b.n	8004eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <prvInsertTimerInActiveList+0x7c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7fd fe0e 	bl	8002abe <vListInsert>
 8004ea2:	e012      	b.n	8004eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d206      	bcs.n	8004eba <prvInsertTimerInActiveList+0x62>
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e007      	b.n	8004eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <prvInsertTimerInActiveList+0x80>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fd fdfa 	bl	8002abe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004eca:	697b      	ldr	r3, [r7, #20]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000e1c 	.word	0x20000e1c
 8004ed8:	20000e18 	.word	0x20000e18

08004edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee2:	e0ca      	b.n	800507a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da18      	bge.n	8004f1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	3304      	adds	r3, #4
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	61fb      	str	r3, [r7, #28]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f12:	6850      	ldr	r0, [r2, #4]
 8004f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f2c0 80aa 	blt.w	8005078 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd fdfb 	bl	8002b30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff ff6b 	bl	8004e18 <prvSampleTimeNow>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b09      	cmp	r3, #9
 8004f48:	f200 8097 	bhi.w	800507a <prvProcessReceivedCommands+0x19e>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <prvProcessReceivedCommands+0x78>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004ff1 	.word	0x08004ff1
 8004f64:	08005005 	.word	0x08005005
 8004f68:	0800504f 	.word	0x0800504f
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f7d 	.word	0x08004f7d
 8004f74:	08004ff1 	.word	0x08004ff1
 8004f78:	08005005 	.word	0x08005005
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	18d1      	adds	r1, r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9c:	f7ff ff5c 	bl	8004e58 <prvInsertTimerInActiveList>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d069      	beq.n	800507a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05e      	beq.n	800507a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	441a      	add	r2, r3
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2100      	movs	r1, #0
 8004fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fce:	f7ff fe05 	bl	8004bdc <xTimerGenericCommand>
 8004fd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d14f      	bne.n	800507a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	61bb      	str	r3, [r7, #24]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005002:	e03a      	b.n	800507a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	617b      	str	r3, [r7, #20]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	18d1      	adds	r1, r2, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005048:	f7ff ff06 	bl	8004e58 <prvInsertTimerInActiveList>
					break;
 800504c:	e015      	b.n	800507a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800505c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505e:	f000 fbdf 	bl	8005820 <vPortFree>
 8005062:	e00a      	b.n	800507a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005076:	e000      	b.n	800507a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005078:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <prvProcessReceivedCommands+0x1c0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1d39      	adds	r1, r7, #4
 8005080:	2200      	movs	r2, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe f8c0 	bl	8003208 <xQueueReceive>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f47f af2a 	bne.w	8004ee4 <prvProcessReceivedCommands+0x8>
	}
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3730      	adds	r7, #48	; 0x30
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000e20 	.word	0x20000e20

080050a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050a6:	e048      	b.n	800513a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a8:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <prvSwitchTimerLists+0xc0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b2:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <prvSwitchTimerLists+0xc0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fd fd35 	bl	8002b30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d02e      	beq.n	800513a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d90e      	bls.n	800510c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050fa:	4b19      	ldr	r3, [pc, #100]	; (8005160 <prvSwitchTimerLists+0xc0>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7fd fcda 	bl	8002abe <vListInsert>
 800510a:	e016      	b.n	800513a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	2100      	movs	r1, #0
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fd60 	bl	8004bdc <xTimerGenericCommand>
 800511c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	603b      	str	r3, [r7, #0]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <prvSwitchTimerLists+0xc0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1b1      	bne.n	80050a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <prvSwitchTimerLists+0xc0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <prvSwitchTimerLists+0xc4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a04      	ldr	r2, [pc, #16]	; (8005160 <prvSwitchTimerLists+0xc0>)
 8005150:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005152:	4a04      	ldr	r2, [pc, #16]	; (8005164 <prvSwitchTimerLists+0xc4>)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000e18 	.word	0x20000e18
 8005164:	20000e1c 	.word	0x20000e1c

08005168 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800516e:	f000 f969 	bl	8005444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <prvCheckForValidListAndQueue+0x60>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d120      	bne.n	80051bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800517a:	4814      	ldr	r0, [pc, #80]	; (80051cc <prvCheckForValidListAndQueue+0x64>)
 800517c:	f7fd fc4e 	bl	8002a1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005180:	4813      	ldr	r0, [pc, #76]	; (80051d0 <prvCheckForValidListAndQueue+0x68>)
 8005182:	f7fd fc4b 	bl	8002a1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <prvCheckForValidListAndQueue+0x6c>)
 8005188:	4a10      	ldr	r2, [pc, #64]	; (80051cc <prvCheckForValidListAndQueue+0x64>)
 800518a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <prvCheckForValidListAndQueue+0x70>)
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <prvCheckForValidListAndQueue+0x68>)
 8005190:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <prvCheckForValidListAndQueue+0x74>)
 8005198:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <prvCheckForValidListAndQueue+0x78>)
 800519a:	2110      	movs	r1, #16
 800519c:	200a      	movs	r0, #10
 800519e:	f7fd fd59 	bl	8002c54 <xQueueGenericCreateStatic>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <prvCheckForValidListAndQueue+0x60>)
 80051a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <prvCheckForValidListAndQueue+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <prvCheckForValidListAndQueue+0x60>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	490b      	ldr	r1, [pc, #44]	; (80051e4 <prvCheckForValidListAndQueue+0x7c>)
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fc1a 	bl	80039f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051bc:	f000 f972 	bl	80054a4 <vPortExitCritical>
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000e20 	.word	0x20000e20
 80051cc:	20000df0 	.word	0x20000df0
 80051d0:	20000e04 	.word	0x20000e04
 80051d4:	20000e18 	.word	0x20000e18
 80051d8:	20000e1c 	.word	0x20000e1c
 80051dc:	20000ecc 	.word	0x20000ecc
 80051e0:	20000e2c 	.word	0x20000e2c
 80051e4:	08005cb8 	.word	0x08005cb8

080051e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b04      	subs	r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3b04      	subs	r3, #4
 8005206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b04      	subs	r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005218:	4a0c      	ldr	r2, [pc, #48]	; (800524c <pxPortInitialiseStack+0x64>)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b14      	subs	r3, #20
 8005222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b04      	subs	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f06f 0202 	mvn.w	r2, #2
 8005236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b20      	subs	r3, #32
 800523c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	08005251 	.word	0x08005251

08005250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <prvTaskExitError+0x54>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d00a      	beq.n	800527a <prvTaskExitError+0x2a>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60fb      	str	r3, [r7, #12]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <prvTaskExitError+0x28>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60bb      	str	r3, [r7, #8]
}
 800528c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800528e:	bf00      	nop
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0fc      	beq.n	8005290 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	2000000c 	.word	0x2000000c
	...

080052b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <pxCurrentTCBConst2>)
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	f380 8809 	msr	PSP, r0
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	4770      	bx	lr
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst2>:
 80052d0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052d8:	4808      	ldr	r0, [pc, #32]	; (80052fc <prvPortStartFirstTask+0x24>)
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f380 8808 	msr	MSP, r0
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8814 	msr	CONTROL, r0
 80052ea:	b662      	cpsie	i
 80052ec:	b661      	cpsie	f
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	df00      	svc	0
 80052f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052fa:	bf00      	nop
 80052fc:	e000ed08 	.word	0xe000ed08

08005300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005306:	4b46      	ldr	r3, [pc, #280]	; (8005420 <xPortStartScheduler+0x120>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a46      	ldr	r2, [pc, #280]	; (8005424 <xPortStartScheduler+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10a      	bne.n	8005326 <xPortStartScheduler+0x26>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	613b      	str	r3, [r7, #16]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005326:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <xPortStartScheduler+0x120>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a3f      	ldr	r2, [pc, #252]	; (8005428 <xPortStartScheduler+0x128>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10a      	bne.n	8005346 <xPortStartScheduler+0x46>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60fb      	str	r3, [r7, #12]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005346:	4b39      	ldr	r3, [pc, #228]	; (800542c <xPortStartScheduler+0x12c>)
 8005348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4b31      	ldr	r3, [pc, #196]	; (8005430 <xPortStartScheduler+0x130>)
 800536c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <xPortStartScheduler+0x134>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005374:	e009      	b.n	800538a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005376:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <xPortStartScheduler+0x134>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3b01      	subs	r3, #1
 800537c:	4a2d      	ldr	r2, [pc, #180]	; (8005434 <xPortStartScheduler+0x134>)
 800537e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d0ef      	beq.n	8005376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005396:	4b27      	ldr	r3, [pc, #156]	; (8005434 <xPortStartScheduler+0x134>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1c3 0307 	rsb	r3, r3, #7
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d00a      	beq.n	80053b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60bb      	str	r3, [r7, #8]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053b8:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <xPortStartScheduler+0x134>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <xPortStartScheduler+0x134>)
 80053c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053c2:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <xPortStartScheduler+0x134>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ca:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <xPortStartScheduler+0x134>)
 80053cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <xPortStartScheduler+0x138>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <xPortStartScheduler+0x138>)
 80053dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <xPortStartScheduler+0x138>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <xPortStartScheduler+0x138>)
 80053e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053ee:	f000 f8dd 	bl	80055ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053f2:	4b12      	ldr	r3, [pc, #72]	; (800543c <xPortStartScheduler+0x13c>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053f8:	f000 f8fc 	bl	80055f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053fc:	4b10      	ldr	r3, [pc, #64]	; (8005440 <xPortStartScheduler+0x140>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <xPortStartScheduler+0x140>)
 8005402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005408:	f7ff ff66 	bl	80052d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800540c:	f7fe ff4a 	bl	80042a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005410:	f7ff ff1e 	bl	8005250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	e000ed00 	.word	0xe000ed00
 8005424:	410fc271 	.word	0x410fc271
 8005428:	410fc270 	.word	0x410fc270
 800542c:	e000e400 	.word	0xe000e400
 8005430:	20000f1c 	.word	0x20000f1c
 8005434:	20000f20 	.word	0x20000f20
 8005438:	e000ed20 	.word	0xe000ed20
 800543c:	2000000c 	.word	0x2000000c
 8005440:	e000ef34 	.word	0xe000ef34

08005444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800545e:	4b0f      	ldr	r3, [pc, #60]	; (800549c <vPortEnterCritical+0x58>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a0d      	ldr	r2, [pc, #52]	; (800549c <vPortEnterCritical+0x58>)
 8005466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <vPortEnterCritical+0x58>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10f      	bne.n	8005490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <vPortEnterCritical+0x5c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <vPortEnterCritical+0x4c>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	603b      	str	r3, [r7, #0]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vPortEnterCritical+0x4a>
	}
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <vPortExitCritical+0x50>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <vPortExitCritical+0x24>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	607b      	str	r3, [r7, #4]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <vPortExitCritical+0x50>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <vPortExitCritical+0x50>)
 80054d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <vPortExitCritical+0x50>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <vPortExitCritical+0x42>
 80054da:	2300      	movs	r3, #0
 80054dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f383 8811 	msr	BASEPRI, r3
}
 80054e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000000c 	.word	0x2000000c
	...

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f01e 0f10 	tst.w	lr, #16
 8005510:	bf08      	it	eq
 8005512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005524:	f380 8811 	msr	BASEPRI, r0
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f7fe feb8 	bl	80042a4 <vTaskSwitchContext>
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f380 8811 	msr	BASEPRI, r0
 800553c:	bc09      	pop	{r0, r3}
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	6808      	ldr	r0, [r1, #0]
 8005542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005546:	f01e 0f10 	tst.w	lr, #16
 800554a:	bf08      	it	eq
 800554c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005550:	f380 8809 	msr	PSP, r0
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w

08005560 <pxCurrentTCBConst>:
 8005560:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005582:	f7fe fdd5 	bl	8004130 <xTaskIncrementTick>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <xPortSysTickHandler+0x40>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f383 8811 	msr	BASEPRI, r3
}
 800559e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <vPortSetupTimerInterrupt+0x38>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <vPortSetupTimerInterrupt+0x3c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <vPortSetupTimerInterrupt+0x40>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <vPortSetupTimerInterrupt+0x44>)
 80055ca:	3b01      	subs	r3, #1
 80055cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ce:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055d0:	2207      	movs	r2, #7
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000e010 	.word	0xe000e010
 80055e4:	e000e018 	.word	0xe000e018
 80055e8:	20000000 	.word	0x20000000
 80055ec:	10624dd3 	.word	0x10624dd3
 80055f0:	e000e014 	.word	0xe000e014

080055f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005604 <vPortEnableVFP+0x10>
 80055f8:	6801      	ldr	r1, [r0, #0]
 80055fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055fe:	6001      	str	r1, [r0, #0]
 8005600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005602:	bf00      	nop
 8005604:	e000ed88 	.word	0xe000ed88

08005608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800560e:	f3ef 8305 	mrs	r3, IPSR
 8005612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	d914      	bls.n	8005644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800561a:	4a17      	ldr	r2, [pc, #92]	; (8005678 <vPortValidateInterruptPriority+0x70>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005624:	4b15      	ldr	r3, [pc, #84]	; (800567c <vPortValidateInterruptPriority+0x74>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	7afa      	ldrb	r2, [r7, #11]
 800562a:	429a      	cmp	r2, r3
 800562c:	d20a      	bcs.n	8005644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <vPortValidateInterruptPriority+0x78>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <vPortValidateInterruptPriority+0x7c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d90a      	bls.n	800566a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	603b      	str	r3, [r7, #0]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <vPortValidateInterruptPriority+0x60>
	}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000e3f0 	.word	0xe000e3f0
 800567c:	20000f1c 	.word	0x20000f1c
 8005680:	e000ed0c 	.word	0xe000ed0c
 8005684:	20000f20 	.word	0x20000f20

08005688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005694:	f7fe fc90 	bl	8003fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005698:	4b5b      	ldr	r3, [pc, #364]	; (8005808 <pvPortMalloc+0x180>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056a0:	f000 f920 	bl	80058e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056a4:	4b59      	ldr	r3, [pc, #356]	; (800580c <pvPortMalloc+0x184>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f040 8093 	bne.w	80057d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01d      	beq.n	80056f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056b8:	2208      	movs	r2, #8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d014      	beq.n	80056f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f023 0307 	bic.w	r3, r3, #7
 80056d0:	3308      	adds	r3, #8
 80056d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <pvPortMalloc+0x6c>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	617b      	str	r3, [r7, #20]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d06e      	beq.n	80057d8 <pvPortMalloc+0x150>
 80056fa:	4b45      	ldr	r3, [pc, #276]	; (8005810 <pvPortMalloc+0x188>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d869      	bhi.n	80057d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005704:	4b43      	ldr	r3, [pc, #268]	; (8005814 <pvPortMalloc+0x18c>)
 8005706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005708:	4b42      	ldr	r3, [pc, #264]	; (8005814 <pvPortMalloc+0x18c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800570e:	e004      	b.n	800571a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d903      	bls.n	800572c <pvPortMalloc+0xa4>
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f1      	bne.n	8005710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <pvPortMalloc+0x180>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005732:	429a      	cmp	r2, r3
 8005734:	d050      	beq.n	80057d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2208      	movs	r2, #8
 800573c:	4413      	add	r3, r2
 800573e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	2308      	movs	r3, #8
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	429a      	cmp	r2, r3
 8005756:	d91f      	bls.n	8005798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <pvPortMalloc+0xf8>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	613b      	str	r3, [r7, #16]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005792:	69b8      	ldr	r0, [r7, #24]
 8005794:	f000 f908 	bl	80059a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005798:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <pvPortMalloc+0x188>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <pvPortMalloc+0x188>)
 80057a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <pvPortMalloc+0x188>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <pvPortMalloc+0x190>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d203      	bcs.n	80057ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <pvPortMalloc+0x188>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <pvPortMalloc+0x190>)
 80057b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <pvPortMalloc+0x184>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <pvPortMalloc+0x194>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	4a11      	ldr	r2, [pc, #68]	; (800581c <pvPortMalloc+0x194>)
 80057d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057d8:	f7fe fbfc 	bl	8003fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <pvPortMalloc+0x174>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	60fb      	str	r3, [r7, #12]
}
 80057f8:	bf00      	nop
 80057fa:	e7fe      	b.n	80057fa <pvPortMalloc+0x172>
	return pvReturn;
 80057fc:	69fb      	ldr	r3, [r7, #28]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3728      	adds	r7, #40	; 0x28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20004b2c 	.word	0x20004b2c
 800580c:	20004b40 	.word	0x20004b40
 8005810:	20004b30 	.word	0x20004b30
 8005814:	20004b24 	.word	0x20004b24
 8005818:	20004b34 	.word	0x20004b34
 800581c:	20004b38 	.word	0x20004b38

08005820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04d      	beq.n	80058ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005832:	2308      	movs	r3, #8
 8005834:	425b      	negs	r3, r3
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <vPortFree+0xb8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4013      	ands	r3, r2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <vPortFree+0x44>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60fb      	str	r3, [r7, #12]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <vPortFree+0x62>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60bb      	str	r3, [r7, #8]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <vPortFree+0xb8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01e      	beq.n	80058ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11a      	bne.n	80058ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <vPortFree+0xb8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	401a      	ands	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058a8:	f7fe fb86 	bl	8003fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <vPortFree+0xbc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4413      	add	r3, r2
 80058b6:	4a09      	ldr	r2, [pc, #36]	; (80058dc <vPortFree+0xbc>)
 80058b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ba:	6938      	ldr	r0, [r7, #16]
 80058bc:	f000 f874 	bl	80059a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <vPortFree+0xc0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a06      	ldr	r2, [pc, #24]	; (80058e0 <vPortFree+0xc0>)
 80058c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058ca:	f7fe fb83 	bl	8003fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058ce:	bf00      	nop
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20004b40 	.word	0x20004b40
 80058dc:	20004b30 	.word	0x20004b30
 80058e0:	20004b3c 	.word	0x20004b3c

080058e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058f0:	4b27      	ldr	r3, [pc, #156]	; (8005990 <prvHeapInit+0xac>)
 80058f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3307      	adds	r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <prvHeapInit+0xac>)
 8005914:	4413      	add	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <prvHeapInit+0xb0>)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005922:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <prvHeapInit+0xb0>)
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4413      	add	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005930:	2208      	movs	r2, #8
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <prvHeapInit+0xb4>)
 8005944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <prvHeapInit+0xb4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <prvHeapInit+0xb4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <prvHeapInit+0xb4>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a0a      	ldr	r2, [pc, #40]	; (800599c <prvHeapInit+0xb8>)
 8005972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <prvHeapInit+0xbc>)
 800597a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <prvHeapInit+0xc0>)
 800597e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000f24 	.word	0x20000f24
 8005994:	20004b24 	.word	0x20004b24
 8005998:	20004b2c 	.word	0x20004b2c
 800599c:	20004b34 	.word	0x20004b34
 80059a0:	20004b30 	.word	0x20004b30
 80059a4:	20004b40 	.word	0x20004b40

080059a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059b0:	4b28      	ldr	r3, [pc, #160]	; (8005a54 <prvInsertBlockIntoFreeList+0xac>)
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <prvInsertBlockIntoFreeList+0x14>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d8f7      	bhi.n	80059b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d108      	bne.n	80059ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d118      	bne.n	8005a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <prvInsertBlockIntoFreeList+0xb0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d00d      	beq.n	8005a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e008      	b.n	8005a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <prvInsertBlockIntoFreeList+0xb0>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e003      	b.n	8005a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d002      	beq.n	8005a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20004b24 	.word	0x20004b24
 8005a58:	20004b2c 	.word	0x20004b2c

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <__libc_init_array+0x38>)
 8005a60:	4c0d      	ldr	r4, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	2600      	movs	r6, #0
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	4d0b      	ldr	r5, [pc, #44]	; (8005a9c <__libc_init_array+0x40>)
 8005a6e:	4c0c      	ldr	r4, [pc, #48]	; (8005aa0 <__libc_init_array+0x44>)
 8005a70:	f000 f8f2 	bl	8005c58 <_init>
 8005a74:	1b64      	subs	r4, r4, r5
 8005a76:	10a4      	asrs	r4, r4, #2
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	08005dbc 	.word	0x08005dbc
 8005a98:	08005dbc 	.word	0x08005dbc
 8005a9c:	08005dbc 	.word	0x08005dbc
 8005aa0:	08005dc0 	.word	0x08005dc0

08005aa4 <__retarget_lock_acquire_recursive>:
 8005aa4:	4770      	bx	lr

08005aa6 <__retarget_lock_release_recursive>:
 8005aa6:	4770      	bx	lr

08005aa8 <memcpy>:
 8005aa8:	440a      	add	r2, r1
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ab0:	d100      	bne.n	8005ab4 <memcpy+0xc>
 8005ab2:	4770      	bx	lr
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	d1f9      	bne.n	8005ab6 <memcpy+0xe>
 8005ac2:	bd10      	pop	{r4, pc}

08005ac4 <memset>:
 8005ac4:	4402      	add	r2, r0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d100      	bne.n	8005ace <memset+0xa>
 8005acc:	4770      	bx	lr
 8005ace:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad2:	e7f9      	b.n	8005ac8 <memset+0x4>

08005ad4 <cleanup_glue>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	6809      	ldr	r1, [r1, #0]
 8005ada:	4605      	mov	r5, r0
 8005adc:	b109      	cbz	r1, 8005ae2 <cleanup_glue+0xe>
 8005ade:	f7ff fff9 	bl	8005ad4 <cleanup_glue>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aea:	f000 b869 	b.w	8005bc0 <_free_r>
	...

08005af0 <_reclaim_reent>:
 8005af0:	4b2c      	ldr	r3, [pc, #176]	; (8005ba4 <_reclaim_reent+0xb4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4283      	cmp	r3, r0
 8005af6:	b570      	push	{r4, r5, r6, lr}
 8005af8:	4604      	mov	r4, r0
 8005afa:	d051      	beq.n	8005ba0 <_reclaim_reent+0xb0>
 8005afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005afe:	b143      	cbz	r3, 8005b12 <_reclaim_reent+0x22>
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d14a      	bne.n	8005b9c <_reclaim_reent+0xac>
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	b111      	cbz	r1, 8005b12 <_reclaim_reent+0x22>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f857 	bl	8005bc0 <_free_r>
 8005b12:	6961      	ldr	r1, [r4, #20]
 8005b14:	b111      	cbz	r1, 8005b1c <_reclaim_reent+0x2c>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 f852 	bl	8005bc0 <_free_r>
 8005b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b1e:	b111      	cbz	r1, 8005b26 <_reclaim_reent+0x36>
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f84d 	bl	8005bc0 <_free_r>
 8005b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b28:	b111      	cbz	r1, 8005b30 <_reclaim_reent+0x40>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f848 	bl	8005bc0 <_free_r>
 8005b30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005b32:	b111      	cbz	r1, 8005b3a <_reclaim_reent+0x4a>
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 f843 	bl	8005bc0 <_free_r>
 8005b3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b3c:	b111      	cbz	r1, 8005b44 <_reclaim_reent+0x54>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f83e 	bl	8005bc0 <_free_r>
 8005b44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005b46:	b111      	cbz	r1, 8005b4e <_reclaim_reent+0x5e>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f839 	bl	8005bc0 <_free_r>
 8005b4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005b50:	b111      	cbz	r1, 8005b58 <_reclaim_reent+0x68>
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 f834 	bl	8005bc0 <_free_r>
 8005b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b5a:	b111      	cbz	r1, 8005b62 <_reclaim_reent+0x72>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 f82f 	bl	8005bc0 <_free_r>
 8005b62:	69a3      	ldr	r3, [r4, #24]
 8005b64:	b1e3      	cbz	r3, 8005ba0 <_reclaim_reent+0xb0>
 8005b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b68:	4620      	mov	r0, r4
 8005b6a:	4798      	blx	r3
 8005b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b6e:	b1b9      	cbz	r1, 8005ba0 <_reclaim_reent+0xb0>
 8005b70:	4620      	mov	r0, r4
 8005b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b76:	f7ff bfad 	b.w	8005ad4 <cleanup_glue>
 8005b7a:	5949      	ldr	r1, [r1, r5]
 8005b7c:	b941      	cbnz	r1, 8005b90 <_reclaim_reent+0xa0>
 8005b7e:	3504      	adds	r5, #4
 8005b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b82:	2d80      	cmp	r5, #128	; 0x80
 8005b84:	68d9      	ldr	r1, [r3, #12]
 8005b86:	d1f8      	bne.n	8005b7a <_reclaim_reent+0x8a>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f819 	bl	8005bc0 <_free_r>
 8005b8e:	e7ba      	b.n	8005b06 <_reclaim_reent+0x16>
 8005b90:	680e      	ldr	r6, [r1, #0]
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 f814 	bl	8005bc0 <_free_r>
 8005b98:	4631      	mov	r1, r6
 8005b9a:	e7ef      	b.n	8005b7c <_reclaim_reent+0x8c>
 8005b9c:	2500      	movs	r5, #0
 8005b9e:	e7ef      	b.n	8005b80 <_reclaim_reent+0x90>
 8005ba0:	bd70      	pop	{r4, r5, r6, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000010 	.word	0x20000010

08005ba8 <__malloc_lock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	; (8005bb0 <__malloc_lock+0x8>)
 8005baa:	f7ff bf7b 	b.w	8005aa4 <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	20004b44 	.word	0x20004b44

08005bb4 <__malloc_unlock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	; (8005bbc <__malloc_unlock+0x8>)
 8005bb6:	f7ff bf76 	b.w	8005aa6 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	20004b44 	.word	0x20004b44

08005bc0 <_free_r>:
 8005bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d044      	beq.n	8005c50 <_free_r+0x90>
 8005bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd2:	bfb8      	it	lt
 8005bd4:	18e4      	addlt	r4, r4, r3
 8005bd6:	f7ff ffe7 	bl	8005ba8 <__malloc_lock>
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <_free_r+0x94>)
 8005bdc:	9801      	ldr	r0, [sp, #4]
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	b933      	cbnz	r3, 8005bf0 <_free_r+0x30>
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	6014      	str	r4, [r2, #0]
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bec:	f7ff bfe2 	b.w	8005bb4 <__malloc_unlock>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d908      	bls.n	8005c06 <_free_r+0x46>
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf01      	itttt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	1949      	addeq	r1, r1, r5
 8005c02:	6021      	streq	r1, [r4, #0]
 8005c04:	e7ed      	b.n	8005be2 <_free_r+0x22>
 8005c06:	461a      	mov	r2, r3
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	b10b      	cbz	r3, 8005c10 <_free_r+0x50>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d9fa      	bls.n	8005c06 <_free_r+0x46>
 8005c10:	6811      	ldr	r1, [r2, #0]
 8005c12:	1855      	adds	r5, r2, r1
 8005c14:	42a5      	cmp	r5, r4
 8005c16:	d10b      	bne.n	8005c30 <_free_r+0x70>
 8005c18:	6824      	ldr	r4, [r4, #0]
 8005c1a:	4421      	add	r1, r4
 8005c1c:	1854      	adds	r4, r2, r1
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	d1e0      	bne.n	8005be6 <_free_r+0x26>
 8005c24:	681c      	ldr	r4, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	4421      	add	r1, r4
 8005c2c:	6011      	str	r1, [r2, #0]
 8005c2e:	e7da      	b.n	8005be6 <_free_r+0x26>
 8005c30:	d902      	bls.n	8005c38 <_free_r+0x78>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	e7d6      	b.n	8005be6 <_free_r+0x26>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf04      	itt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	bf04      	itt	eq
 8005c48:	1949      	addeq	r1, r1, r5
 8005c4a:	6021      	streq	r1, [r4, #0]
 8005c4c:	6054      	str	r4, [r2, #4]
 8005c4e:	e7ca      	b.n	8005be6 <_free_r+0x26>
 8005c50:	b003      	add	sp, #12
 8005c52:	bd30      	pop	{r4, r5, pc}
 8005c54:	20004b48 	.word	0x20004b48

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
