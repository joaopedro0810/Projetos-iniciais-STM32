
Projeto32 - RTC 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001990  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001b18  08001b18  00011b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b28  08001b28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001b28  08001b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b30  08001b30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000058  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004b6c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000107b  00000000  00000000  00024ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d8  00000000  00000000  00025c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000440  00000000  00000000  00026100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f807  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a25  00000000  00000000  00045d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1d19  00000000  00000000  0004b76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d485  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011fc  00000000  00000000  0010d4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b00 	.word	0x08001b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001b00 	.word	0x08001b00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f98e 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 80004d8:	f000 f872 	bl	80005c0 <MX_RTC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 80004dc:	2200      	movs	r2, #0
 80004de:	4905      	ldr	r1, [pc, #20]	; (80004f4 <main+0x28>)
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <main+0x2c>)
 80004e2:	f001 f9d5 	bl	8001890 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &tempo, RTC_FORMAT_BIN);
 80004e6:	2200      	movs	r2, #0
 80004e8:	4904      	ldr	r1, [pc, #16]	; (80004fc <main+0x30>)
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <main+0x2c>)
 80004ec:	f001 f8ee 	bl	80016cc <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 80004f0:	e7f4      	b.n	80004dc <main+0x10>
 80004f2:	bf00      	nop
 80004f4:	20000048 	.word	0x20000048
 80004f8:	20000028 	.word	0x20000028
 80004fc:	2000004c 	.word	0x2000004c

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f001 faee 	bl	8001af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <SystemClock_Config+0xb8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <SystemClock_Config+0xb8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <SystemClock_Config+0xbc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <SystemClock_Config+0xbc>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <SystemClock_Config+0xbc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800055c:	230a      	movs	r3, #10
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fa93 	bl	8000aa0 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000580:	f000 f878 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fcf6 	bl	8000f90 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005aa:	f000 f863 	bl	8000674 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_RTC_Init+0xac>)
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <MX_RTC_Init+0xb0>)
 80005dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_RTC_Init+0xac>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_RTC_Init+0xac>)
 80005e6:	227f      	movs	r2, #127	; 0x7f
 80005e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_RTC_Init+0xac>)
 80005ec:	22ff      	movs	r2, #255	; 0xff
 80005ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_RTC_Init+0xac>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_RTC_Init+0xac>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_RTC_Init+0xac>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000602:	481a      	ldr	r0, [pc, #104]	; (800066c <MX_RTC_Init+0xac>)
 8000604:	f000 ff52 	bl	80014ac <HAL_RTC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f831 	bl	8000674 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000612:	2300      	movs	r3, #0
 8000614:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000616:	2300      	movs	r3, #0
 8000618:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	480f      	ldr	r0, [pc, #60]	; (800066c <MX_RTC_Init+0xac>)
 800062e:	f000 ffb3 	bl	8001598 <HAL_RTC_SetTime>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000638:	f000 f81c 	bl	8000674 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800063c:	2301      	movs	r3, #1
 800063e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000640:	2301      	movs	r3, #1
 8000642:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000644:	2301      	movs	r3, #1
 8000646:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000648:	2300      	movs	r3, #0
 800064a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2201      	movs	r2, #1
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <MX_RTC_Init+0xac>)
 8000654:	f001 f898 	bl	8001788 <HAL_RTC_SetDate>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800065e:	f000 f809 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40002800 	.word	0x40002800

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <HAL_MspInit+0x4c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6453      	str	r3, [r2, #68]	; 0x44
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_RTC_MspInit+0x4c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d111      	bne.n	8000714 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fdf2 	bl	80012e8 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800070a:	f7ff ffb3 	bl	8000674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <HAL_RTC_MspInit+0x50>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40002800 	.word	0x40002800
 8000720:	42470e3c 	.word	0x42470e3c

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f890 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007b8:	4c0b      	ldr	r4, [pc, #44]	; (80007e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007c6:	f7ff ffd7 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 f96d 	bl	8001aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ce:	f7ff fe7d 	bl	80004cc <main>
  bx  lr    
 80007d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	08001b38 	.word	0x08001b38
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	20000064 	.word	0x20000064

080007ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_Init+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <HAL_Init+0x40>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_Init+0x40>)
 8000806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_Init+0x40>)
 8000812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f000 f90d 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081e:	200f      	movs	r0, #15
 8000820:	f000 f808 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000824:	f7ff ff2c 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023c00 	.word	0x40023c00

08000834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x54>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x58>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	fbb3 f3f1 	udiv	r3, r3, r1
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f917 	bl	8000a86 <HAL_SYSTICK_Config>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e00e      	b.n	8000880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d80a      	bhi.n	800087e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f000 f8ed 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_InitTick+0x5c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	e000      	b.n	8000880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000000 	.word	0x20000000
 800088c:	20000008 	.word	0x20000008
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000060 	.word	0x20000060

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_GetTick+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000060 	.word	0x20000060

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff47 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff5c 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffb0 	bl	80009f4 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e267      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d075      	beq.n	8000baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000abe:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d00c      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aca:	4b85      	ldr	r3, [pc, #532]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d112      	bne.n	8000afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ad6:	4b82      	ldr	r3, [pc, #520]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ae2:	d10b      	bne.n	8000afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae4:	4b7e      	ldr	r3, [pc, #504]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d05b      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x108>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d157      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e242      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b04:	d106      	bne.n	8000b14 <HAL_RCC_OscConfig+0x74>
 8000b06:	4b76      	ldr	r3, [pc, #472]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a75      	ldr	r2, [pc, #468]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e01d      	b.n	8000b50 <HAL_RCC_OscConfig+0xb0>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b1c:	d10c      	bne.n	8000b38 <HAL_RCC_OscConfig+0x98>
 8000b1e:	4b70      	ldr	r3, [pc, #448]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a6f      	ldr	r2, [pc, #444]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	4b6d      	ldr	r3, [pc, #436]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a6c      	ldr	r2, [pc, #432]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e00b      	b.n	8000b50 <HAL_RCC_OscConfig+0xb0>
 8000b38:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a68      	ldr	r2, [pc, #416]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b66      	ldr	r3, [pc, #408]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a65      	ldr	r2, [pc, #404]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d013      	beq.n	8000b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b58:	f7ff feb0 	bl	80008bc <HAL_GetTick>
 8000b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5e:	e008      	b.n	8000b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b60:	f7ff feac 	bl	80008bc <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b64      	cmp	r3, #100	; 0x64
 8000b6c:	d901      	bls.n	8000b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e207      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f0      	beq.n	8000b60 <HAL_RCC_OscConfig+0xc0>
 8000b7e:	e014      	b.n	8000baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b80:	f7ff fe9c 	bl	80008bc <HAL_GetTick>
 8000b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b86:	e008      	b.n	8000b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b88:	f7ff fe98 	bl	80008bc <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b64      	cmp	r3, #100	; 0x64
 8000b94:	d901      	bls.n	8000b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e1f3      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b9a:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f0      	bne.n	8000b88 <HAL_RCC_OscConfig+0xe8>
 8000ba6:	e000      	b.n	8000baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d063      	beq.n	8000c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bb6:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc2:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d11c      	bne.n	8000c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bce:	4b44      	ldr	r3, [pc, #272]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d116      	bne.n	8000c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bda:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x152>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d001      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e1c7      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	4937      	ldr	r1, [pc, #220]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000c02:	4313      	orrs	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c06:	e03a      	b.n	8000c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d020      	beq.n	8000c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c10:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_RCC_OscConfig+0x244>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c16:	f7ff fe51 	bl	80008bc <HAL_GetTick>
 8000c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1c:	e008      	b.n	8000c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1e:	f7ff fe4d 	bl	80008bc <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e1a8      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f0      	beq.n	8000c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4925      	ldr	r1, [pc, #148]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	600b      	str	r3, [r1, #0]
 8000c50:	e015      	b.n	8000c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_RCC_OscConfig+0x244>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c58:	f7ff fe30 	bl	80008bc <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c60:	f7ff fe2c 	bl	80008bc <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e187      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d036      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d016      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_RCC_OscConfig+0x248>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c98:	f7ff fe10 	bl	80008bc <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca0:	f7ff fe0c 	bl	80008bc <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e167      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x200>
 8000cbe:	e01b      	b.n	8000cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_RCC_OscConfig+0x248>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc6:	f7ff fdf9 	bl	80008bc <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ccc:	e00e      	b.n	8000cec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cce:	f7ff fdf5 	bl	80008bc <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d907      	bls.n	8000cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e150      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	42470000 	.word	0x42470000
 8000ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cec:	4b88      	ldr	r3, [pc, #544]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1ea      	bne.n	8000cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 8097 	beq.w	8000e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d0a:	4b81      	ldr	r3, [pc, #516]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b7d      	ldr	r3, [pc, #500]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a7c      	ldr	r2, [pc, #496]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b7a      	ldr	r3, [pc, #488]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d36:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <HAL_RCC_OscConfig+0x474>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d118      	bne.n	8000d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d42:	4b74      	ldr	r3, [pc, #464]	; (8000f14 <HAL_RCC_OscConfig+0x474>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a73      	ldr	r2, [pc, #460]	; (8000f14 <HAL_RCC_OscConfig+0x474>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fdb5 	bl	80008bc <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d56:	f7ff fdb1 	bl	80008bc <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e10c      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d68:	4b6a      	ldr	r3, [pc, #424]	; (8000f14 <HAL_RCC_OscConfig+0x474>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d106      	bne.n	8000d8a <HAL_RCC_OscConfig+0x2ea>
 8000d7c:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d80:	4a63      	ldr	r2, [pc, #396]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6713      	str	r3, [r2, #112]	; 0x70
 8000d88:	e01c      	b.n	8000dc4 <HAL_RCC_OscConfig+0x324>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x30c>
 8000d92:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d96:	4a5e      	ldr	r2, [pc, #376]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d9e:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da2:	4a5b      	ldr	r2, [pc, #364]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6713      	str	r3, [r2, #112]	; 0x70
 8000daa:	e00b      	b.n	8000dc4 <HAL_RCC_OscConfig+0x324>
 8000dac:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db0:	4a57      	ldr	r2, [pc, #348]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	6713      	str	r3, [r2, #112]	; 0x70
 8000db8:	4b55      	ldr	r3, [pc, #340]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dbc:	4a54      	ldr	r2, [pc, #336]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000dbe:	f023 0304 	bic.w	r3, r3, #4
 8000dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d015      	beq.n	8000df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fd76 	bl	80008bc <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd2:	e00a      	b.n	8000dea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fd72 	bl	80008bc <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0cb      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0ee      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x334>
 8000df6:	e014      	b.n	8000e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fd60 	bl	80008bc <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfe:	e00a      	b.n	8000e16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e00:	f7ff fd5c 	bl	80008bc <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e0b5      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1ee      	bne.n	8000e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e28:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a1 	beq.w	8000f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d05c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d141      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <HAL_RCC_OscConfig+0x478>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fd30 	bl	80008bc <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fd2c 	bl	80008bc <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e087      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69da      	ldr	r2, [r3, #28]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	3b01      	subs	r3, #1
 8000e98:	041b      	lsls	r3, r3, #16
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	061b      	lsls	r3, r3, #24
 8000ea2:	491b      	ldr	r1, [pc, #108]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <HAL_RCC_OscConfig+0x478>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fd05 	bl	80008bc <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb6:	f7ff fd01 	bl	80008bc <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e05c      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x416>
 8000ed4:	e054      	b.n	8000f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_RCC_OscConfig+0x478>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fcee 	bl	80008bc <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee4:	f7ff fcea 	bl	80008bc <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e045      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_RCC_OscConfig+0x470>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x444>
 8000f02:	e03d      	b.n	8000f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d107      	bne.n	8000f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e038      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000
 8000f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_RCC_OscConfig+0x4ec>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d028      	beq.n	8000f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d121      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d11a      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d111      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	3b01      	subs	r3, #1
 8000f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d107      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e0cc      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa4:	4b68      	ldr	r3, [pc, #416]	; (8001148 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d90c      	bls.n	8000fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb2:	4b65      	ldr	r3, [pc, #404]	; (8001148 <HAL_RCC_ClockConfig+0x1b8>)
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fba:	4b63      	ldr	r3, [pc, #396]	; (8001148 <HAL_RCC_ClockConfig+0x1b8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d001      	beq.n	8000fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e0b8      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d020      	beq.n	800101a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe4:	4b59      	ldr	r3, [pc, #356]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a58      	ldr	r2, [pc, #352]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001008:	4b50      	ldr	r3, [pc, #320]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	494d      	ldr	r1, [pc, #308]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	4313      	orrs	r3, r2
 8001018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d044      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d107      	bne.n	800103e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d119      	bne.n	800106e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e07f      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d003      	beq.n	800104e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800104a:	2b03      	cmp	r3, #3
 800104c:	d107      	bne.n	800105e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104e:	4b3f      	ldr	r3, [pc, #252]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e06f      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e067      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f023 0203 	bic.w	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4934      	ldr	r1, [pc, #208]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001080:	f7ff fc1c 	bl	80008bc <HAL_GetTick>
 8001084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001086:	e00a      	b.n	800109e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001088:	f7ff fc18 	bl	80008bc <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f241 3288 	movw	r2, #5000	; 0x1388
 8001096:	4293      	cmp	r3, r2
 8001098:	d901      	bls.n	800109e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e04f      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 020c 	and.w	r2, r3, #12
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d1eb      	bne.n	8001088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_RCC_ClockConfig+0x1b8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d20c      	bcs.n	80010d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_RCC_ClockConfig+0x1b8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e032      	b.n	800113e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4916      	ldr	r1, [pc, #88]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d009      	beq.n	8001116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	490e      	ldr	r1, [pc, #56]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001116:	f000 f821 	bl	800115c <HAL_RCC_GetSysClockFreq>
 800111a:	4602      	mov	r2, r0
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	490a      	ldr	r1, [pc, #40]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 8001128:	5ccb      	ldrb	r3, [r1, r3]
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_RCC_ClockConfig+0x1c8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fb7c 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00
 800114c:	40023800 	.word	0x40023800
 8001150:	08001b18 	.word	0x08001b18
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800115c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001160:	b090      	sub	sp, #64	; 0x40
 8001162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d00d      	beq.n	800119c <HAL_RCC_GetSysClockFreq+0x40>
 8001180:	2b08      	cmp	r3, #8
 8001182:	f200 80a1 	bhi.w	80012c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_RCC_GetSysClockFreq+0x34>
 800118a:	2b04      	cmp	r3, #4
 800118c:	d003      	beq.n	8001196 <HAL_RCC_GetSysClockFreq+0x3a>
 800118e:	e09b      	b.n	80012c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001194:	e09b      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800119a:	e098      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800119c:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <HAL_RCC_GetSysClockFreq+0x180>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011a6:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <HAL_RCC_GetSysClockFreq+0x180>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d028      	beq.n	8001204 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b2:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_RCC_GetSysClockFreq+0x180>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	099b      	lsrs	r3, r3, #6
 80011b8:	2200      	movs	r2, #0
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	627a      	str	r2, [r7, #36]	; 0x24
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80011c4:	2100      	movs	r1, #0
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80011c8:	fb03 f201 	mul.w	r2, r3, r1
 80011cc:	2300      	movs	r3, #0
 80011ce:	fb00 f303 	mul.w	r3, r0, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80011d6:	fba0 1202 	umull	r1, r2, r0, r2
 80011da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011dc:	460a      	mov	r2, r1
 80011de:	62ba      	str	r2, [r7, #40]	; 0x28
 80011e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e2:	4413      	add	r3, r2
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	2200      	movs	r2, #0
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	61fa      	str	r2, [r7, #28]
 80011ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011f6:	f7fe ffe7 	bl	80001c8 <__aeabi_uldivmod>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4613      	mov	r3, r2
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001202:	e053      	b.n	80012ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	099b      	lsrs	r3, r3, #6
 800120a:	2200      	movs	r2, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	617a      	str	r2, [r7, #20]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001216:	f04f 0b00 	mov.w	fp, #0
 800121a:	4652      	mov	r2, sl
 800121c:	465b      	mov	r3, fp
 800121e:	f04f 0000 	mov.w	r0, #0
 8001222:	f04f 0100 	mov.w	r1, #0
 8001226:	0159      	lsls	r1, r3, #5
 8001228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800122c:	0150      	lsls	r0, r2, #5
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	ebb2 080a 	subs.w	r8, r2, sl
 8001236:	eb63 090b 	sbc.w	r9, r3, fp
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001246:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800124a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800124e:	ebb2 0408 	subs.w	r4, r2, r8
 8001252:	eb63 0509 	sbc.w	r5, r3, r9
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	00eb      	lsls	r3, r5, #3
 8001260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	eb14 030a 	adds.w	r3, r4, sl
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	eb45 030b 	adc.w	r3, r5, fp
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001282:	4629      	mov	r1, r5
 8001284:	028b      	lsls	r3, r1, #10
 8001286:	4621      	mov	r1, r4
 8001288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800128c:	4621      	mov	r1, r4
 800128e:	028a      	lsls	r2, r1, #10
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001296:	2200      	movs	r2, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	60fa      	str	r2, [r7, #12]
 800129c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a0:	f7fe ff92 	bl	80001c8 <__aeabi_uldivmod>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4613      	mov	r3, r2
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_GetSysClockFreq+0x180>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	3301      	adds	r3, #1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80012bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012c6:	e002      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3740      	adds	r7, #64	; 0x40
 80012d4:	46bd      	mov	sp, r7
 80012d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	00f42400 	.word	0x00f42400
 80012e4:	017d7840 	.word	0x017d7840

080012e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800130c:	2b00      	cmp	r3, #0
 800130e:	d035      	beq.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001310:	4b62      	ldr	r3, [pc, #392]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001316:	f7ff fad1 	bl	80008bc <HAL_GetTick>
 800131a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800131e:	f7ff facd 	bl	80008bc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0b0      	b.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001330:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	019a      	lsls	r2, r3, #6
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	071b      	lsls	r3, r3, #28
 8001348:	4955      	ldr	r1, [pc, #340]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800134a:	4313      	orrs	r3, r2
 800134c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001350:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001356:	f7ff fab1 	bl	80008bc <HAL_GetTick>
 800135a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800135e:	f7ff faad 	bl	80008bc <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e090      	b.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8083 	beq.w	8001490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013b2:	f7ff fa83 	bl	80008bc <HAL_GetTick>
 80013b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fa7f 	bl	80008bc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e062      	b.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d02f      	beq.n	8001448 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d028      	beq.n	8001448 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800140c:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d114      	bne.n	8001448 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fa4d 	bl	80008bc <HAL_GetTick>
 8001422:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fa49 	bl	80008bc <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	; 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e02a      	b.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001454:	d10d      	bne.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800146a:	490d      	ldr	r1, [pc, #52]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
 8001470:	e005      	b.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001478:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800147c:	6093      	str	r3, [r2, #8]
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148a:	4905      	ldr	r1, [pc, #20]	; (80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800148c:	4313      	orrs	r3, r2
 800148e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	42470068 	.word	0x42470068
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000
 80014a8:	42470e40 	.word	0x42470e40

080014ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e066      	b.n	8001590 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7f5b      	ldrb	r3, [r3, #29]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff f8fc 	bl	80006d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	22ca      	movs	r2, #202	; 0xca
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2253      	movs	r2, #83	; 0x53
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fa45 	bl	800197e <RTC_EnterInitMode>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d12c      	bne.n	8001558 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800150c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001510:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	68d2      	ldr	r2, [r2, #12]
 8001538:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6919      	ldr	r1, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa4c 	bl	80019ec <RTC_ExitInitMode>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d113      	bne.n	8001586 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	22ff      	movs	r2, #255	; 0xff
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	7f1b      	ldrb	r3, [r3, #28]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_RTC_SetTime+0x1c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e087      	b.n	80016c4 <HAL_RTC_SetTime+0x12c>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2202      	movs	r2, #2
 80015be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d126      	bne.n	8001614 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2200      	movs	r2, #0
 80015d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fa29 	bl	8001a36 <RTC_ByteToBcd2>
 80015e4:	4603      	mov	r3, r0
 80015e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fa22 	bl	8001a36 <RTC_ByteToBcd2>
 80015f2:	4603      	mov	r3, r0
 80015f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80015f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fa1a 	bl	8001a36 <RTC_ByteToBcd2>
 8001602:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001604:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	78db      	ldrb	r3, [r3, #3]
 800160c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800160e:	4313      	orrs	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e018      	b.n	8001646 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2200      	movs	r2, #0
 8001626:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001634:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800163a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	78db      	ldrb	r3, [r3, #3]
 8001640:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001642:	4313      	orrs	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	22ca      	movs	r2, #202	; 0xca
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2253      	movs	r2, #83	; 0x53
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f991 	bl	800197e <RTC_EnterInitMode>
 800165c:	4603      	mov	r3, r0
 800165e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d120      	bne.n	80016a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001670:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001674:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	431a      	orrs	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f9a4 	bl	80019ec <RTC_ExitInitMode>
 80016a4:	4603      	mov	r3, r0
 80016a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	22ff      	movs	r2, #255	; 0xff
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	771a      	strb	r2, [r3, #28]

  return status;
 80016c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80016fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001702:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170e:	b2da      	uxtb	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800171e:	b2da      	uxtb	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	0d9b      	lsrs	r3, r3, #22
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11a      	bne.n	800177e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f98f 	bl	8001a70 <RTC_Bcd2ToByte>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f986 	bl	8001a70 <RTC_Bcd2ToByte>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	789b      	ldrb	r3, [r3, #2]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f97d 	bl	8001a70 <RTC_Bcd2ToByte>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	7f1b      	ldrb	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_RTC_SetDate+0x1c>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e071      	b.n	8001888 <HAL_RTC_SetDate+0x100>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2202      	movs	r2, #2
 80017ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <HAL_RTC_SetDate+0x4c>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	f023 0310 	bic.w	r3, r3, #16
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	330a      	adds	r3, #10
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11c      	bne.n	8001814 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	78db      	ldrb	r3, [r3, #3]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f929 	bl	8001a36 <RTC_ByteToBcd2>
 80017e4:	4603      	mov	r3, r0
 80017e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f922 	bl	8001a36 <RTC_ByteToBcd2>
 80017f2:	4603      	mov	r3, r0
 80017f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80017f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f91a 	bl	8001a36 <RTC_ByteToBcd2>
 8001802:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001804:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800180e:	4313      	orrs	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e00e      	b.n	8001832 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	78db      	ldrb	r3, [r3, #3]
 8001818:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001820:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001826:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800182e:	4313      	orrs	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	22ca      	movs	r2, #202	; 0xca
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2253      	movs	r2, #83	; 0x53
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f89b 	bl	800197e <RTC_EnterInitMode>
 8001848:	4603      	mov	r3, r0
 800184a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800184c:	7cfb      	ldrb	r3, [r7, #19]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800185c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001860:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f8c2 	bl	80019ec <RTC_ExitInitMode>
 8001868:	4603      	mov	r3, r0
 800186a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	771a      	strb	r2, [r3, #28]

  return status;
 8001886:	7cfb      	ldrb	r3, [r7, #19]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	0b5b      	lsrs	r3, r3, #13
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11a      	bne.n	8001924 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f8bc 	bl	8001a70 <RTC_Bcd2ToByte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	785b      	ldrb	r3, [r3, #1]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f8b3 	bl	8001a70 <RTC_Bcd2ToByte>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	789b      	ldrb	r3, [r3, #2]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f8aa 	bl	8001a70 <RTC_Bcd2ToByte>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001948:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194a:	f7fe ffb7 	bl	80008bc <HAL_GetTick>
 800194e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001950:	e009      	b.n	8001966 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001952:	f7fe ffb3 	bl	80008bc <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001960:	d901      	bls.n	8001966 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e007      	b.n	8001976 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ee      	beq.n	8001952 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d122      	bne.n	80019e2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019ac:	f7fe ff86 	bl	80008bc <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80019b2:	e00c      	b.n	80019ce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80019b4:	f7fe ff82 	bl	80008bc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019c2:	d904      	bls.n	80019ce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2204      	movs	r2, #4
 80019c8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <RTC_EnterInitMode+0x64>
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d1e8      	bne.n	80019b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff89 	bl	800192e <HAL_RTC_WaitForSynchro>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2204      	movs	r2, #4
 8001a26:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8001a44:	e005      	b.n	8001a52 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3b0a      	subs	r3, #10
 8001a50:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d8f6      	bhi.n	8001a46 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b2db      	uxtb	r3, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b2db      	uxtb	r3, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <__libc_init_array>:
 8001aa8:	b570      	push	{r4, r5, r6, lr}
 8001aaa:	4d0d      	ldr	r5, [pc, #52]	; (8001ae0 <__libc_init_array+0x38>)
 8001aac:	4c0d      	ldr	r4, [pc, #52]	; (8001ae4 <__libc_init_array+0x3c>)
 8001aae:	1b64      	subs	r4, r4, r5
 8001ab0:	10a4      	asrs	r4, r4, #2
 8001ab2:	2600      	movs	r6, #0
 8001ab4:	42a6      	cmp	r6, r4
 8001ab6:	d109      	bne.n	8001acc <__libc_init_array+0x24>
 8001ab8:	4d0b      	ldr	r5, [pc, #44]	; (8001ae8 <__libc_init_array+0x40>)
 8001aba:	4c0c      	ldr	r4, [pc, #48]	; (8001aec <__libc_init_array+0x44>)
 8001abc:	f000 f820 	bl	8001b00 <_init>
 8001ac0:	1b64      	subs	r4, r4, r5
 8001ac2:	10a4      	asrs	r4, r4, #2
 8001ac4:	2600      	movs	r6, #0
 8001ac6:	42a6      	cmp	r6, r4
 8001ac8:	d105      	bne.n	8001ad6 <__libc_init_array+0x2e>
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
 8001acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad0:	4798      	blx	r3
 8001ad2:	3601      	adds	r6, #1
 8001ad4:	e7ee      	b.n	8001ab4 <__libc_init_array+0xc>
 8001ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ada:	4798      	blx	r3
 8001adc:	3601      	adds	r6, #1
 8001ade:	e7f2      	b.n	8001ac6 <__libc_init_array+0x1e>
 8001ae0:	08001b30 	.word	0x08001b30
 8001ae4:	08001b30 	.word	0x08001b30
 8001ae8:	08001b30 	.word	0x08001b30
 8001aec:	08001b34 	.word	0x08001b34

08001af0 <memset>:
 8001af0:	4402      	add	r2, r0
 8001af2:	4603      	mov	r3, r0
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d100      	bne.n	8001afa <memset+0xa>
 8001af8:	4770      	bx	lr
 8001afa:	f803 1b01 	strb.w	r1, [r3], #1
 8001afe:	e7f9      	b.n	8001af4 <memset+0x4>

08001b00 <_init>:
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	bf00      	nop
 8001b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b06:	bc08      	pop	{r3}
 8001b08:	469e      	mov	lr, r3
 8001b0a:	4770      	bx	lr

08001b0c <_fini>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr
