
QP - Projeto03 - Publish-Subscribe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030fc  080030fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d20  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f74  00000000  00000000  00029d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  0002d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020323  00000000  00000000  0002db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae4d  00000000  00000000  0004de53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed1f  00000000  00000000  00058ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001179bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b78  00000000  00000000  00117a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003000 	.word	0x08003000

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003000 	.word	0x08003000

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b974 	b.w	8000ad4 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468e      	mov	lr, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d14d      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000812:	428a      	cmp	r2, r1
 8000814:	4694      	mov	ip, r2
 8000816:	d969      	bls.n	80008ec <__udivmoddi4+0xe8>
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	b152      	cbz	r2, 8000834 <__udivmoddi4+0x30>
 800081e:	fa01 f302 	lsl.w	r3, r1, r2
 8000822:	f1c2 0120 	rsb	r1, r2, #32
 8000826:	fa20 f101 	lsr.w	r1, r0, r1
 800082a:	fa0c fc02 	lsl.w	ip, ip, r2
 800082e:	ea41 0e03 	orr.w	lr, r1, r3
 8000832:	4094      	lsls	r4, r2
 8000834:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000838:	0c21      	lsrs	r1, r4, #16
 800083a:	fbbe f6f8 	udiv	r6, lr, r8
 800083e:	fa1f f78c 	uxth.w	r7, ip
 8000842:	fb08 e316 	mls	r3, r8, r6, lr
 8000846:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800084a:	fb06 f107 	mul.w	r1, r6, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 811f 	bcs.w	8000a9c <__udivmoddi4+0x298>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 811c 	bls.w	8000a9c <__udivmoddi4+0x298>
 8000864:	3e02      	subs	r6, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 f707 	mul.w	r7, r0, r7
 800087c:	42a7      	cmp	r7, r4
 800087e:	d90a      	bls.n	8000896 <__udivmoddi4+0x92>
 8000880:	eb1c 0404 	adds.w	r4, ip, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	f080 810a 	bcs.w	8000aa0 <__udivmoddi4+0x29c>
 800088c:	42a7      	cmp	r7, r4
 800088e:	f240 8107 	bls.w	8000aa0 <__udivmoddi4+0x29c>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800089a:	1be4      	subs	r4, r4, r7
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa4>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xc2>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	f000 80ef 	beq.w	8000a96 <__udivmoddi4+0x292>
 80008b8:	2600      	movs	r6, #0
 80008ba:	e9c5 0100 	strd	r0, r1, [r5]
 80008be:	4630      	mov	r0, r6
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f683 	clz	r6, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d14a      	bne.n	8000964 <__udivmoddi4+0x160>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd4>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80f9 	bhi.w	8000aca <__udivmoddi4+0x2c6>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	469e      	mov	lr, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa4>
 80008e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa4>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xec>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 8092 	bne.w	8000a1e <__udivmoddi4+0x21a>
 80008fa:	eba1 010c 	sub.w	r1, r1, ip
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2601      	movs	r6, #1
 8000908:	0c20      	lsrs	r0, r4, #16
 800090a:	fbb1 f3f7 	udiv	r3, r1, r7
 800090e:	fb07 1113 	mls	r1, r7, r3, r1
 8000912:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000916:	fb0e f003 	mul.w	r0, lr, r3
 800091a:	4288      	cmp	r0, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x12c>
 800091e:	eb1c 0101 	adds.w	r1, ip, r1
 8000922:	f103 38ff 	add.w	r8, r3, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x12a>
 8000928:	4288      	cmp	r0, r1
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2c0>
 800092e:	4643      	mov	r3, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1110 	mls	r1, r7, r0, r1
 800093c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x156>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x154>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2ca>
 8000958:	4608      	mov	r0, r1
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000962:	e79c      	b.n	800089e <__udivmoddi4+0x9a>
 8000964:	f1c6 0720 	rsb	r7, r6, #32
 8000968:	40b3      	lsls	r3, r6
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa20 f407 	lsr.w	r4, r0, r7
 8000976:	fa01 f306 	lsl.w	r3, r1, r6
 800097a:	431c      	orrs	r4, r3
 800097c:	40f9      	lsrs	r1, r7
 800097e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000982:	fa00 f306 	lsl.w	r3, r0, r6
 8000986:	fbb1 f8f9 	udiv	r8, r1, r9
 800098a:	0c20      	lsrs	r0, r4, #16
 800098c:	fa1f fe8c 	uxth.w	lr, ip
 8000990:	fb09 1118 	mls	r1, r9, r8, r1
 8000994:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000998:	fb08 f00e 	mul.w	r0, r8, lr
 800099c:	4288      	cmp	r0, r1
 800099e:	fa02 f206 	lsl.w	r2, r2, r6
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b8>
 80009a4:	eb1c 0101 	adds.w	r1, ip, r1
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4461      	add	r1, ip
 80009bc:	1a09      	subs	r1, r1, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009c4:	fb09 1110 	mls	r1, r9, r0, r1
 80009c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d0:	458e      	cmp	lr, r1
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1e2>
 80009d4:	eb1c 0101 	adds.w	r1, ip, r1
 80009d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2b4>
 80009de:	458e      	cmp	lr, r1
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2b4>
 80009e2:	3802      	subs	r0, #2
 80009e4:	4461      	add	r1, ip
 80009e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ea:	fba0 9402 	umull	r9, r4, r0, r2
 80009ee:	eba1 010e 	sub.w	r1, r1, lr
 80009f2:	42a1      	cmp	r1, r4
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46a6      	mov	lr, r4
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x2a4>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x2a0>
 80009fc:	b15d      	cbz	r5, 8000a16 <__udivmoddi4+0x212>
 80009fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000a02:	eb61 010e 	sbc.w	r1, r1, lr
 8000a06:	fa01 f707 	lsl.w	r7, r1, r7
 8000a0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a0e:	40f1      	lsrs	r1, r6
 8000a10:	431f      	orrs	r7, r3
 8000a12:	e9c5 7100 	strd	r7, r1, [r5]
 8000a16:	2600      	movs	r6, #0
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	f1c2 0320 	rsb	r3, r2, #32
 8000a22:	40d8      	lsrs	r0, r3
 8000a24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a28:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a40:	0c0b      	lsrs	r3, r1, #16
 8000a42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a46:	fb00 f60e 	mul.w	r6, r0, lr
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x260>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b8>
 8000a5c:	429e      	cmp	r6, r3
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b8>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4463      	add	r3, ip
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	b289      	uxth	r1, r1
 8000a68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a74:	fb06 f30e 	mul.w	r3, r6, lr
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x28a>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a8a:	3e02      	subs	r6, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	1ac9      	subs	r1, r1, r3
 8000a90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0x104>
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e705      	b.n	80008a8 <__udivmoddi4+0xa4>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e3      	b.n	8000868 <__udivmoddi4+0x64>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6f8      	b.n	8000896 <__udivmoddi4+0x92>
 8000aa4:	454b      	cmp	r3, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f8>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f8>
 8000ab4:	4646      	mov	r6, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x28a>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1e2>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x260>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b8>
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	4461      	add	r1, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x12c>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e709      	b.n	80008e2 <__udivmoddi4+0xde>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x156>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <SMConsumer_ctor>:
----------------------------------------------------*/
QMActive * const AO_SMConsumer = (QMActive *)&l_consumer; /*

opaque pointer */
void SMConsumer_ctor(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
    SMConsumer *me = &l_consumer;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SMConsumer_ctor+0x1c>)
 8000ae0:	607b      	str	r3, [r7, #4]

    // Construtor. Inicializa e coloca no estado inicial.
    QMActive_ctor(&me->super, Q_STATE_CAST(&SMConsumer_initial));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <SMConsumer_ctor+0x20>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f816 	bl	8002b18 <QMActive_ctor>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000028 	.word	0x20000028
 8000af8:	08000afd 	.word	0x08000afd

08000afc <SMConsumer_initial>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::SMConsumer} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::SMConsumer} ......................................................*/
/*.${AOs::SMConsumer::SM} ..................................................*/
QState SMConsumer_initial(SMConsumer * const me, void const * const par) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
            Q_ACTION_CAST(&SMConsumer_Consumindo_e), /* entry */
            Q_ACTION_NULL /* zero terminator */
        }
    };
    /*.${AOs::SMConsumer::SM::initial} */
    return QM_TRAN_INIT(&tatbl_);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <SMConsumer_initial+0x20>)
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	2309      	movs	r3, #9
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	08003030 	.word	0x08003030

08000b20 <SMConsumer_Consumindo_e>:
    Q_ACTION_CAST(&SMConsumer_Consumindo_e),
    Q_ACTION_NULL, /* no exit action */
    Q_ACTION_NULL  /* no initial tran. */
};
/*.${AOs::SMConsumer::SM::Consumindo} */
QState SMConsumer_Consumindo_e(SMConsumer * const me) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    QActive_subscribe((QActive *)me, PISCAR_LED_SIG);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f001 ff8a 	bl	8002a44 <QActive_subscribe>
    return QM_ENTRY(&SMConsumer_Consumindo_s);
 8000b30:	2305      	movs	r3, #5
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <SMConsumer_Consumindo>:
/*.${AOs::SMConsumer::SM::Consumindo} */
QState SMConsumer_Consumindo(SMConsumer * const me, QEvt const * const e) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d104      	bne.n	8000b56 <SMConsumer_Consumindo+0x1c>
        /*.${AOs::SMConsumer::SM::Consumindo::PISCAR_LED} */
        case PISCAR_LED_SIG: {
            ToggleLED();
 8000b4c:	f000 f80c 	bl	8000b68 <ToggleLED>
            status_ = QM_HANDLED();
 8000b50:	2303      	movs	r3, #3
 8000b52:	60fb      	str	r3, [r7, #12]
            break;
 8000b54:	e002      	b.n	8000b5c <SMConsumer_Consumindo+0x22>
        }
        default: {
            status_ = QM_SUPER();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
            break;
 8000b5a:	bf00      	nop
        }
    }
    (void)me; /* unused parameter */
    return status_;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <ToggleLED>:
 */

#include "main.h"

void ToggleLED(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ToggleLED+0x10>)
 8000b70:	f000 fdfd 	bl	800176e <HAL_GPIO_TogglePin>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40020000 	.word	0x40020000

08000b7c <SMLed_ctor>:
/* Public-scope objects
----------------------------------------------------*/
QMActive * const AO_SMLed = (QMActive *)&l_led; /* opaque pointer */

void SMLed_ctor(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
    SMLed *me = &l_led;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <SMLed_ctor+0x2c>)
 8000b84:	607b      	str	r3, [r7, #4]

    // Construtor. Inicializa e coloca no estado inicial.
    QMActive_ctor(&me->super, Q_STATE_CAST(&SMLed_initial));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4908      	ldr	r1, [pc, #32]	; (8000bac <SMLed_ctor+0x30>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 ffc4 	bl	8002b18 <QMActive_ctor>
    QTimeEvt_ctorX(&me->timer, (QActive *) &me->super, TIMEOUT_SIG, 0U);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f103 0020 	add.w	r0, r3, #32
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	f002 f86e 	bl	8002c7c <QTimeEvt_ctorX>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000048 	.word	0x20000048
 8000bac:	08000bb1 	.word	0x08000bb1

08000bb0 <SMLed_initial>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::SMLed} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::SMLed} ...........................................................*/
/*.${AOs::SMLed::SM} .......................................................*/
QState SMLed_initial(SMLed * const me, void const * const par) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
            Q_ACTION_CAST(&SMLed_Desligado_e), /* entry */
            Q_ACTION_NULL /* zero terminator */
        }
    };
    /*.${AOs::SMLed::SM::initial} */
    return QM_TRAN_INIT(&tatbl_);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <SMLed_initial+0x20>)
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	2309      	movs	r3, #9
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	08003054 	.word	0x08003054

08000bd4 <SMLed_Desligado_e>:
    Q_ACTION_CAST(&SMLed_Desligado_e),
    Q_ACTION_CAST(&SMLed_Desligado_x),
    Q_ACTION_NULL  /* no initial tran. */
};
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado_e(SMLed * const me) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    QTimeEvt_armX(&me->timer, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/10);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3320      	adds	r3, #32
 8000be0:	2264      	movs	r2, #100	; 0x64
 8000be2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 f878 	bl	8002cdc <QTimeEvt_armX>
    return QM_ENTRY(&SMLed_Desligado_s);
 8000bec:	2305      	movs	r3, #5
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <SMLed_Desligado_x>:
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado_x(SMLed * const me) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
    QTimeEvt_disarm(&me->timer);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3320      	adds	r3, #32
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f8c4 	bl	8002d90 <QTimeEvt_disarm>
    return QM_EXIT(&SMLed_Desligado_s);
 8000c08:	2306      	movs	r3, #6
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <SMLed_Desligado>:
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado(SMLed * const me, QEvt const * const e) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	2b06      	cmp	r3, #6
 8000c22:	d104      	bne.n	8000c2e <SMLed_Desligado+0x1c>
        /*.${AOs::SMLed::SM::Desligado::TIMEOUT} */
        case TIMEOUT_SIG: {
            PublicarEvento();
 8000c24:	f000 f80c 	bl	8000c40 <PublicarEvento>
            status_ = QM_HANDLED();
 8000c28:	2303      	movs	r3, #3
 8000c2a:	60fb      	str	r3, [r7, #12]
            break;
 8000c2c:	e002      	b.n	8000c34 <SMLed_Desligado+0x22>
        }
        default: {
            status_ = QM_SUPER();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
            break;
 8000c32:	bf00      	nop
        }
    }
    (void)me; /* unused parameter */
    return status_;
 8000c34:	68fb      	ldr	r3, [r7, #12]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <PublicarEvento>:
#include "main.h"
#include "qf_port.h"
#include "SharedData.h"

void PublicarEvento(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	static QEvt const evt = { PISCAR_LED_SIG, 0 };
	QF_PUBLISH(&evt, 0);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <PublicarEvento+0x10>)
 8000c46:	f001 fe83 	bl	8002950 <QF_publish_>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08003060 	.word	0x08003060

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cac:	f3bf 8f4f 	dsb	sy
}
 8000cb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <__NVIC_SystemReset+0x24>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cba:	4904      	ldr	r1, [pc, #16]	; (8000ccc <__NVIC_SystemReset+0x24>)
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_SystemReset+0x28>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc2:	f3bf 8f4f 	dsb	sy
}
 8000cc6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <__NVIC_SystemReset+0x20>
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	05fa0004 	.word	0x05fa0004

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ffac 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af04      	add	r7, sp, #16
	static QEvt const *evtQueueConsumer[10];

	static QSubscrList l_subscrSto[MAX_PUB_SIG]; // Lista de inscritos do mecanismo publish-subscribe do QP.

	// Construtores dos Active Objects.
	SMLed_ctor();
 8000d1e:	f7ff ff2d 	bl	8000b7c <SMLed_ctor>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f000 f9eb 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 f857 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2a:	f000 f8b3 	bl	8000e94 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Inicializa o framework do QP.
  QF_init();
 8000d2e:	f002 f897 	bl	8002e60 <QF_init>

  QF_psInit(l_subscrSto, Q_DIM(l_subscrSto));
 8000d32:	2105      	movs	r1, #5
 8000d34:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <main+0xa8>)
 8000d36:	f001 fdf1 	bl	800291c <QF_psInit>

  uint8_t priority = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]

  SMConsumer_ctor();
 8000d3e:	f7ff fecb 	bl	8000ad8 <SMConsumer_ctor>

  QACTIVE_START(AO_SMLed, priority++, evtQueueLed, Q_DIM(evtQueueLed),(void *)0, 0U, (QEvt *)0);
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <main+0xac>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d103      	bne.n	8000d54 <main+0x3c>
 8000d4c:	2171      	movs	r1, #113	; 0x71
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <main+0xb0>)
 8000d50:	f000 f92a 	bl	8000fa8 <Q_onAssert>
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <main+0xac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689c      	ldr	r4, [r3, #8]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <main+0xac>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	71fa      	strb	r2, [r7, #7]
 8000d66:	4619      	mov	r1, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	2300      	movs	r3, #0
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	230a      	movs	r3, #10
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <main+0xb4>)
 8000d78:	47a0      	blx	r4
  QACTIVE_START(AO_SMConsumer, priority++, evtQueueConsumer, Q_DIM(evtQueueConsumer), (void* )0, 0U, (QEvt* )0);
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <main+0xb8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <main+0x74>
 8000d84:	2172      	movs	r1, #114	; 0x72
 8000d86:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <main+0xb0>)
 8000d88:	f000 f90e 	bl	8000fa8 <Q_onAssert>
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <main+0xb8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689c      	ldr	r4, [r3, #8]
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <main+0xb8>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	71fa      	strb	r2, [r7, #7]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2300      	movs	r3, #0
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	2300      	movs	r3, #0
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	2300      	movs	r3, #0
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	230a      	movs	r3, #10
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <main+0xbc>)
 8000db0:	47a0      	blx	r4

  // Executa a aplicação QF.
  return QF_run();
 8000db2:	f002 f87d 	bl	8002eb0 <QF_run>
 8000db6:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	20000078 	.word	0x20000078
 8000dc4:	0800303c 	.word	0x0800303c
 8000dc8:	08003064 	.word	0x08003064
 8000dcc:	2000008c 	.word	0x2000008c
 8000dd0:	08003018 	.word	0x08003018
 8000dd4:	200000b4 	.word	0x200000b4

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 f902 	bl	8002ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <SystemClock_Config+0xb4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <SystemClock_Config+0xb4>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <SystemClock_Config+0xb4>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <SystemClock_Config+0xb8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <SystemClock_Config+0xb8>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <SystemClock_Config+0xb8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fccf 	bl	80017ec <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e54:	f000 f8b4 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 ff32 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e7e:	f000 f89f 	bl	8000fc0 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000ee8:	f000 fc28 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000eec:	2310      	movs	r3, #16
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <MX_GPIO_Init+0xb0>)
 8000f02:	f000 fa7f 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000f1e:	f000 fa71 	bl	8001404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 fa35 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f000 fa4e 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40021000 	.word	0x40021000

08000f48 <QF_onStartup>:

/* USER CODE BEGIN 4 */

void QF_onStartup(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock * SYSTICK_INT_FREQ);
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <QF_onStartup+0x48>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fba5 	bl	80006a0 <__aeabi_ui2d>
 8000f56:	a30c      	add	r3, pc, #48	; (adr r3, 8000f88 <QF_onStartup+0x40>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff f934 	bl	80001c8 <__aeabi_dmul>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fc14 	bl	8000794 <__aeabi_d2uiz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff feb0 	bl	8000cd4 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, SysTick_PRIO);
 8000f74:	2103      	movs	r1, #3
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	f7ff fe6b 	bl	8000c54 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	f3af 8000 	nop.w
 8000f88:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f8c:	3f50624d 	.word	0x3f50624d
 8000f90:	20000000 	.word	0x20000000

08000f94 <QV_onIdle>:

void QF_onCleanup(void){}

void QV_onIdle(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	QF_INT_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f383 8811 	msr	BASEPRI, r3
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <Q_onAssert>:

void Q_onAssert(char_t const * const module, int_t location)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	QF_INT_DISABLE(); /* make sure that all interrupts are disabled */
 8000fb2:	233f      	movs	r3, #63	; 0x3f
 8000fb4:	b672      	cpsid	i
 8000fb6:	f383 8811 	msr	BASEPRI, r3
 8000fba:	b662      	cpsie	i
	NVIC_SystemReset();
 8000fbc:	f7ff fe74 	bl	8000ca8 <__NVIC_SystemReset>

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f89a 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  QF_TICK_X(0U, (void *)0);
 800106c:	2000      	movs	r0, #0
 800106e:	f001 fd6b 	bl	8002b48 <QF_tickX_>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO_Pin);
 800107a:	2010      	movs	r0, #16
 800107c:	f000 fb92 	bl	80017a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d2:	f7ff ffd7 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f001 ff67 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fe1d 	bl	8000d18 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010ec:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 80010f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010f4:	200001d0 	.word	0x200001d0

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f92b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff ff4c 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f943 	bl	80013ea <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f90b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	200000dc 	.word	0x200000dc

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200000dc 	.word	0x200000dc

080011e0 <__NVIC_SetPriorityGrouping>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e16b      	b.n	80016f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 815a 	bne.w	80016f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d005      	beq.n	8001456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	2b02      	cmp	r3, #2
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80b4 	beq.w	80016f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b60      	ldr	r3, [pc, #384]	; (8001710 <HAL_GPIO_Init+0x30c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a5f      	ldr	r2, [pc, #380]	; (8001710 <HAL_GPIO_Init+0x30c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HAL_GPIO_Init+0x30c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <HAL_GPIO_Init+0x310>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_GPIO_Init+0x314>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02b      	beq.n	800162a <HAL_GPIO_Init+0x226>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a51      	ldr	r2, [pc, #324]	; (800171c <HAL_GPIO_Init+0x318>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x222>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a50      	ldr	r2, [pc, #320]	; (8001720 <HAL_GPIO_Init+0x31c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x21e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	; (8001724 <HAL_GPIO_Init+0x320>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <HAL_GPIO_Init+0x324>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_GPIO_Init+0x328>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x32c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <HAL_GPIO_Init+0x330>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x20a>
 800160a:	2307      	movs	r3, #7
 800160c:	e00e      	b.n	800162c <HAL_GPIO_Init+0x228>
 800160e:	2308      	movs	r3, #8
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001612:	2306      	movs	r3, #6
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x228>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x228>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x228>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x228>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <HAL_GPIO_Init+0x310>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_GPIO_Init+0x334>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_GPIO_Init+0x334>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_GPIO_Init+0x334>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <HAL_GPIO_Init+0x334>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_GPIO_Init+0x334>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_GPIO_Init+0x334>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_GPIO_Init+0x334>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_GPIO_Init+0x334>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f ae90 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40021400 	.word	0x40021400
 8001730:	40021800 	.word	0x40021800
 8001734:	40021c00 	.word	0x40021c00
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43d9      	mvns	r1, r3
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	400b      	ands	r3, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f806 	bl	80017d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013c00 	.word	0x40013c00

080017d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e267      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d075      	beq.n	80018f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b04      	cmp	r3, #4
 8001814:	d00c      	beq.n	8001830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b85      	ldr	r3, [pc, #532]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800181e:	2b08      	cmp	r3, #8
 8001820:	d112      	bne.n	8001848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800182e:	d10b      	bne.n	8001848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4b7e      	ldr	r3, [pc, #504]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d05b      	beq.n	80018f4 <HAL_RCC_OscConfig+0x108>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d157      	bne.n	80018f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e242      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x74>
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a75      	ldr	r2, [pc, #468]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e01d      	b.n	800189c <HAL_RCC_OscConfig+0xb0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x98>
 800186a:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6f      	ldr	r2, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6c      	ldr	r2, [pc, #432]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xb0>
 8001884:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a68      	ldr	r2, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800188a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a65      	ldr	r2, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc90 	bl	80011c8 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fc8c 	bl	80011c8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e207      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0xc0>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fc7c 	bl	80011c8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fc78 	bl	80011c8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1f3      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0xe8>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d063      	beq.n	80019ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001916:	2b08      	cmp	r3, #8
 8001918:	d11c      	bne.n	8001954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x152>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e1c7      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	e03a      	b.n	80019ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0x244>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fc31 	bl	80011c8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fc2d 	bl	80011c8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1a8      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4925      	ldr	r1, [pc, #148]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x244>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fc10 	bl	80011c8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fc0c 	bl	80011c8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e187      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d036      	beq.n	8001a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x248>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff fbf0 	bl	80011c8 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff fbec 	bl	80011c8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e167      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x240>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x200>
 8001a0a:	e01b      	b.n	8001a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x248>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fbd9 	bl	80011c8 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	e00e      	b.n	8001a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fbd5 	bl	80011c8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d907      	bls.n	8001a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e150      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	42470000 	.word	0x42470000
 8001a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ea      	bne.n	8001a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8097 	beq.w	8001b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b7d      	ldr	r3, [pc, #500]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a7c      	ldr	r2, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b7a      	ldr	r3, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b77      	ldr	r3, [pc, #476]	; (8001c60 <HAL_RCC_OscConfig+0x474>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8e:	4b74      	ldr	r3, [pc, #464]	; (8001c60 <HAL_RCC_OscConfig+0x474>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a73      	ldr	r2, [pc, #460]	; (8001c60 <HAL_RCC_OscConfig+0x474>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fb95 	bl	80011c8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff fb91 	bl	80011c8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e10c      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x474>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
 8001ac8:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a63      	ldr	r2, [pc, #396]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x324>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x30c>
 8001ade:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a5e      	ldr	r2, [pc, #376]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a5b      	ldr	r2, [pc, #364]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0x324>
 8001af8:	4b58      	ldr	r3, [pc, #352]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a57      	ldr	r2, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
 8001b04:	4b55      	ldr	r3, [pc, #340]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a54      	ldr	r2, [pc, #336]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b0a:	f023 0304 	bic.w	r3, r3, #4
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d015      	beq.n	8001b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff fb56 	bl	80011c8 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff fb52 	bl	80011c8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0cb      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ee      	beq.n	8001b20 <HAL_RCC_OscConfig+0x334>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fb40 	bl	80011c8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fb3c 	bl	80011c8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0b5      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a1 	beq.w	8001ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d05c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d141      	bne.n	8001c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_RCC_OscConfig+0x478>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb10 	bl	80011c8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff fb0c 	bl	80011c8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e087      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	491b      	ldr	r1, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x478>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fae5 	bl	80011c8 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff fae1 	bl	80011c8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e05c      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x416>
 8001c20:	e054      	b.n	8001ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_RCC_OscConfig+0x478>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff face 	bl	80011c8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff faca 	bl	80011c8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e045      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_OscConfig+0x470>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x444>
 8001c4e:	e03d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e038      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x4ec>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d028      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d121      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d11a      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d111      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0cc      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d90c      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0b8      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d30:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	494d      	ldr	r1, [pc, #308]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d044      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d119      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e07f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e067      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4934      	ldr	r1, [pc, #208]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f9fc 	bl	80011c8 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f9f8 	bl	80011c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e04f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d20c      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e032      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4916      	ldr	r1, [pc, #88]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e62:	f000 f821 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	490a      	ldr	r1, [pc, #40]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	5ccb      	ldrb	r3, [r1, r3]
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f95c 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08003078 	.word	0x08003078
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eac:	b090      	sub	sp, #64	; 0x40
 8001eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d00d      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	f200 80a1 	bhi.w	8002014 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x34>
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eda:	e09b      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_GetSysClockFreq+0x184>)
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ee0:	e09b      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ee2:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ee6:	e098      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	; (8002028 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d028      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	2200      	movs	r2, #0
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	627a      	str	r2, [r7, #36]	; 0x24
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f10:	2100      	movs	r1, #0
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f14:	fb03 f201 	mul.w	r2, r3, r1
 8001f18:	2300      	movs	r3, #0
 8001f1a:	fb00 f303 	mul.w	r3, r0, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a43      	ldr	r2, [pc, #268]	; (8002030 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f22:	fba0 1202 	umull	r1, r2, r0, r2
 8001f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f28:	460a      	mov	r2, r1
 8001f2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2e:	4413      	add	r3, r2
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	2200      	movs	r2, #0
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	61fa      	str	r2, [r7, #28]
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f42:	f7fe fc47 	bl	80007d4 <__aeabi_uldivmod>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f4e:	e053      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	2200      	movs	r2, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	617a      	str	r2, [r7, #20]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f62:	f04f 0b00 	mov.w	fp, #0
 8001f66:	4652      	mov	r2, sl
 8001f68:	465b      	mov	r3, fp
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	0159      	lsls	r1, r3, #5
 8001f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f78:	0150      	lsls	r0, r2, #5
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001f82:	eb63 090b 	sbc.w	r9, r3, fp
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	00eb      	lsls	r3, r5, #3
 8001fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fb0:	00e2      	lsls	r2, r4, #3
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	eb14 030a 	adds.w	r3, r4, sl
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	eb45 030b 	adc.w	r3, r5, fp
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fce:	4629      	mov	r1, r5
 8001fd0:	028b      	lsls	r3, r1, #10
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fd8:	4621      	mov	r1, r4
 8001fda:	028a      	lsls	r2, r1, #10
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	60fa      	str	r2, [r7, #12]
 8001fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fec:	f7fe fbf2 	bl	80007d4 <__aeabi_uldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	3301      	adds	r3, #1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002012:	e002      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetSysClockFreq+0x184>)
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800201c:	4618      	mov	r0, r3
 800201e:	3740      	adds	r7, #64	; 0x40
 8002020:	46bd      	mov	sp, r7
 8002022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	00f42400 	.word	0x00f42400
 8002030:	017d7840 	.word	0x017d7840

08002034 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] |= (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI;
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <QV_init+0x6c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <QV_init+0x6c>)
 8002040:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 8002044:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
 8002048:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] |= (QF_BASEPRI << 24);
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <QV_init+0x70>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <QV_init+0x70>)
 8002050:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8002054:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] |= (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI;
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <QV_init+0x74>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <QV_init+0x74>)
 800205c:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8002060:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 8002064:	6013      	str	r3, [r2, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <QV_init+0x78>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002070:	3308      	adds	r3, #8
 8002072:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002082:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002086:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 800208a:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <QV_init+0x40>
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed18 	.word	0xe000ed18
 80020a4:	e000ed1c 	.word	0xe000ed1c
 80020a8:	e000ed20 	.word	0xe000ed20
 80020ac:	e000e004 	.word	0xe000e004

080020b0 <QMsm_ctor>:
* @usage
* The following example illustrates how to invoke QMsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qmsm_ctor.c
*/
void QMsm_ctor(QMsm * const me, QStateHandler initial) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
#ifdef Q_SPY
        ,&QMsm_getStateHandler_
#endif
    };
    /* do not call the QHsm_ctor() here */
    me->super.vptr = &vtable;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <QMsm_ctor+0x28>)
 80020be:	601a      	str	r2, [r3, #0]
    me->super.state.obj = &l_msm_top_s; /* the current state (top) */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a06      	ldr	r2, [pc, #24]	; (80020dc <QMsm_ctor+0x2c>)
 80020c4:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;      /* the initial transition handler */
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	609a      	str	r2, [r3, #8]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	080030a4 	.word	0x080030a4
 80020dc:	08003090 	.word	0x08003090

080020e0 <QMsm_init_>:
void QMsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QMsm_init_(QHsm * const me, void const * const e)
#endif
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <QMsm_init_+0x24>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <QMsm_init_+0x24>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a14      	ldr	r2, [pc, #80]	; (8002150 <QMsm_init_+0x70>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <QMsm_init_+0x2c>
 8002104:	21c8      	movs	r1, #200	; 0xc8
 8002106:	4813      	ldr	r0, [pc, #76]	; (8002154 <QMsm_init_+0x74>)
 8002108:	f7fe ff4e 	bl	8000fa8 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (me->state.obj == &l_msm_top_s));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	60f8      	str	r0, [r7, #12]

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN_INIT);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b09      	cmp	r3, #9
 800211c:	d003      	beq.n	8002126 <QMsm_init_+0x46>
 800211e:	21d2      	movs	r1, #210	; 0xd2
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <QMsm_init_+0x74>)
 8002122:	f7fe ff41 	bl	8000fa8 <Q_onAssert>
        QS_FUN_PRE_(me->state.obj->stateHandler);          /* source state */
        QS_FUN_PRE_(me->temp.tatbl->target->stateHandler); /* target state */
    QS_END_PRE_()

    /* set state to the last tran. target */
    me->state.obj = me->temp.tatbl->target;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	605a      	str	r2, [r3, #4]
    /* execute the tran. table */
    do {
#ifdef Q_SPY
        r = QMsm_execTatbl_(me, me->temp.tatbl, qs_id);
#else
        r = QMsm_execTatbl_(me, me->temp.tatbl);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8cc 	bl	80022d4 <QMsm_execTatbl_>
 800213c:	60f8      	str	r0, [r7, #12]
#endif
    } while (r >= (QState)Q_RET_TRAN_INIT);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d8f5      	bhi.n	8002130 <QMsm_init_+0x50>
    QS_BEGIN_PRE_(QS_QEP_INIT_TRAN, qs_id)
        QS_TIME_PRE_();   /* time stamp */
        QS_OBJ_PRE_(me);  /* this state machine object */
        QS_FUN_PRE_(me->state.obj->stateHandler); /* the new current state */
    QS_END_PRE_()
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	08003090 	.word	0x08003090
 8002154:	08003088 	.word	0x08003088

08002158 <QMsm_dispatch_>:
void QMsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QMsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    QMState const *s = me->state.obj; /* store the current state */
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]
    QMState const *t = s;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
    QState r;
    QS_CRIT_STAT_

    /*! @pre current state must be initialized */
    Q_REQUIRE_ID(300, s != (QMState *)0);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <QMsm_dispatch_+0x24>
 8002172:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002176:	4856      	ldr	r0, [pc, #344]	; (80022d0 <QMsm_dispatch_+0x178>)
 8002178:	f7fe ff16 	bl	8000fa8 <Q_onAssert>
        QS_FUN_PRE_(s->stateHandler); /* the current state handler */
    QS_END_PRE_()

    /* scan the state hierarchy up to the top state... */
    do {
        r = (*t->stateHandler)(me, e);  /* call state handler function */
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
 8002186:	6178      	str	r0, [r7, #20]

        /* event handled? (the most frequent case) */
        if (r >= (QState)Q_RET_HANDLED) {
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d81d      	bhi.n	80021ca <QMsm_dispatch_+0x72>
            break; /* done scanning the state hierarchy */
        }
        /* event unhandled and passed to the superstate? */
        else if (r == (QState)Q_RET_SUPER) {
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <QMsm_dispatch_+0x44>
            t = t->superstate; /* advance to the superstate */
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	e012      	b.n	80021c2 <QMsm_dispatch_+0x6a>
        }
        /* event unhandled and passed to a submachine superstate? */
        else if (r == (QState)Q_RET_SUPER_SUB) {
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d103      	bne.n	80021aa <QMsm_dispatch_+0x52>
            t = me->temp.obj; /* current host state of the submachie */
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e00b      	b.n	80021c2 <QMsm_dispatch_+0x6a>
        }
        /* event unhandled due to a guard? */
        else if (r == (QState)Q_RET_UNHANDLED) {
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d103      	bne.n	80021b8 <QMsm_dispatch_+0x60>
                QS_SIG_PRE_(e->sig);  /* the signal of the event */
                QS_OBJ_PRE_(me);      /* this state machine object */
                QS_FUN_PRE_(t->stateHandler); /* the current state */
            QS_END_PRE_()

            t = t->superstate; /* advance to the superstate */
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	e004      	b.n	80021c2 <QMsm_dispatch_+0x6a>
        }
        else {
            /* no other return value should be produced */
            Q_ERROR_ID(310);
 80021b8:	f44f 719b 	mov.w	r1, #310	; 0x136
 80021bc:	4844      	ldr	r0, [pc, #272]	; (80022d0 <QMsm_dispatch_+0x178>)
 80021be:	f7fe fef3 	bl	8000fa8 <Q_onAssert>
        }
    } while (t != (QMState *)0);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1d9      	bne.n	800217c <QMsm_dispatch_+0x24>
 80021c8:	e000      	b.n	80021cc <QMsm_dispatch_+0x74>
            break; /* done scanning the state hierarchy */
 80021ca:	bf00      	nop


    /* any kind of transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b07      	cmp	r3, #7
 80021d0:	d979      	bls.n	80022c6 <QMsm_dispatch_+0x16e>
        Q_ASSERT_ID(320, ts != (QMState *)0);
#endif /* Q_SPY */

        do {
            /* save the transition-action table before it gets clobbered */
            struct QMTranActTable const * const tatbl = me->temp.tatbl;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	613b      	str	r3, [r7, #16]
            union QHsmAttr tmp; /* temporary to save intermediate values */

            /* was TRAN, TRAN_INIT, or TRAN_EP taken? */
            if (r <= (QState)Q_RET_TRAN_EP) {
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b0a      	cmp	r3, #10
 80021dc:	d80d      	bhi.n	80021fa <QMsm_dispatch_+0xa2>
#ifdef Q_SPY
                QMsm_exitToTranSource_(me, s, t, qs_id);
                r = QMsm_execTatbl_(me, tatbl, qs_id);
#else
                QMsm_exitToTranSource_(me, s, t);
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	69f9      	ldr	r1, [r7, #28]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8a8 	bl	8002338 <QMsm_exitToTranSource_>
                r = QMsm_execTatbl_(me, tatbl);
 80021e8:	6939      	ldr	r1, [r7, #16]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f872 	bl	80022d4 <QMsm_execTatbl_>
 80021f0:	6178      	str	r0, [r7, #20]
#endif
                s = me->state.obj;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	e060      	b.n	80022bc <QMsm_dispatch_+0x164>
            }
            /* was a transition segment to history taken? */
            else if (r == (QState)Q_RET_TRAN_HIST) {
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b0b      	cmp	r3, #11
 80021fe:	d118      	bne.n	8002232 <QMsm_dispatch_+0xda>
                tmp.obj = me->state.obj; /* save history */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
                me->state.obj = s; /* restore the original state */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	605a      	str	r2, [r3, #4]
#ifdef Q_SPY
                QMsm_exitToTranSource_(me, s, t, qs_id);
                (void)QMsm_execTatbl_(me, tatbl, qs_id);
                r = QMsm_enterHistory_(me, tmp.obj, qs_id);
#else
                QMsm_exitToTranSource_(me, s, t);
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	69f9      	ldr	r1, [r7, #28]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f891 	bl	8002338 <QMsm_exitToTranSource_>
                (void)QMsm_execTatbl_(me, tatbl);
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f85b 	bl	80022d4 <QMsm_execTatbl_>
                r = QMsm_enterHistory_(me, tmp.obj);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8b6 	bl	8002394 <QMsm_enterHistory_>
 8002228:	6178      	str	r0, [r7, #20]
#endif
                s = me->state.obj;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	e044      	b.n	80022bc <QMsm_dispatch_+0x164>
            }
            /* was a transition segment to an exit point taken? */
            else if (r == (QState)Q_RET_TRAN_XP) {
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d13c      	bne.n	80022b2 <QMsm_dispatch_+0x15a>
                tmp.act = me->state.act; /* save XP action */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
                me->state.obj = s; /* restore the original state */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	605a      	str	r2, [r3, #4]
                r = (*tmp.act)(me); /* execute the XP action */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	6178      	str	r0, [r7, #20]
                if (r == (QState)Q_RET_TRAN) { /* XP -> TRAN ? */
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d10c      	bne.n	800226c <QMsm_dispatch_+0x114>
                    tmp.tatbl = me->temp.tatbl; /* save me->temp */
                    QMsm_exitToTranSource_(me, s, t, qs_id);
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl, qs_id);
#else
                    QMsm_exitToTranSource_(me, s, t);
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	69f9      	ldr	r1, [r7, #28]
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f86e 	bl	8002338 <QMsm_exitToTranSource_>
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl);
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f838 	bl	80022d4 <QMsm_execTatbl_>
#endif /* Q_SPY */
                    s = me->state.obj;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e027      	b.n	80022bc <QMsm_dispatch_+0x164>
#ifdef Q_SPY
                    me->temp.tatbl = tmp.tatbl; /* restore me->temp */
#endif /* Q_SPY */
                }
                else if (r == (QState)Q_RET_TRAN_HIST) { /* XP -> HIST ? */
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b0b      	cmp	r3, #11
 8002270:	d117      	bne.n	80022a2 <QMsm_dispatch_+0x14a>
                    tmp.obj = me->state.obj; /* save the history */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
                    me->state.obj = s; /* restore the original state */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	605a      	str	r2, [r3, #4]
                    s = me->temp.obj; /* save me->temp */
                    QMsm_exitToTranSource_(me, me->state.obj, t, qs_id);
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl, qs_id);
#else
                    QMsm_exitToTranSource_(me, me->state.obj, t);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f856 	bl	8002338 <QMsm_exitToTranSource_>
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl);
 800228c:	6939      	ldr	r1, [r7, #16]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f820 	bl	80022d4 <QMsm_execTatbl_>
#endif /* Q_SPY */
#ifdef Q_SPY
                    me->temp.obj = s; /* restore me->temp */
#endif /* Q_SPY */
                    s = me->state.obj;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	61fb      	str	r3, [r7, #28]
                    me->state.obj = tmp.obj; /* restore the history */
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	e00c      	b.n	80022bc <QMsm_dispatch_+0x164>
                }
                else {
                    /* TRAN_XP must NOT be followed by any other tran type */
                    Q_ASSERT_ID(330, r < (QState)Q_RET_TRAN);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d909      	bls.n	80022bc <QMsm_dispatch_+0x164>
 80022a8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <QMsm_dispatch_+0x178>)
 80022ae:	f7fe fe7b 	bl	8000fa8 <Q_onAssert>
                }
            }
            else {
                /* no other return value should be produced */
                Q_ERROR_ID(340);
 80022b2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <QMsm_dispatch_+0x178>)
 80022b8:	f7fe fe76 	bl	8000fa8 <Q_onAssert>
            }

            t = s; /* set target to the current state */
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	61bb      	str	r3, [r7, #24]

        } while (r >= (QState)Q_RET_TRAN);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d885      	bhi.n	80021d2 <QMsm_dispatch_+0x7a>
    }
#endif /* Q_SPY */
    else {
        /* empty */
    }
}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	08003088 	.word	0x08003088

080022d4 <QMsm_execTatbl_>:
                              uint_fast8_t const qs_id)
#else
static QState QMsm_execTatbl_(QHsm * const me,
                              struct QMTranActTable const *tatbl)
#endif
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    QState r = (QState)Q_RET_NULL;
 80022de:	2307      	movs	r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
    QS_CRIT_STAT_

    /*! @pre the transition-action table pointer must not be NULL */
    Q_REQUIRE_ID(400, tatbl != (struct QMTranActTable *)0);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <QMsm_execTatbl_+0x1e>
 80022e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80022ec:	4811      	ldr	r0, [pc, #68]	; (8002334 <QMsm_execTatbl_+0x60>)
 80022ee:	f7fe fe5b 	bl	8000fa8 <Q_onAssert>

    for (QActionHandler const *a = &tatbl->act[0];
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	3304      	adds	r3, #4
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	e007      	b.n	800230a <QMsm_execTatbl_+0x36>
         *a != Q_ACTION_CAST(0);
         ++a)
    {
        r = (*(*a))(me); /* call the action through the 'a' pointer */
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
 8002302:	60f8      	str	r0, [r7, #12]
         ++a)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	3304      	adds	r3, #4
 8002308:	60bb      	str	r3, [r7, #8]
         *a != Q_ACTION_CAST(0);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	681b      	ldr	r3, [r3, #0]
    for (QActionHandler const *a = &tatbl->act[0];
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f3      	bne.n	80022fa <QMsm_execTatbl_+0x26>
#endif /* Q_SPY */
    }

    me->state.obj = (r >= (QState)Q_RET_TRAN)
        ? me->temp.tatbl->target
        : tatbl->target;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b07      	cmp	r3, #7
 8002316:	d903      	bls.n	8002320 <QMsm_execTatbl_+0x4c>
        ? me->temp.tatbl->target
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
        : tatbl->target;
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e001      	b.n	8002324 <QMsm_execTatbl_+0x50>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
    me->state.obj = (r >= (QState)Q_RET_TRAN)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6053      	str	r3, [r2, #4]
    return r;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	08003088 	.word	0x08003088

08002338 <QMsm_exitToTranSource_>:
                                   uint_fast8_t const qs_id)
#else
static void QMsm_exitToTranSource_(QHsm * const me, QMState const *cs,
                                   QMState const *ts)
#endif
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
    QMState const *s = cs;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	617b      	str	r3, [r7, #20]

    /* exit states from the current state to the tran. source state */
    while (s != ts) {
 8002348:	e018      	b.n	800237c <QMsm_exitToTranSource_+0x44>
        /* exit action provided in state 's'? */
        if (s->exitAction != Q_ACTION_CAST(0)) {
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <QMsm_exitToTranSource_+0x22>
            QS_CRIT_STAT_

            (void)(*s->exitAction)(me); /* execute the exit action */
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	4798      	blx	r3
                QS_OBJ_PRE_(me);              /* this state machine object */
                QS_FUN_PRE_(s->stateHandler); /* the exited state handler */
            QS_END_PRE_()
        }

        s = s->superstate; /* advance to the superstate */
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]

        if (s == (QMState *)0) { /* reached the top of a submachine? */
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <QMsm_exitToTranSource_+0x44>
            s = me->temp.obj; /* the superstate from QM_SM_EXIT() */
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	617b      	str	r3, [r7, #20]
            Q_ASSERT_ID(510, s != (QMState *)0); /* must be valid */
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <QMsm_exitToTranSource_+0x44>
 8002372:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <QMsm_exitToTranSource_+0x58>)
 8002378:	f7fe fe16 	bl	8000fa8 <Q_onAssert>
    while (s != ts) {
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d1e2      	bne.n	800234a <QMsm_exitToTranSource_+0x12>
        }
    }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	08003088 	.word	0x08003088

08002394 <QMsm_enterHistory_>:
static QState QMsm_enterHistory_(QHsm * const me, QMState const *const hist,
                                 uint_fast8_t const qs_id)
#else
static QState QMsm_enterHistory_(QHsm * const me, QMState const *const hist)
#endif
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    QMState const *s = hist;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    QMState const *ts = me->state.obj; /* transition source */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	623b      	str	r3, [r7, #32]
        QS_OBJ_PRE_(me);                 /* this state machine object */
        QS_FUN_PRE_(ts->stateHandler);   /* source state handler */
        QS_FUN_PRE_(hist->stateHandler); /* target state handler */
    QS_END_PRE_()

    int_fast8_t i = 0;  /* transition entry path index */
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    while (s != ts) {
 80023ac:	e01d      	b.n	80023ea <QMsm_enterHistory_+0x56>
        if (s->entryAction != Q_ACTION_CAST(0)) {
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d011      	beq.n	80023da <QMsm_enterHistory_+0x46>
            Q_ASSERT_ID(620, i < QMSM_MAX_ENTRY_DEPTH_);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	dd04      	ble.n	80023c6 <QMsm_enterHistory_+0x32>
 80023bc:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80023c0:	481e      	ldr	r0, [pc, #120]	; (800243c <QMsm_enterHistory_+0xa8>)
 80023c2:	f7fe fdf1 	bl	8000fa8 <Q_onAssert>
            epath[i] = s;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	3328      	adds	r3, #40	; 0x28
 80023cc:	443b      	add	r3, r7
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	f843 2c20 	str.w	r2, [r3, #-32]
            ++i;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
        }
        s = s->superstate;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
        if (s == (QMState *)0) {
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <QMsm_enterHistory_+0x56>
            ts = s; /* force exit from the for-loop */
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	623b      	str	r3, [r7, #32]
    while (s != ts) {
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d1dd      	bne.n	80023ae <QMsm_enterHistory_+0x1a>
        }
    }

    /* retrace the entry path in reverse (desired) order... */
    while (i > 0) {
 80023f2:	e00b      	b.n	800240c <QMsm_enterHistory_+0x78>
        --i;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
        (void)(*epath[i]->entryAction)(me); /* run entry action in epath[i] */
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3328      	adds	r3, #40	; 0x28
 8002400:	443b      	add	r3, r7
 8002402:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
    while (i > 0) {
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	dcf0      	bgt.n	80023f4 <QMsm_enterHistory_+0x60>
            QS_OBJ_PRE_(me);
            QS_FUN_PRE_(epath[i]->stateHandler); /* entered state handler */
        QS_END_PRE_()
    }

    me->state.obj = hist; /* set current state to the transition target */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	605a      	str	r2, [r3, #4]

    /* initial tran. present? */
    QState r;
    if (hist->initAction != Q_ACTION_CAST(0)) {
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <QMsm_enterHistory_+0x98>
        r = (*hist->initAction)(me); /* execute the transition action */
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
 8002428:	61b8      	str	r0, [r7, #24]
 800242a:	e001      	b.n	8002430 <QMsm_enterHistory_+0x9c>
    }
    else {
        r = (QState)Q_RET_NULL;
 800242c:	2307      	movs	r3, #7
 800242e:	61bb      	str	r3, [r7, #24]
    }
    return r;
 8002430:	69bb      	ldr	r3, [r7, #24]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08003088 	.word	0x08003088

08002440 <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    uint_fast8_t const p = (uint_fast8_t)a->prio;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7f1b      	ldrb	r3, [r3, #28]
 800244c:	60fb      	str	r3, [r7, #12]
    /*! @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <QF_add_+0x26>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b20      	cmp	r3, #32
 8002458:	d805      	bhi.n	8002466 <QF_add_+0x26>
 800245a:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <QF_add_+0x50>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <QF_add_+0x2e>
 8002466:	2164      	movs	r1, #100	; 0x64
 8002468:	480a      	ldr	r0, [pc, #40]	; (8002494 <QF_add_+0x54>)
 800246a:	f7fe fd9d 	bl	8000fa8 <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));
    QF_CRIT_STAT_
    QF_CRIT_E_();
 800246e:	233f      	movs	r3, #63	; 0x3f
 8002470:	b672      	cpsid	i
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	b662      	cpsie	i
    QF_active_[p] = a; /* register the active object at this priority */
 8002478:	4905      	ldr	r1, [pc, #20]	; (8002490 <QF_add_+0x50>)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 8002482:	2300      	movs	r3, #0
 8002484:	f383 8811 	msr	BASEPRI, r3
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200000e0 	.word	0x200000e0
 8002494:	080030ac 	.word	0x080030ac

08002498 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	e008      	b.n	80024be <QF_bzero+0x26>
        *ptr = 0U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
        ++ptr;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3301      	adds	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f3      	bne.n	80024ac <QF_bzero+0x14>
    }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <QPSet_insert>:
static inline bool QPSet_hasElement(QPSet * const me, uint_fast8_t const n) {
    return (me->bits & ((QPSetBits)1 << (n - 1U))) != 0U;
}

/*! Insert element @p n_ into the set @p me, n = 1U..32U */
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <QActive_post_+0x1a>
 800250e:	2164      	movs	r1, #100	; 0x64
 8002510:	483d      	ldr	r0, [pc, #244]	; (8002608 <QActive_post_+0x10c>)
 8002512:	f7fe fd49 	bl	8000fa8 <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002516:	233f      	movs	r3, #63	; 0x3f
 8002518:	b672      	cpsid	i
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	7ddb      	ldrb	r3, [r3, #23]
 8002524:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800252c:	4293      	cmp	r3, r2
 800252e:	d10e      	bne.n	800254e <QActive_post_+0x52>
        if (nFree > 0U) {
 8002530:	7dbb      	ldrb	r3, [r7, #22]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <QActive_post_+0x40>
            status = true; /* can post */
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
 800253a:	e012      	b.n	8002562 <QActive_post_+0x66>
        }
        else {
            status = false; /* cannot post */
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 8002540:	2300      	movs	r3, #0
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	216e      	movs	r1, #110	; 0x6e
 8002548:	482f      	ldr	r0, [pc, #188]	; (8002608 <QActive_post_+0x10c>)
 800254a:	f7fe fd2d 	bl	8000fa8 <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	7dba      	ldrb	r2, [r7, #22]
 8002554:	429a      	cmp	r2, r3
 8002556:	d902      	bls.n	800255e <QActive_post_+0x62>
        status = true; /* can post */
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
 800255c:	e001      	b.n	8002562 <QActive_post_+0x66>
    }
    else {
        status = false; /* cannot post, but don't assert */
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	789b      	ldrb	r3, [r3, #2]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <QActive_post_+0x7c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	78db      	ldrb	r3, [r3, #3]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d038      	beq.n	80025f0 <QActive_post_+0xf4>

        --nFree; /* one free entry just used up */
 800257e:	7dbb      	ldrb	r3, [r7, #22]
 8002580:	3b01      	subs	r3, #1
 8002582:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	7dba      	ldrb	r2, [r7, #22]
 8002588:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	7e1b      	ldrb	r3, [r3, #24]
 800258e:	7dba      	ldrb	r2, [r7, #22]
 8002590:	429a      	cmp	r2, r3
 8002592:	d202      	bcs.n	800259a <QActive_post_+0x9e>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	7dba      	ldrb	r2, [r7, #22]
 8002598:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <QActive_post_+0xba>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	7f1b      	ldrb	r3, [r3, #28]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4817      	ldr	r0, [pc, #92]	; (800260c <QActive_post_+0x110>)
 80025b0:	f7ff ff8f 	bl	80024d2 <QPSet_insert>
 80025b4:	e018      	b.n	80025e8 <QActive_post_+0xec>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	7d5b      	ldrb	r3, [r3, #21]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	7d5b      	ldrb	r3, [r3, #21]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <QActive_post_+0xde>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	7d1a      	ldrb	r2, [r3, #20]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	7d5b      	ldrb	r3, [r3, #21]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 80025e8:	2300      	movs	r3, #0
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	e005      	b.n	80025fc <QActive_post_+0x100>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 80025f0:	2300      	movs	r3, #0
 80025f2:	f383 8811 	msr	BASEPRI, r3

        QF_gc(e); /* recycle the event to avoid a leak */
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	f000 f8c8 	bl	800278c <QF_gc>
    }

    return status;
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	080030b4 	.word	0x080030b4
 800260c:	200001cc 	.word	0x200001cc

08002610 <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800261a:	233f      	movs	r3, #63	; 0x3f
 800261c:	b672      	cpsid	i
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7ddb      	ldrb	r3, [r3, #23]
 8002628:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <QActive_postLIFO_+0x2e>
 8002630:	2300      	movs	r3, #0
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	21d2      	movs	r1, #210	; 0xd2
 8002638:	4826      	ldr	r0, [pc, #152]	; (80026d4 <QActive_postLIFO_+0xc4>)
 800263a:	f7fe fcb5 	bl	8000fa8 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	789b      	ldrb	r3, [r3, #2]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	78db      	ldrb	r3, [r3, #3]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	b2da      	uxtb	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3b01      	subs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7e1b      	ldrb	r3, [r3, #24]
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	429a      	cmp	r2, r3
 8002668:	d202      	bcs.n	8002670 <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7f1b      	ldrb	r3, [r3, #28]
 8002686:	4619      	mov	r1, r3
 8002688:	4813      	ldr	r0, [pc, #76]	; (80026d8 <QActive_postLIFO_+0xc8>)
 800268a:	f7ff ff22 	bl	80024d2 <QPSet_insert>
 800268e:	e019      	b.n	80026c4 <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7d9b      	ldrb	r3, [r3, #22]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7d9b      	ldrb	r3, [r3, #22]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7d1b      	ldrb	r3, [r3, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d102      	bne.n	80026b2 <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7d9b      	ldrb	r3, [r3, #22]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 80026c4:	2300      	movs	r3, #0
 80026c6:	f383 8811 	msr	BASEPRI, r3
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	080030b4 	.word	0x080030b4
 80026d8:	200001cc 	.word	0x200001cc

080026dc <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80026e4:	233f      	movs	r3, #63	; 0x3f
 80026e6:	b672      	cpsid	i
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <QActive_get_+0x22>
 80026f6:	2100      	movs	r1, #0
 80026f8:	4823      	ldr	r0, [pc, #140]	; (8002788 <QActive_get_+0xac>)
 80026fa:	f7fe fc55 	bl	8000fa8 <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7ddb      	ldrb	r3, [r3, #23]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3301      	adds	r3, #1
 800270c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7afa      	ldrb	r2, [r7, #11]
 8002712:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7d1b      	ldrb	r3, [r3, #20]
 8002718:	7afa      	ldrb	r2, [r7, #11]
 800271a:	429a      	cmp	r2, r3
 800271c:	d81a      	bhi.n	8002754 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7d9b      	ldrb	r3, [r3, #22]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7d9b      	ldrb	r3, [r3, #22]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7d1a      	ldrb	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7d9b      	ldrb	r3, [r3, #22]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	759a      	strb	r2, [r3, #22]
 8002752:	e010      	b.n	8002776 <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 800275a:	7afa      	ldrb	r2, [r7, #11]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7d1b      	ldrb	r3, [r3, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	429a      	cmp	r2, r3
 8002764:	d007      	beq.n	8002776 <QActive_get_+0x9a>
 8002766:	2300      	movs	r3, #0
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002770:	4805      	ldr	r0, [pc, #20]	; (8002788 <QActive_get_+0xac>)
 8002772:	f7fe fc19 	bl	8000fa8 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8002776:	2300      	movs	r3, #0
 8002778:	f383 8811 	msr	BASEPRI, r3
    return e;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	080030b4 	.word	0x080030b4

0800278c <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	789b      	ldrb	r3, [r3, #2]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d031      	beq.n	8002800 <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 800279c:	233f      	movs	r3, #63	; 0x3f
 800279e:	b672      	cpsid	i
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	78db      	ldrb	r3, [r3, #3]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d90a      	bls.n	80027c6 <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	78db      	ldrb	r3, [r3, #3]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 80027be:	2300      	movs	r3, #0
 80027c0:	f383 8811 	msr	BASEPRI, r3
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 80027c4:	e01c      	b.n	8002800 <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	789b      	ldrb	r3, [r3, #2]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80027ce:	2300      	movs	r3, #0
 80027d0:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <QF_gc+0x7c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d304      	bcc.n	80027e8 <QF_gc+0x5c>
 80027de:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80027e2:	480a      	ldr	r0, [pc, #40]	; (800280c <QF_gc+0x80>)
 80027e4:	f7fe fbe0 	bl	8000fa8 <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4a07      	ldr	r2, [pc, #28]	; (8002810 <QF_gc+0x84>)
 80027f4:	4413      	add	r3, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f80a 	bl	8002814 <QMPool_put>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200001a0 	.word	0x200001a0
 800280c:	080030bc 	.word	0x080030bc
 8002810:	20000164 	.word	0x20000164

08002814 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8a1b      	ldrh	r3, [r3, #16]
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	89db      	ldrh	r3, [r3, #14]
 800282a:	429a      	cmp	r2, r3
 800282c:	d209      	bcs.n	8002842 <QMPool_put+0x2e>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d304      	bcc.n	8002842 <QMPool_put+0x2e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d903      	bls.n	800284a <QMPool_put+0x36>
 8002842:	21c8      	movs	r1, #200	; 0xc8
 8002844:	480e      	ldr	r0, [pc, #56]	; (8002880 <QMPool_put+0x6c>)
 8002846:	f7fe fbaf 	bl	8000fa8 <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800284a:	233f      	movs	r3, #63	; 0x3f
 800284c:	b672      	cpsid	i
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8a1b      	ldrh	r3, [r3, #16]
 8002866:	b29b      	uxth	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002870:	2300      	movs	r3, #0
 8002872:	f383 8811 	msr	BASEPRI, r3
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	080030c4 	.word	0x080030c4

08002884 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet * const me) {
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    return me->bits != 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <QPSet_insert>:
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	601a      	str	r2, [r3, #0]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <QPSet_remove>:

/*! Remove element n_ from the set @p me, n = 1U..32U */
static inline void QPSet_remove(QPSet * const me, uint_fast8_t const n) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    me->bits &= (QPSetBits)(~((QPSetBits)1 << (n - 1U)));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <QPSet_findMax>:

/*! Find the maximum element in the set @p me
* @note if the set @p me is empty, the function returns zero.
*/
static inline uint_fast8_t QPSet_findMax(QPSet * const me) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	f1c3 0320 	rsb	r3, r3, #32
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <QF_psInit>:
*
* @usage
* The following example shows the typical initialization sequence of QF:
* @include qf_main.c
*/
void QF_psInit(QSubscrList * const subscrSto, enum_t const maxSignal) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
    QF_subscrList_   = subscrSto;
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <QF_psInit+0x2c>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6013      	str	r3, [r2, #0]
    QF_maxPubSignal_ = maxSignal;
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <QF_psInit+0x30>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fdad 	bl	8002498 <QF_bzero>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200001a4 	.word	0x200001a4
 800294c:	200001a8 	.word	0x200001a8

08002950 <QF_publish_>:
void QF_publish_(QEvt const * const e)
#else
void QF_publish_(QEvt const * const e,
                 void const * const sender, uint_fast8_t const qs_id)
#endif
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    /*! @pre the published signal must be within the configured range */
    Q_REQUIRE_ID(200, e->sig < (QSignal)QF_maxPubSignal_);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <QF_publish_+0xe4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	429a      	cmp	r2, r3
 8002964:	d303      	bcc.n	800296e <QF_publish_+0x1e>
 8002966:	21c8      	movs	r1, #200	; 0xc8
 8002968:	4833      	ldr	r0, [pc, #204]	; (8002a38 <QF_publish_+0xe8>)
 800296a:	f7fe fb1d 	bl	8000fa8 <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800296e:	233f      	movs	r3, #63	; 0x3f
 8002970:	b672      	cpsid	i
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	b662      	cpsie	i
        QS_SIG_PRE_(e->sig);     /* the signal of the event */
        QS_2U8_PRE_(e->poolId_, e->refCtr_);/* pool Id & ref Count */
    QS_END_NOCRIT_PRE_()

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <QF_publish_+0x3e>
        * is still in progress. At the end of the function, the garbage
        * collector step (QF_gc()) decrements the reference counter and
        * recycles the event if the counter drops to zero. This covers the
        * case when the event was published without any subscribers.
        */
        QF_EVT_REF_CTR_INC_(e);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	78db      	ldrb	r3, [r3, #3]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3301      	adds	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	70da      	strb	r2, [r3, #3]
    }

    /* make a local, modifiable copy of the subscriber list */
    QPSet subscrList = QF_PTR_AT_(QF_subscrList_, e->sig);
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <QF_publish_+0xec>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]
    QF_CRIT_X_();
 800299e:	2300      	movs	r3, #0
 80029a0:	f383 8811 	msr	BASEPRI, r3

    if (QPSet_notEmpty(&subscrList)) { /* any subscribers? */
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff6b 	bl	8002884 <QPSet_notEmpty>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d037      	beq.n	8002a24 <QF_publish_+0xd4>
        /* the highest-prio subscriber */;
        uint_fast8_t p = QPSet_findMax(&subscrList);
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff9f 	bl	80028fc <QPSet_findMax>
 80029be:	60f8      	str	r0, [r7, #12]
        QF_SCHED_STAT_

        QF_SCHED_LOCK_(p); /* lock the scheduler up to prio 'p' */
        do { /* loop over all subscribers */
            /* the prio of the AO must be registered with the framework */
            Q_ASSERT_ID(210, QF_active_[p] != (QActive *)0);
 80029c0:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <QF_publish_+0xf0>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <QF_publish_+0x84>
 80029cc:	21d2      	movs	r1, #210	; 0xd2
 80029ce:	481a      	ldr	r0, [pc, #104]	; (8002a38 <QF_publish_+0xe8>)
 80029d0:	f7fe faea 	bl	8000fa8 <Q_onAssert>

            /* QACTIVE_POST() asserts internally if the queue overflows */
            QACTIVE_POST(QF_active_[p], e, sender);
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <QF_publish_+0xf0>)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4917      	ldr	r1, [pc, #92]	; (8002a40 <QF_publish_+0xf0>)
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80029e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4798      	blx	r3

            QPSet_remove(&subscrList, p); /* remove the handled subscriber */
 80029f0:	f107 0308 	add.w	r3, r7, #8
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff6a 	bl	80028d0 <QPSet_remove>
            if (QPSet_notEmpty(&subscrList)) { /* still more subscribers? */
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff3f 	bl	8002884 <QPSet_notEmpty>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d006      	beq.n	8002a1a <QF_publish_+0xca>
                /* highest-prio subscriber */
                p = QPSet_findMax(&subscrList);
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff73 	bl	80028fc <QPSet_findMax>
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	e001      	b.n	8002a1e <QF_publish_+0xce>
            }
            else {
                p = 0U; /* no more subscribers */
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
            }
        } while (p != 0U);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1cd      	bne.n	80029c0 <QF_publish_+0x70>

    /* The following garbage collection step decrements the reference counter
    * and recycles the event if the counter drops to zero. This covers both
    * cases when the event was published with or without any subscribers.
    */
    QF_gc(e);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff feb1 	bl	800278c <QF_gc>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200001a8 	.word	0x200001a8
 8002a38:	080030cc 	.word	0x080030cc
 8002a3c:	200001a4 	.word	0x200001a4
 8002a40:	200000e0 	.word	0x200000e0

08002a44 <QActive_subscribe>:
* @include qf_subscribe.c
*
* @sa
* QF_publish_(), QActive_unsubscribe(), and QActive_unsubscribeAll()
*/
void QActive_subscribe(QActive const * const me, enum_t const sig) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
    uint_fast8_t const p = (uint_fast8_t)me->prio;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7f1b      	ldrb	r3, [r3, #28]
 8002a52:	60fb      	str	r3, [r7, #12]

    Q_REQUIRE_ID(300, ((enum_t)Q_USER_SIG <= sig)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	dd11      	ble.n	8002a7e <QActive_subscribe+0x3a>
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <QActive_subscribe+0x70>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	da0c      	bge.n	8002a7e <QActive_subscribe+0x3a>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <QActive_subscribe+0x3a>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d806      	bhi.n	8002a7e <QActive_subscribe+0x3a>
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <QActive_subscribe+0x74>)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d004      	beq.n	8002a88 <QActive_subscribe+0x44>
 8002a7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <QActive_subscribe+0x78>)
 8002a84:	f7fe fa90 	bl	8000fa8 <Q_onAssert>
              && (sig < QF_maxPubSignal_)
              && (0U < p) && (p <= QF_MAX_ACTIVE)
              && (QF_active_[p] == me));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002a88:	233f      	movs	r3, #63	; 0x3f
 8002a8a:	b672      	cpsid	i
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	b662      	cpsie	i
        QS_SIG_PRE_(sig);  /* the signal of this event */
        QS_OBJ_PRE_(me);   /* this active object */
    QS_END_NOCRIT_PRE_()

    /* set the priority bit */
    QPSet_insert(&QF_PTR_AT_(QF_subscrList_, sig), p);
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <QActive_subscribe+0x7c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff01 	bl	80028a6 <QPSet_insert>

    QF_CRIT_X_();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f383 8811 	msr	BASEPRI, r3
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200001a8 	.word	0x200001a8
 8002ab8:	200000e0 	.word	0x200000e0
 8002abc:	080030cc 	.word	0x080030cc
 8002ac0:	200001a4 	.word	0x200001a4

08002ac4 <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <QEQueue_init+0x32>
        me->head = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	7adb      	ldrb	r3, [r3, #11]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	731a      	strb	r2, [r3, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <QMActive_ctor>:
*
* @note  Must be called only ONCE before QMSM_INIT().
*
* @sa QHsm_ctor()
*/
void QMActive_ctor(QMActive * const me, QStateHandler initial) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]

    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8002b22:	2120      	movs	r1, #32
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fcb7 	bl	8002498 <QF_bzero>
    * in the code for QHsm_init_() and QHsm_dispatch_() implemetations,
    * which is expensive. To avoid this code size penalty, in case QHsm is
    * not used in a given project, the call to QMsm_ctor() avoids pulling
    * in the code for QHsm.
    */
    QMsm_ctor(QMSM_CAST_(&me->super.super), initial);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fabe 	bl	80020b0 <QMsm_ctor>

    me->super.super.vptr = &vtable.super; /* hook vptr to QMActive vtable */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a03      	ldr	r2, [pc, #12]	; (8002b44 <QMActive_ctor+0x2c>)
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080030d4 	.word	0x080030d4

08002b48 <QF_tickX_>:
*/
void QF_tickX_(uint_fast8_t const tickRate, void const * const sender)
#else
void QF_tickX_(uint_fast8_t const tickRate)
#endif
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	4a47      	ldr	r2, [pc, #284]	; (8002c74 <QF_tickX_+0x12c>)
 8002b56:	4413      	add	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002b5a:	233f      	movs	r3, #63	; 0x3f
 8002b5c:	b672      	cpsid	i
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d123      	bne.n	8002bb8 <QF_tickX_+0x70>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 8002b70:	4a40      	ldr	r2, [pc, #256]	; (8002c74 <QF_tickX_+0x12c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	4413      	add	r3, r2
 8002b78:	3308      	adds	r3, #8
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d071      	beq.n	8002c64 <QF_tickX_+0x11c>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <QF_tickX_+0x4c>
 8002b86:	2300      	movs	r3, #0
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	216e      	movs	r1, #110	; 0x6e
 8002b8e:	483a      	ldr	r0, [pc, #232]	; (8002c78 <QF_tickX_+0x130>)
 8002b90:	f7fe fa0a 	bl	8000fa8 <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8002b94:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <QF_tickX_+0x12c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 8002ba4:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <QF_tickX_+0x12c>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4413      	add	r3, r2
 8002bac:	3308      	adds	r3, #8
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	899b      	ldrh	r3, [r3, #12]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d111      	bne.n	8002be6 <QF_tickX_+0x9e>
            prev->next = t->next;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	78db      	ldrb	r3, [r3, #3]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	e038      	b.n	8002c58 <QF_tickX_+0x110>
        }
        else {
            --t->ctr;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	899b      	ldrh	r3, [r3, #12]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	899b      	ldrh	r3, [r3, #12]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d125      	bne.n	8002c4a <QF_tickX_+0x102>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	89db      	ldrh	r3, [r3, #14]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <QF_tickX_+0xd2>
                    t->ctr = t->interval; /* rearm the time event */
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	89da      	ldrh	r2, [r3, #14]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e00b      	b.n	8002c32 <QF_tickX_+0xea>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	78db      	ldrb	r3, [r3, #3]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8002c32:	2300      	movs	r3, #0
 8002c34:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	6939      	ldr	r1, [r7, #16]
 8002c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	4798      	blx	r3
 8002c48:	e006      	b.n	8002c58 <QF_tickX_+0x110>
            }
            else {
                prev = t;         /* advance to this time event */
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f383 8811 	msr	BASEPRI, r3

                /* prevent merging critical sections, see NOTE1 below  */
                QF_CRIT_EXIT_NOP();
 8002c54:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8002c58:	233f      	movs	r3, #63	; 0x3f
 8002c5a:	b672      	cpsid	i
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	b662      	cpsie	i
    for (;;) {
 8002c62:	e77f      	b.n	8002b64 <QF_tickX_+0x1c>
                break; /* all currently armed time evts. processed */
 8002c64:	bf00      	nop
    }
    QF_CRIT_X_();
 8002c66:	2300      	movs	r3, #0
 8002c68:	f383 8811 	msr	BASEPRI, r3
}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	200001ac 	.word	0x200001ac
 8002c78:	080030e8 	.word	0x080030e8

08002c7c <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	dd02      	ble.n	8002c96 <QTimeEvt_ctorX+0x1a>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d904      	bls.n	8002ca0 <QTimeEvt_ctorX+0x24>
 8002c96:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c9a:	480f      	ldr	r0, [pc, #60]	; (8002cd8 <QTimeEvt_ctorX+0x5c>)
 8002c9c:	f7fe f984 	bl	8000fa8 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	70da      	strb	r2, [r3, #3]
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	080030e8 	.word	0x080030e8

08002cdc <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	803b      	strh	r3, [r7, #0]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	78db      	ldrb	r3, [r3, #3]
 8002cf0:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr const ctr = me->ctr;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	899b      	ldrh	r3, [r3, #12]
 8002cfc:	817b      	strh	r3, [r7, #10]
#endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <QTimeEvt_armX+0x44>
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <QTimeEvt_armX+0x44>
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <QTimeEvt_armX+0x44>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d803      	bhi.n	8002d20 <QTimeEvt_armX+0x44>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d804      	bhi.n	8002d2a <QTimeEvt_armX+0x4e>
 8002d20:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002d24:	4818      	ldr	r0, [pc, #96]	; (8002d88 <QTimeEvt_armX+0xac>)
 8002d26:	f7fe f93f 	bl	8000fa8 <Q_onAssert>
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002d2a:	233f      	movs	r3, #63	; 0x3f
 8002d2c:	b672      	cpsid	i
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	b662      	cpsie	i
    me->ctr = nTicks;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	883a      	ldrh	r2, [r7, #0]
 8002d3e:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	78db      	ldrb	r3, [r3, #3]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db16      	blt.n	8002d7a <QTimeEvt_armX+0x9e>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	78db      	ldrb	r3, [r3, #3]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <QTimeEvt_armX+0xb0>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	3308      	adds	r3, #8
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <QTimeEvt_armX+0xb0>)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	3308      	adds	r3, #8
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f383 8811 	msr	BASEPRI, r3
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	080030e8 	.word	0x080030e8
 8002d8c:	200001ac 	.word	0x200001ac

08002d90 <QTimeEvt_disarm>:
* state machine.
*
* @note
* there is no harm in disarming an already disarmed time event
*/
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
#ifdef Q_SPY
    uint_fast8_t const qs_id = QACTIVE_CAST_(me->act)->prio;
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002d98:	233f      	movs	r3, #63	; 0x3f
 8002d9a:	b672      	cpsid	i
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	b662      	cpsie	i

    /* is the time event actually armed? */
    bool wasArmed;
    if (me->ctr != 0U) {
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	899b      	ldrh	r3, [r3, #12]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <QTimeEvt_disarm+0x38>
        wasArmed = true;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ |= QTE_WAS_DISARMED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	70da      	strb	r2, [r3, #3]
            QS_TEC_PRE_(me->ctr);      /* the number of ticks */
            QS_TEC_PRE_(me->interval); /* the interval */
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

        me->ctr = 0U;  /* schedule removal from the list */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	819a      	strh	r2, [r3, #12]
 8002dc6:	e009      	b.n	8002ddc <QTimeEvt_disarm+0x4c>
    }
    else { /* the time event was already disarmed automatically */
        wasArmed = false;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ &= (uint8_t)(~QTE_WAS_DISARMED & 0xFFU);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	78db      	ldrb	r3, [r3, #3]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	70da      	strb	r2, [r3, #3]
            QS_OBJ_PRE_(me->act);      /* the target AO */
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

    }
    QF_CRIT_X_();
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f383 8811 	msr	BASEPRI, r3

    return wasArmed;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet * const me) {
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    return me->bits != 0U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <QPSet_remove>:
static inline void QPSet_remove(QPSet * const me, uint_fast8_t const n) {
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
    me->bits &= (QPSetBits)(~((QPSetBits)1 << (n - 1U)));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet * const me) {
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	f1c3 0320 	rsb	r3, r3, #32
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <QF_init>:
*
* @note QF_init() clears the internal QF variables, so that the framework
* can start correctly even if the startup code fails to clear the
* uninitialized data (as is required by the C Standard).
*/
void QF_init(void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
    QF_maxPool_      = 0U;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <QF_init+0x38>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    QF_subscrList_   = (QSubscrList *)0;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <QF_init+0x3c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
    QF_maxPubSignal_ = 0;
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <QF_init+0x40>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

    QF_bzero(&QF_timeEvtHead_[0], sizeof(QF_timeEvtHead_));
 8002e76:	2120      	movs	r1, #32
 8002e78:	480a      	ldr	r0, [pc, #40]	; (8002ea4 <QF_init+0x44>)
 8002e7a:	f7ff fb0d 	bl	8002498 <QF_bzero>
    QF_bzero(&QF_active_[0],      sizeof(QF_active_));
 8002e7e:	2184      	movs	r1, #132	; 0x84
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <QF_init+0x48>)
 8002e82:	f7ff fb09 	bl	8002498 <QF_bzero>
    QF_bzero(&QV_readySet_,       sizeof(QV_readySet_));
 8002e86:	2104      	movs	r1, #4
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <QF_init+0x4c>)
 8002e8a:	f7ff fb05 	bl	8002498 <QF_bzero>

#ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8002e8e:	f7ff f8d1 	bl	8002034 <QV_init>
#endif
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200001a0 	.word	0x200001a0
 8002e9c:	200001a4 	.word	0x200001a4
 8002ea0:	200001a8 	.word	0x200001a8
 8002ea4:	200001ac 	.word	0x200001ac
 8002ea8:	200000e0 	.word	0x200000e0
 8002eac:	200001cc 	.word	0x200001cc

08002eb0 <QF_run>:
* QF_run() is typically called from main() after you initialize
* the QF and start at least one active object with QACTIVE_START().
*
* @returns In QV, the QF_run() function does not return.
*/
int_t QF_run(void) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
#ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
#endif

    QF_onStartup(); /* application-specific startup callback */
 8002eb6:	f7fe f847 	bl	8000f48 <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 8002eba:	233f      	movs	r3, #63	; 0x3f
 8002ebc:	b672      	cpsid	i
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QV_readySet_)) {
 8002ec4:	481a      	ldr	r0, [pc, #104]	; (8002f30 <QF_run+0x80>)
 8002ec6:	f7ff ff93 	bl	8002df0 <QPSet_notEmpty>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d027      	beq.n	8002f20 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QV_readySet_);
 8002ed0:	4817      	ldr	r0, [pc, #92]	; (8002f30 <QF_run+0x80>)
 8002ed2:	f7ff ffb4 	bl	8002e3e <QPSet_findMax>
 8002ed6:	60f8      	str	r0, [r7, #12]
            QActive * const a = QF_active_[p];
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <QF_run+0x84>)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
#endif /* Q_SPY */

            QF_INT_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 8002ee8:	68b8      	ldr	r0, [r7, #8]
 8002eea:	f7ff fbf7 	bl	80026dc <QActive_get_>
 8002eee:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4610      	mov	r0, r2
 8002efc:	4798      	blx	r3
            QF_gc(e);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fc44 	bl	800278c <QF_gc>

            QF_INT_DISABLE();
 8002f04:	233f      	movs	r3, #63	; 0x3f
 8002f06:	b672      	cpsid	i
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1d6      	bne.n	8002ec4 <QF_run+0x14>
                QPSet_remove(&QV_readySet_, p);
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	4805      	ldr	r0, [pc, #20]	; (8002f30 <QF_run+0x80>)
 8002f1a:	f7ff ff7a 	bl	8002e12 <QPSet_remove>
 8002f1e:	e7d1      	b.n	8002ec4 <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 8002f20:	f7fe f838 	bl	8000f94 <QV_onIdle>

            QF_INT_DISABLE();
 8002f24:	233f      	movs	r3, #63	; 0x3f
 8002f26:	b672      	cpsid	i
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	b662      	cpsie	i
        if (QPSet_notEmpty(&QV_readySet_)) {
 8002f2e:	e7c9      	b.n	8002ec4 <QF_run+0x14>
 8002f30:	200001cc 	.word	0x200001cc
 8002f34:	200000e0 	.word	0x200000e0

08002f38 <QActive_start_>:
*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
    (void)stkSize; /* unused parameter */

    /*! @pre The priority must be in range and the stack storage must not
    * be provided, because the QV kernel does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, (0U < prio) && (prio <= QF_MAX_ACTIVE)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <QActive_start_+0x20>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d802      	bhi.n	8002f58 <QActive_start_+0x20>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <QActive_start_+0x2a>
 8002f58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002f5c:	4811      	ldr	r0, [pc, #68]	; (8002fa4 <QActive_start_+0x6c>)
 8002f5e:	f7fe f823 	bl	8000fa8 <Q_onAssert>
                      && (stkSto == (void *)0));

    QEQueue_init(&me->eQueue, qSto, qLen); /* initialize the built-in queue */
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	330c      	adds	r3, #12
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fdaa 	bl	8002ac4 <QEQueue_init>
    me->prio = (uint8_t)prio; /* set the current priority of the AO */
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	771a      	strb	r2, [r3, #28]
    QF_add_(me); /* make QF aware of this active object */
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fa61 	bl	8002440 <QF_add_>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <QActive_start_+0x56>
 8002f86:	21e1      	movs	r1, #225	; 0xe1
 8002f88:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <QActive_start_+0x6c>)
 8002f8a:	f7fe f80d 	bl	8000fa8 <Q_onAssert>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	6a39      	ldr	r1, [r7, #32]
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	080030f0 	.word	0x080030f0

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4d0d      	ldr	r5, [pc, #52]	; (8002fe0 <__libc_init_array+0x38>)
 8002fac:	4c0d      	ldr	r4, [pc, #52]	; (8002fe4 <__libc_init_array+0x3c>)
 8002fae:	1b64      	subs	r4, r4, r5
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	42a6      	cmp	r6, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	4d0b      	ldr	r5, [pc, #44]	; (8002fe8 <__libc_init_array+0x40>)
 8002fba:	4c0c      	ldr	r4, [pc, #48]	; (8002fec <__libc_init_array+0x44>)
 8002fbc:	f000 f820 	bl	8003000 <_init>
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	42a6      	cmp	r6, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd0:	4798      	blx	r3
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fda:	4798      	blx	r3
 8002fdc:	3601      	adds	r6, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	080030fc 	.word	0x080030fc
 8002fe4:	080030fc 	.word	0x080030fc
 8002fe8:	080030fc 	.word	0x080030fc
 8002fec:	08003100 	.word	0x08003100

08002ff0 <memset>:
 8002ff0:	4402      	add	r2, r0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <memset+0xa>
 8002ff8:	4770      	bx	lr
 8002ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffe:	e7f9      	b.n	8002ff4 <memset+0x4>

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
