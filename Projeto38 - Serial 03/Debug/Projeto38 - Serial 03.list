
Projeto38 - Serial 03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b0  080035b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b8  080035b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008acc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015ce  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  0002a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000640  00000000  00000000  0002a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200c0  00000000  00000000  0002add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008639  00000000  00000000  0004ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27d6  00000000  00000000  000534c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115c9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a78  00000000  00000000  00115cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003568 	.word	0x08003568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003568 	.word	0x08003568

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa4a 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81c 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8c2 	bl	8000660 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f8a0 	bl	8000620 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f874 	bl	80005cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, buffer, sizeof(buffer));
 80004e4:	2204      	movs	r2, #4
 80004e6:	4907      	ldr	r1, [pc, #28]	; (8000504 <main+0x38>)
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <main+0x3c>)
 80004ea:	f001 feee 	bl	80022ca <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Transmit(&huart1, (const uint8_t *) "SMT32Curso\r\n", strlen("SMT32Curso\r\n"), 100);
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	220c      	movs	r2, #12
 80004f2:	4906      	ldr	r1, [pc, #24]	; (800050c <main+0x40>)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <main+0x3c>)
 80004f6:	f001 fe56 	bl	80021a6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fe:	f000 faa5 	bl	8000a4c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (const uint8_t *) "SMT32Curso\r\n", strlen("SMT32Curso\r\n"), 100);
 8000502:	e7f4      	b.n	80004ee <main+0x22>
 8000504:	200000cc 	.word	0x200000cc
 8000508:	20000028 	.word	0x20000028
 800050c:	08003580 	.word	0x08003580

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f003 f81a 	bl	8003558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xb4>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xb4>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xb4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <SystemClock_Config+0xb8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <SystemClock_Config+0xb8>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <SystemClock_Config+0xb8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f96b 	bl	800185c <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800058c:	f000 f8c0 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fbce 	bl	8001d4c <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005b6:	f000 f8ab 	bl	8000710 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART1_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 8000604:	f001 fd82 	bl	800210c <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f87f 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028
 800061c:	40011000 	.word	0x40011000

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_DMA_Init+0x3c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a0b      	ldr	r2, [pc, #44]	; (800065c <MX_DMA_Init+0x3c>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_DMA_Init+0x3c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	203a      	movs	r0, #58	; 0x3a
 8000648:	f000 faff 	bl	8000c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800064c:	203a      	movs	r0, #58	; 0x3a
 800064e:	f000 fb18 	bl	8000c82 <HAL_NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_GPIO_Init+0x5c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_GPIO_Init+0x5c>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_GPIO_Init+0x5c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <MX_GPIO_Init+0x60>)
 8000696:	f001 f8ad 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_GPIO_Init+0x60>)
 80006b0:	f000 ff04 	bl	80014bc <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000

080006c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <HAL_UART_RxCpltCallback+0x40>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d113      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x38>
	{
		if ((buffer[0] == 'm') && (buffer[1] == 'u') && (buffer[2] == 'd') && (buffer[3] == 'a'))
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_UART_RxCpltCallback+0x44>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b6d      	cmp	r3, #109	; 0x6d
 80006da:	d10f      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x38>
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_UART_RxCpltCallback+0x44>)
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	2b75      	cmp	r3, #117	; 0x75
 80006e2:	d10b      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x38>
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_UART_RxCpltCallback+0x44>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b64      	cmp	r3, #100	; 0x64
 80006ea:	d107      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x38>
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_UART_RxCpltCallback+0x44>)
 80006ee:	78db      	ldrb	r3, [r3, #3]
 80006f0:	2b61      	cmp	r3, #97	; 0x61
 80006f2:	d103      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x38>
		{
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_RxCpltCallback+0x48>)
 80006f8:	f001 f895 	bl	8001826 <HAL_GPIO_TogglePin>
		}
	}
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	200000cc 	.word	0x200000cc
 800070c:	40020000 	.word	0x40020000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <HAL_MspInit+0x4c>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x4c>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a35      	ldr	r2, [pc, #212]	; (8000860 <HAL_UART_MspInit+0xf4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d163      	bne.n	8000856 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b34      	ldr	r3, [pc, #208]	; (8000864 <HAL_UART_MspInit+0xf8>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a33      	ldr	r2, [pc, #204]	; (8000864 <HAL_UART_MspInit+0xf8>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <HAL_UART_MspInit+0xf8>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <HAL_UART_MspInit+0xf8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <HAL_UART_MspInit+0xf8>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_UART_MspInit+0xf8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d8:	2307      	movs	r3, #7
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <HAL_UART_MspInit+0xfc>)
 80007e4:	f000 fe6a 	bl	80014bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_UART_MspInit+0x100>)
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <HAL_UART_MspInit+0x104>)
 80007ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_UART_MspInit+0x100>)
 80007f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_UART_MspInit+0x100>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_UART_MspInit+0x100>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <HAL_UART_MspInit+0x100>)
 8000804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000808:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_UART_MspInit+0x100>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_UART_MspInit+0x100>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_UART_MspInit+0x100>)
 8000818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_UART_MspInit+0x100>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_UART_MspInit+0x100>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <HAL_UART_MspInit+0x100>)
 800082c:	f000 fa44 	bl	8000cb8 <HAL_DMA_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000836:	f7ff ff6b 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_UART_MspInit+0x100>)
 800083e:	639a      	str	r2, [r3, #56]	; 0x38
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_UART_MspInit+0x100>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2025      	movs	r0, #37	; 0x25
 800084c:	f000 f9fd 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000850:	2025      	movs	r0, #37	; 0x25
 8000852:	f000 fa16 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40011000 	.word	0x40011000
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	2000006c 	.word	0x2000006c
 8000870:	40026440 	.word	0x40026440

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f8a4 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <USART1_IRQHandler+0x10>)
 80008ce:	f001 fd2d 	bl	800232c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000028 	.word	0x20000028

080008dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <DMA2_Stream2_IRQHandler+0x10>)
 80008e2:	f000 fb81 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000006c 	.word	0x2000006c

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091a:	490e      	ldr	r1, [pc, #56]	; (8000954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000930:	4c0b      	ldr	r4, [pc, #44]	; (8000960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800093e:	f7ff ffd7 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f002 fde5 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fdc1 	bl	80004cc <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000958:	080035c0 	.word	0x080035c0
  ldr r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000960:	200000d4 	.word	0x200000d4

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <HAL_Init+0x40>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_Init+0x40>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_Init+0x40>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f94f 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff febe 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023c00 	.word	0x40023c00

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f967 	bl	8000c9e <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f92f 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200000d0 	.word	0x200000d0

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200000d0 	.word	0x200000d0

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffde 	bl	8000a34 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff feb6 	bl	8000a34 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e099      	b.n	8000e08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0201 	bic.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cf4:	e00f      	b.n	8000d16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cf6:	f7ff fe9d 	bl	8000a34 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d908      	bls.n	8000d16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2220      	movs	r2, #32
 8000d08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e078      	b.n	8000e08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1e8      	bne.n	8000cf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <HAL_DMA_Init+0x158>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d107      	bne.n	8000d80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f023 0307 	bic.w	r3, r3, #7
 8000d96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d117      	bne.n	8000dda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00e      	beq.n	8000dda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fb01 	bl	80013c4 <DMA_CheckFifoParam>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d008      	beq.n	8000dda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e016      	b.n	8000e08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 fab8 	bl	8001358 <DMA_CalcBaseAndBitshift>
 8000de8:	4603      	mov	r3, r0
 8000dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df0:	223f      	movs	r2, #63	; 0x3f
 8000df2:	409a      	lsls	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	f010803f 	.word	0xf010803f

08000e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_DMA_Start_IT+0x26>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e040      	b.n	8000ebc <HAL_DMA_Start_IT+0xa8>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d12f      	bne.n	8000eae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2202      	movs	r2, #2
 8000e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 fa4a 	bl	80012fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6c:	223f      	movs	r2, #63	; 0x3f
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0216 	orr.w	r2, r2, #22
 8000e82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d007      	beq.n	8000e9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0208 	orr.w	r2, r2, #8
 8000e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e005      	b.n	8000eba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed2:	f7ff fdaf 	bl	8000a34 <HAL_GetTick>
 8000ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d008      	beq.n	8000ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e052      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0216 	bic.w	r2, r2, #22
 8000f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_DMA_Abort+0x62>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f46:	e013      	b.n	8000f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f48:	f7ff fd74 	bl	8000a34 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d90c      	bls.n	8000f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e015      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1e4      	bne.n	8000f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f82:	223f      	movs	r2, #63	; 0x3f
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00c      	b.n	8000fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ff4:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <HAL_DMA_IRQHandler+0x248>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a8e      	ldr	r2, [pc, #568]	; (8001234 <HAL_DMA_IRQHandler+0x24c>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0a9b      	lsrs	r3, r3, #10
 8001000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2208      	movs	r2, #8
 8001014:	409a      	lsls	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01a      	beq.n	8001054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0204 	bic.w	r2, r2, #4
 800103a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	2208      	movs	r2, #8
 8001042:	409a      	lsls	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	2201      	movs	r2, #1
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	f043 0202 	orr.w	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d012      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2204      	movs	r2, #4
 80010ae:	409a      	lsls	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	f043 0204 	orr.w	r2, r3, #4
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	2210      	movs	r2, #16
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d043      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d03c      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	2210      	movs	r2, #16
 80010e4:	409a      	lsls	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d018      	beq.n	800112a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d024      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	4798      	blx	r3
 8001116:	e01f      	b.n	8001158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01b      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
 8001128:	e016      	b.n	8001158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0208 	bic.w	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	2220      	movs	r2, #32
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 808f 	beq.w	8001288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8087 	beq.w	8001288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2220      	movs	r2, #32
 8001180:	409a      	lsls	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b05      	cmp	r3, #5
 8001190:	d136      	bne.n	8001200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0216 	bic.w	r2, r2, #22
 80011a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_DMA_IRQHandler+0x1da>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	223f      	movs	r2, #63	; 0x3f
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d07e      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
        }
        return;
 80011fe:	e079      	b.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01d      	beq.n	800124a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10d      	bne.n	8001238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	2b00      	cmp	r3, #0
 8001222:	d031      	beq.n	8001288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	e02c      	b.n	8001288 <HAL_DMA_IRQHandler+0x2a0>
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	4798      	blx	r3
 8001248:	e01e      	b.n	8001288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10f      	bne.n	8001278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0210 	bic.w	r2, r2, #16
 8001266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	2b00      	cmp	r3, #0
 800128e:	d032      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d022      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2205      	movs	r2, #5
 80012a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d307      	bcc.n	80012d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f2      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x2cc>
 80012ce:	e000      	b.n	80012d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
 80012f2:	e000      	b.n	80012f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80012f4:	bf00      	nop
    }
  }
}
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b40      	cmp	r3, #64	; 0x40
 8001328:	d108      	bne.n	800133c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800133a:	e007      	b.n	800134c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3b10      	subs	r3, #16
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <DMA_CalcBaseAndBitshift+0x64>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d909      	bls.n	800139a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	1d1a      	adds	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	659a      	str	r2, [r3, #88]	; 0x58
 8001398:	e007      	b.n	80013aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013a2:	f023 0303 	bic.w	r3, r3, #3
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	aaaaaaab 	.word	0xaaaaaaab
 80013c0:	080035a8 	.word	0x080035a8

080013c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11f      	bne.n	800141e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d856      	bhi.n	8001492 <DMA_CheckFifoParam+0xce>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <DMA_CheckFifoParam+0x28>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	0800140f 	.word	0x0800140f
 80013f4:	080013fd 	.word	0x080013fd
 80013f8:	08001493 	.word	0x08001493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d046      	beq.n	8001496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800140c:	e043      	b.n	8001496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001416:	d140      	bne.n	800149a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800141c:	e03d      	b.n	800149a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001426:	d121      	bne.n	800146c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d837      	bhi.n	800149e <DMA_CheckFifoParam+0xda>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <DMA_CheckFifoParam+0x70>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001445 	.word	0x08001445
 8001438:	0800144b 	.word	0x0800144b
 800143c:	08001445 	.word	0x08001445
 8001440:	0800145d 	.word	0x0800145d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
      break;
 8001448:	e030      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d025      	beq.n	80014a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800145a:	e022      	b.n	80014a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001464:	d11f      	bne.n	80014a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800146a:	e01c      	b.n	80014a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d903      	bls.n	800147a <DMA_CheckFifoParam+0xb6>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d003      	beq.n	8001480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001478:	e018      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
      break;
 800147e:	e015      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00e      	beq.n	80014aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
      break;
 8001490:	e00b      	b.n	80014aa <DMA_CheckFifoParam+0xe6>
      break;
 8001492:	bf00      	nop
 8001494:	e00a      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      break;
 8001496:	bf00      	nop
 8001498:	e008      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      break;
 800149a:	bf00      	nop
 800149c:	e006      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      break;
 800149e:	bf00      	nop
 80014a0:	e004      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      break;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      break;   
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <DMA_CheckFifoParam+0xe8>
      break;
 80014aa:	bf00      	nop
    }
  } 
  
  return status; 
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e16b      	b.n	80017b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 815a 	bne.w	80017aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d005      	beq.n	800150e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	2b02      	cmp	r3, #2
 800150c:	d130      	bne.n	8001570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 0201 	and.w	r2, r3, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b03      	cmp	r3, #3
 800157a:	d017      	beq.n	80015ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d123      	bne.n	8001600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	08da      	lsrs	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3208      	adds	r2, #8
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	69b9      	ldr	r1, [r7, #24]
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0203 	and.w	r2, r3, #3
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80b4 	beq.w	80017aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b60      	ldr	r3, [pc, #384]	; (80017c8 <HAL_GPIO_Init+0x30c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a5f      	ldr	r2, [pc, #380]	; (80017c8 <HAL_GPIO_Init+0x30c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <HAL_GPIO_Init+0x30c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165e:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <HAL_GPIO_Init+0x310>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_GPIO_Init+0x314>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d02b      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <HAL_GPIO_Init+0x318>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d025      	beq.n	80016de <HAL_GPIO_Init+0x222>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a50      	ldr	r2, [pc, #320]	; (80017d8 <HAL_GPIO_Init+0x31c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01f      	beq.n	80016da <HAL_GPIO_Init+0x21e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_GPIO_Init+0x320>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0x21a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4e      	ldr	r2, [pc, #312]	; (80017e0 <HAL_GPIO_Init+0x324>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0x216>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <HAL_GPIO_Init+0x328>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_Init+0x212>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_GPIO_Init+0x32c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x20e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4b      	ldr	r2, [pc, #300]	; (80017ec <HAL_GPIO_Init+0x330>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_Init+0x20a>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e00e      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016c6:	2308      	movs	r3, #8
 80016c8:	e00c      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016ca:	2306      	movs	r3, #6
 80016cc:	e00a      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016ce:	2305      	movs	r3, #5
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x228>
 80016e2:	2300      	movs	r3, #0
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f4:	4935      	ldr	r1, [pc, #212]	; (80017cc <HAL_GPIO_Init+0x310>)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_GPIO_Init+0x334>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <HAL_GPIO_Init+0x334>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172c:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_GPIO_Init+0x334>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001750:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_GPIO_Init+0x334>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_GPIO_Init+0x334>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_GPIO_Init+0x334>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_GPIO_Init+0x334>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_GPIO_Init+0x334>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	f67f ae90 	bls.w	80014d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40013800 	.word	0x40013800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40021400 	.word	0x40021400
 80017e8:	40021800 	.word	0x40021800
 80017ec:	40021c00 	.word	0x40021c00
 80017f0:	40013c00 	.word	0x40013c00

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43d9      	mvns	r1, r3
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	400b      	ands	r3, r1
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e267      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d075      	beq.n	8001966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187a:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b04      	cmp	r3, #4
 8001884:	d00c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001886:	4b85      	ldr	r3, [pc, #532]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188e:	2b08      	cmp	r3, #8
 8001890:	d112      	bne.n	80018b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b82      	ldr	r3, [pc, #520]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800189e:	d10b      	bne.n	80018b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d05b      	beq.n	8001964 <HAL_RCC_OscConfig+0x108>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d157      	bne.n	8001964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e242      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d106      	bne.n	80018d0 <HAL_RCC_OscConfig+0x74>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e01d      	b.n	800190c <HAL_RCC_OscConfig+0xb0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x98>
 80018da:	4b70      	ldr	r3, [pc, #448]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6f      	ldr	r2, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b6d      	ldr	r3, [pc, #436]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6c      	ldr	r2, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0xb0>
 80018f4:	4b69      	ldr	r3, [pc, #420]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a68      	ldr	r2, [pc, #416]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80018fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d013      	beq.n	800193c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff f88e 	bl	8000a34 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f88a 	bl	8000a34 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e207      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0xc0>
 800193a:	e014      	b.n	8001966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff f87a 	bl	8000a34 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff f876 	bl	8000a34 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1f3      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	4b51      	ldr	r3, [pc, #324]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0xe8>
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d063      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001986:	2b08      	cmp	r3, #8
 8001988:	d11c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d116      	bne.n	80019c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_RCC_OscConfig+0x152>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e1c7      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	e03a      	b.n	8001a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_RCC_OscConfig+0x244>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f82f 	bl	8000a34 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f82b 	bl	8000a34 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e1a8      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4925      	ldr	r1, [pc, #148]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
 8001a0c:	e015      	b.n	8001a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x244>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f80e 	bl	8000a34 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f80a 	bl	8000a34 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e187      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d036      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d016      	beq.n	8001a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_RCC_OscConfig+0x248>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7fe ffee 	bl	8000a34 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7fe ffea 	bl	8000a34 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e167      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x240>)
 8001a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x200>
 8001a7a:	e01b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x248>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a82:	f7fe ffd7 	bl	8000a34 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	e00e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8a:	f7fe ffd3 	bl	8000a34 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d907      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e150      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470000 	.word	0x42470000
 8001aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1ea      	bne.n	8001a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8097 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b81      	ldr	r3, [pc, #516]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a7c      	ldr	r2, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aee:	2301      	movs	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b77      	ldr	r3, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x474>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afe:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <HAL_RCC_OscConfig+0x474>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a73      	ldr	r2, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x474>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7fe ff93 	bl	8000a34 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7fe ff8f 	bl	8000a34 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e10c      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x474>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2ea>
 8001b38:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a63      	ldr	r2, [pc, #396]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	e01c      	b.n	8001b80 <HAL_RCC_OscConfig+0x324>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x30c>
 8001b4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a5e      	ldr	r2, [pc, #376]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5b      	ldr	r2, [pc, #364]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0x324>
 8001b68:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a57      	ldr	r2, [pc, #348]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a54      	ldr	r2, [pc, #336]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 0304 	bic.w	r3, r3, #4
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d015      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7fe ff54 	bl	8000a34 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7fe ff50 	bl	8000a34 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0cb      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ee      	beq.n	8001b90 <HAL_RCC_OscConfig+0x334>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7fe ff3e 	bl	8000a34 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7fe ff3a 	bl	8000a34 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0b5      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ee      	bne.n	8001bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a1 	beq.w	8001d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d05c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d141      	bne.n	8001c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_OscConfig+0x478>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe ff0e 	bl	8000a34 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe ff0a 	bl	8000a34 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e087      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	3b01      	subs	r3, #1
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	491b      	ldr	r1, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x478>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fee3 	bl	8000a34 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe fedf 	bl	8000a34 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e05c      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x416>
 8001c90:	e054      	b.n	8001d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_OscConfig+0x478>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe fecc 	bl	8000a34 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe fec8 	bl	8000a34 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e045      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x470>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x444>
 8001cbe:	e03d      	b.n	8001d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e038      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x4ec>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d028      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d121      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d11a      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0cc      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d90c      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0b8      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da0:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	494d      	ldr	r1, [pc, #308]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d044      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d119      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e06f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e067      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f023 0203 	bic.w	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4934      	ldr	r1, [pc, #208]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e3c:	f7fe fdfa 	bl	8000a34 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e44:	f7fe fdf6 	bl	8000a34 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e04f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 020c 	and.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1eb      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d20c      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e032      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4916      	ldr	r1, [pc, #88]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed2:	f000 f821 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490a      	ldr	r1, [pc, #40]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fd5a 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	08003590 	.word	0x08003590
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f1c:	b090      	sub	sp, #64	; 0x40
 8001f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d00d      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x40>
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	f200 80a1 	bhi.w	8002084 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x34>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4a:	e09b      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f50:	e09b      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f52:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f56:	e098      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f58:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f62:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	2200      	movs	r2, #0
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	627a      	str	r2, [r7, #36]	; 0x24
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f80:	2100      	movs	r1, #0
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f84:	fb03 f201 	mul.w	r2, r3, r1
 8001f88:	2300      	movs	r3, #0
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a43      	ldr	r2, [pc, #268]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f92:	fba0 1202 	umull	r1, r2, r0, r2
 8001f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f98:	460a      	mov	r2, r1
 8001f9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9e:	4413      	add	r3, r2
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	61fa      	str	r2, [r7, #28]
 8001faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fb2:	f7fe f909 	bl	80001c8 <__aeabi_uldivmod>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4613      	mov	r3, r2
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbe:	e053      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	617a      	str	r2, [r7, #20]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fd2:	f04f 0b00 	mov.w	fp, #0
 8001fd6:	4652      	mov	r2, sl
 8001fd8:	465b      	mov	r3, fp
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	0159      	lsls	r1, r3, #5
 8001fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe8:	0150      	lsls	r0, r2, #5
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	ebb2 080a 	subs.w	r8, r2, sl
 8001ff2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002002:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002006:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800200a:	ebb2 0408 	subs.w	r4, r2, r8
 800200e:	eb63 0509 	sbc.w	r5, r3, r9
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	00eb      	lsls	r3, r5, #3
 800201c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002020:	00e2      	lsls	r2, r4, #3
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	eb14 030a 	adds.w	r3, r4, sl
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	eb45 030b 	adc.w	r3, r5, fp
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800203e:	4629      	mov	r1, r5
 8002040:	028b      	lsls	r3, r1, #10
 8002042:	4621      	mov	r1, r4
 8002044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002048:	4621      	mov	r1, r4
 800204a:	028a      	lsls	r2, r1, #10
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	2200      	movs	r2, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	60fa      	str	r2, [r7, #12]
 8002058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800205c:	f7fe f8b4 	bl	80001c8 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4613      	mov	r3, r2
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetSysClockFreq+0x184>)
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800208c:	4618      	mov	r0, r3
 800208e:	3740      	adds	r7, #64	; 0x40
 8002090:	46bd      	mov	sp, r7
 8002092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	017d7840 	.word	0x017d7840

080020a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff0 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	080035a0 	.word	0x080035a0

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e8:	f7ff ffdc 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0b5b      	lsrs	r3, r3, #13
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	080035a0 	.word	0x080035a0

0800210c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e03f      	b.n	800219e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fb1a 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 ff69 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b08a      	sub	sp, #40	; 0x28
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d17c      	bne.n	80022c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_UART_Transmit+0x2c>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e075      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit+0x3e>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e06e      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fc1b 	bl	8000a34 <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002214:	d108      	bne.n	8002228 <HAL_UART_Transmit+0x82>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e003      	b.n	8002230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002238:	e02a      	b.n	8002290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fc21 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e036      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	3302      	adds	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e007      	b.n	8002282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1cf      	bne.n	800223a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fbf1 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e006      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	4613      	mov	r3, r2
 80022d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d11d      	bne.n	8002320 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_UART_Receive_DMA+0x26>
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e016      	b.n	8002322 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Receive_DMA+0x38>
 80022fe:	2302      	movs	r3, #2
 8002300:	e00f      	b.n	8002322 <HAL_UART_Receive_DMA+0x58>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	461a      	mov	r2, r3
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fc26 	bl	8002b68 <UART_Start_Receive_DMA>
 800231c:	4603      	mov	r3, r0
 800231e:	e000      	b.n	8002322 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0ba      	sub	sp, #232	; 0xe8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800236a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
 800237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fd91 	bl	8002eb2 <UART_Receive_IT>
      return;
 8002390:	e256      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80de 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
 800239c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80d1 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
 80023c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
 80023e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
 800240a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
 800242e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800243a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0208 	orr.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 81ed 	beq.w	8002836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fd1c 	bl	8002eb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_UART_IRQHandler+0x17a>
 800249e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04f      	beq.n	8002546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fc24 	bl	8002cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d141      	bne.n	800253e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1d9      	bne.n	80024ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	2b00      	cmp	r3, #0
 800250c:	d013      	beq.n	8002536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <HAL_UART_IRQHandler+0x3dc>)
 8002514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fd42 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002530:	4610      	mov	r0, r2
 8002532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e00e      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f99a 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	e00a      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f996 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e006      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f992 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002552:	e170      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	bf00      	nop
    return;
 8002556:	e16e      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2b01      	cmp	r3, #1
 800255e:	f040 814a 	bne.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8143 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 813c 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	f040 80b4 	bne.w	800270c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8140 	beq.w	800283a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025c2:	429a      	cmp	r2, r3
 80025c4:	f080 8139 	bcs.w	800283a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	f000 8088 	beq.w	80026ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800260a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1d9      	bne.n	80025de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800264e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e1      	bne.n	800262a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800268a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800268c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026be:	f023 0310 	bic.w	r3, r3, #16
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80026d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e3      	bne.n	80026ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fbeb 	bl	8000ec4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8c0 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002704:	e099      	b.n	800283a <HAL_UART_IRQHandler+0x50e>
 8002706:	bf00      	nop
 8002708:	08002dbb 	.word	0x08002dbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808b 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8086 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002756:	647a      	str	r2, [r7, #68]	; 0x44
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800275c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e3      	bne.n	8002732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	623b      	str	r3, [r7, #32]
   return(result);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800278e:	633a      	str	r2, [r7, #48]	; 0x30
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e3      	bne.n	800276a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	60fb      	str	r3, [r7, #12]
   return(result);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0310 	bic.w	r3, r3, #16
 80027c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d4:	61fa      	str	r2, [r7, #28]
 80027d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	69b9      	ldr	r1, [r7, #24]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	617b      	str	r3, [r7, #20]
   return(result);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e3      	bne.n	80027b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f848 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f4:	e023      	b.n	800283e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
 8002802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fae7 	bl	8002de2 <UART_Transmit_IT>
    return;
 8002814:	e014      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fb27 	bl	8002e82 <UART_EndTransmit_IT>
    return;
 8002834:	e004      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    return;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283e:	bf00      	nop
  }
}
 8002840:	37e8      	adds	r7, #232	; 0xe8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop

08002848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b09c      	sub	sp, #112	; 0x70
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d172      	bne.n	800299e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80028b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ba:	2200      	movs	r2, #0
 80028bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028de:	65ba      	str	r2, [r7, #88]	; 0x58
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e5      	bne.n	80028be <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3314      	adds	r3, #20
 80028f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	667b      	str	r3, [r7, #100]	; 0x64
 800290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002912:	647a      	str	r2, [r7, #68]	; 0x44
 8002914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e5      	bne.n	80028f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	623b      	str	r3, [r7, #32]
   return(result);
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002946:	633a      	str	r2, [r7, #48]	; 0x30
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	2b01      	cmp	r3, #1
 8002968:	d119      	bne.n	800299e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	60fb      	str	r3, [r7, #12]
   return(result);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f023 0310 	bic.w	r3, r3, #16
 8002980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800298a:	61fa      	str	r2, [r7, #28]
 800298c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	617b      	str	r3, [r7, #20]
   return(result);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e5      	bne.n	800296a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d106      	bne.n	80029b4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029aa:	4619      	mov	r1, r3
 80029ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029ae:	f7ff ff69 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029b2:	e002      	b.n	80029ba <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80029b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029b6:	f7fd fe85 	bl	80006c4 <HAL_UART_RxCpltCallback>
}
 80029ba:	bf00      	nop
 80029bc:	3770      	adds	r7, #112	; 0x70
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d108      	bne.n	80029ea <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff ff4e 	bl	8002884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029e8:	e002      	b.n	80029f0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff36 	bl	800285c <HAL_UART_RxHalfCpltCallback>
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b21      	cmp	r3, #33	; 0x21
 8002a2a:	d108      	bne.n	8002a3e <UART_DMAError+0x46>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 f933 	bl	8002ca4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b22      	cmp	r3, #34	; 0x22
 8002a5e:	d108      	bne.n	8002a72 <UART_DMAError+0x7a>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f000 f941 	bl	8002cf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a7e:	68b8      	ldr	r0, [r7, #8]
 8002a80:	f7ff fef6 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b090      	sub	sp, #64	; 0x40
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9c:	e050      	b.n	8002b40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d04c      	beq.n	8002b40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <UART_WaitOnFlagUntilTimeout+0x30>
 8002aac:	f7fd ffc2 	bl	8000a34 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d241      	bcs.n	8002b40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002adc:	637a      	str	r2, [r7, #52]	; 0x34
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e5      	bne.n	8002abc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3314      	adds	r3, #20
 8002af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	613b      	str	r3, [r7, #16]
   return(result);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b10:	623a      	str	r2, [r7, #32]
 8002b12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	69f9      	ldr	r1, [r7, #28]
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e5      	bne.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e00f      	b.n	8002b60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d09f      	beq.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3740      	adds	r7, #64	; 0x40
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b098      	sub	sp, #96	; 0x60
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2222      	movs	r2, #34	; 0x22
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <UART_Start_Receive_DMA+0x130>)
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	4a3f      	ldr	r2, [pc, #252]	; (8002c9c <UART_Start_Receive_DMA+0x134>)
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <UART_Start_Receive_DMA+0x138>)
 8002ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	2200      	movs	r2, #0
 8002bae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002bb0:	f107 0308 	add.w	r3, r7, #8
 8002bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	f7fe f924 	bl	8000e14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d019      	beq.n	8002c26 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e5      	bne.n	8002bf2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3314      	adds	r3, #20
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3314      	adds	r3, #20
 8002c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c46:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e5      	bne.n	8002c26 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3314      	adds	r3, #20
 8002c60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	617b      	str	r3, [r7, #20]
   return(result);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c70:	653b      	str	r3, [r7, #80]	; 0x50
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3314      	adds	r3, #20
 8002c78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c7a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	6a39      	ldr	r1, [r7, #32]
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e5      	bne.n	8002c5a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3760      	adds	r7, #96	; 0x60
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	0800289d 	.word	0x0800289d
 8002c9c:	080029c3 	.word	0x080029c3
 8002ca0:	080029f9 	.word	0x080029f9

08002ca4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	61ba      	str	r2, [r7, #24]
 8002cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6979      	ldr	r1, [r7, #20]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ce8:	bf00      	nop
 8002cea:	3724      	adds	r7, #36	; 0x24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b095      	sub	sp, #84	; 0x54
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d1c:	643a      	str	r2, [r7, #64]	; 0x40
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3314      	adds	r3, #20
 8002d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	e853 3f00 	ldrex	r3, [r3]
 8002d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d58:	e841 2300 	strex	r3, r2, [r1]
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e5      	bne.n	8002d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d119      	bne.n	8002da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f023 0310 	bic.w	r3, r3, #16
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8c:	61ba      	str	r2, [r7, #24]
 8002d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6979      	ldr	r1, [r7, #20]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	613b      	str	r3, [r7, #16]
   return(result);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dae:	bf00      	nop
 8002db0:	3754      	adds	r7, #84	; 0x54
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff fd4b 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b21      	cmp	r3, #33	; 0x21
 8002df4:	d13e      	bne.n	8002e74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d114      	bne.n	8002e2a <UART_Transmit_IT+0x48>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d110      	bne.n	8002e2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	1c9a      	adds	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	621a      	str	r2, [r3, #32]
 8002e28:	e008      	b.n	8002e3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	1c59      	adds	r1, r3, #1
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6211      	str	r1, [r2, #32]
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fcd0 	bl	8002848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b08c      	sub	sp, #48	; 0x30
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b22      	cmp	r3, #34	; 0x22
 8002ec4:	f040 80ab 	bne.w	800301e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d117      	bne.n	8002f02 <UART_Receive_IT+0x50>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d113      	bne.n	8002f02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	1c9a      	adds	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
 8002f00:	e026      	b.n	8002f50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d007      	beq.n	8002f26 <UART_Receive_IT+0x74>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <UART_Receive_IT+0x82>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e008      	b.n	8002f46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d15a      	bne.n	800301a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0220 	bic.w	r2, r2, #32
 8002f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d135      	bne.n	8003010 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f023 0310 	bic.w	r3, r3, #16
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	623a      	str	r2, [r7, #32]
 8002fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	69f9      	ldr	r1, [r7, #28]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e5      	bne.n	8002faa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d10a      	bne.n	8003002 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fc3b 	bl	8002884 <HAL_UARTEx_RxEventCallback>
 800300e:	e002      	b.n	8003016 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fd fb57 	bl	80006c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e002      	b.n	8003020 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3730      	adds	r7, #48	; 0x30
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b0c0      	sub	sp, #256	; 0x100
 800302e:	af00      	add	r7, sp, #0
 8003030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	68d9      	ldr	r1, [r3, #12]
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	ea40 0301 	orr.w	r3, r0, r1
 8003050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003080:	f021 010c 	bic.w	r1, r1, #12
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800308e:	430b      	orrs	r3, r1
 8003090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a2:	6999      	ldr	r1, [r3, #24]
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	ea40 0301 	orr.w	r3, r0, r1
 80030ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b8f      	ldr	r3, [pc, #572]	; (80032f4 <UART_SetConfig+0x2cc>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d005      	beq.n	80030c8 <UART_SetConfig+0xa0>
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b8d      	ldr	r3, [pc, #564]	; (80032f8 <UART_SetConfig+0x2d0>)
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d104      	bne.n	80030d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030c8:	f7ff f80c 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 80030cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030d0:	e003      	b.n	80030da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030d2:	f7fe fff3 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 80030d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e4:	f040 810c 	bne.w	8003300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	65b9      	str	r1, [r7, #88]	; 0x58
 8003102:	415b      	adcs	r3, r3
 8003104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800310a:	4621      	mov	r1, r4
 800310c:	eb12 0801 	adds.w	r8, r2, r1
 8003110:	4629      	mov	r1, r5
 8003112:	eb43 0901 	adc.w	r9, r3, r1
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312a:	4690      	mov	r8, r2
 800312c:	4699      	mov	r9, r3
 800312e:	4623      	mov	r3, r4
 8003130:	eb18 0303 	adds.w	r3, r8, r3
 8003134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003138:	462b      	mov	r3, r5
 800313a:	eb49 0303 	adc.w	r3, r9, r3
 800313e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800314e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003156:	460b      	mov	r3, r1
 8003158:	18db      	adds	r3, r3, r3
 800315a:	653b      	str	r3, [r7, #80]	; 0x50
 800315c:	4613      	mov	r3, r2
 800315e:	eb42 0303 	adc.w	r3, r2, r3
 8003162:	657b      	str	r3, [r7, #84]	; 0x54
 8003164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800316c:	f7fd f82c 	bl	80001c8 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4b61      	ldr	r3, [pc, #388]	; (80032fc <UART_SetConfig+0x2d4>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	011c      	lsls	r4, r3, #4
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800318c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	64b9      	str	r1, [r7, #72]	; 0x48
 8003198:	415b      	adcs	r3, r3
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800319c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031a0:	4641      	mov	r1, r8
 80031a2:	eb12 0a01 	adds.w	sl, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb43 0b01 	adc.w	fp, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c0:	4692      	mov	sl, r2
 80031c2:	469b      	mov	fp, r3
 80031c4:	4643      	mov	r3, r8
 80031c6:	eb1a 0303 	adds.w	r3, sl, r3
 80031ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ce:	464b      	mov	r3, r9
 80031d0:	eb4b 0303 	adc.w	r3, fp, r3
 80031d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031ec:	460b      	mov	r3, r1
 80031ee:	18db      	adds	r3, r3, r3
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
 80031f2:	4613      	mov	r3, r2
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
 80031fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003202:	f7fc ffe1 	bl	80001c8 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4611      	mov	r1, r2
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <UART_SetConfig+0x2d4>)
 800320e:	fba3 2301 	umull	r2, r3, r3, r1
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2264      	movs	r2, #100	; 0x64
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	1acb      	subs	r3, r1, r3
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <UART_SetConfig+0x2d4>)
 8003224:	fba3 2302 	umull	r2, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003230:	441c      	add	r4, r3
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800323c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	63b9      	str	r1, [r7, #56]	; 0x38
 800324c:	415b      	adcs	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003254:	4641      	mov	r1, r8
 8003256:	1851      	adds	r1, r2, r1
 8003258:	6339      	str	r1, [r7, #48]	; 0x30
 800325a:	4649      	mov	r1, r9
 800325c:	414b      	adcs	r3, r1
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800326c:	4659      	mov	r1, fp
 800326e:	00cb      	lsls	r3, r1, #3
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003276:	4651      	mov	r1, sl
 8003278:	00ca      	lsls	r2, r1, #3
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	4603      	mov	r3, r0
 8003280:	4642      	mov	r2, r8
 8003282:	189b      	adds	r3, r3, r2
 8003284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003288:	464b      	mov	r3, r9
 800328a:	460a      	mov	r2, r1
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032a8:	460b      	mov	r3, r1
 80032aa:	18db      	adds	r3, r3, r3
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ae:	4613      	mov	r3, r2
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032be:	f7fc ff83 	bl	80001c8 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <UART_SetConfig+0x2d4>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	; 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	3332      	adds	r3, #50	; 0x32
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <UART_SetConfig+0x2d4>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	f003 0207 	and.w	r2, r3, #7
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4422      	add	r2, r4
 80032ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032f0:	e105      	b.n	80034fe <UART_SetConfig+0x4d6>
 80032f2:	bf00      	nop
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003304:	2200      	movs	r2, #0
 8003306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800330a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800330e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003312:	4642      	mov	r2, r8
 8003314:	464b      	mov	r3, r9
 8003316:	1891      	adds	r1, r2, r2
 8003318:	6239      	str	r1, [r7, #32]
 800331a:	415b      	adcs	r3, r3
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003322:	4641      	mov	r1, r8
 8003324:	1854      	adds	r4, r2, r1
 8003326:	4649      	mov	r1, r9
 8003328:	eb43 0501 	adc.w	r5, r3, r1
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003348:	464b      	mov	r3, r9
 800334a:	eb45 0303 	adc.w	r3, r5, r3
 800334e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800335e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800336e:	4629      	mov	r1, r5
 8003370:	008b      	lsls	r3, r1, #2
 8003372:	4621      	mov	r1, r4
 8003374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003378:	4621      	mov	r1, r4
 800337a:	008a      	lsls	r2, r1, #2
 800337c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003380:	f7fc ff22 	bl	80001c8 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4b60      	ldr	r3, [pc, #384]	; (800350c <UART_SetConfig+0x4e4>)
 800338a:	fba3 2302 	umull	r2, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	011c      	lsls	r4, r3, #4
 8003392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800339c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033a4:	4642      	mov	r2, r8
 80033a6:	464b      	mov	r3, r9
 80033a8:	1891      	adds	r1, r2, r2
 80033aa:	61b9      	str	r1, [r7, #24]
 80033ac:	415b      	adcs	r3, r3
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b4:	4641      	mov	r1, r8
 80033b6:	1851      	adds	r1, r2, r1
 80033b8:	6139      	str	r1, [r7, #16]
 80033ba:	4649      	mov	r1, r9
 80033bc:	414b      	adcs	r3, r1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033cc:	4659      	mov	r1, fp
 80033ce:	00cb      	lsls	r3, r1, #3
 80033d0:	4651      	mov	r1, sl
 80033d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d6:	4651      	mov	r1, sl
 80033d8:	00ca      	lsls	r2, r1, #3
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	4642      	mov	r2, r8
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033e8:	464b      	mov	r3, r9
 80033ea:	460a      	mov	r2, r1
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80033fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800340c:	4649      	mov	r1, r9
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4641      	mov	r1, r8
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4641      	mov	r1, r8
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800341e:	f7fc fed3 	bl	80001c8 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <UART_SetConfig+0x4e4>)
 8003428:	fba3 1302 	umull	r1, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	2164      	movs	r1, #100	; 0x64
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	3332      	adds	r3, #50	; 0x32
 800343a:	4a34      	ldr	r2, [pc, #208]	; (800350c <UART_SetConfig+0x4e4>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003446:	441c      	add	r4, r3
 8003448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344c:	2200      	movs	r2, #0
 800344e:	673b      	str	r3, [r7, #112]	; 0x70
 8003450:	677a      	str	r2, [r7, #116]	; 0x74
 8003452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003456:	4642      	mov	r2, r8
 8003458:	464b      	mov	r3, r9
 800345a:	1891      	adds	r1, r2, r2
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	415b      	adcs	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003466:	4641      	mov	r1, r8
 8003468:	1851      	adds	r1, r2, r1
 800346a:	6039      	str	r1, [r7, #0]
 800346c:	4649      	mov	r1, r9
 800346e:	414b      	adcs	r3, r1
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800347e:	4659      	mov	r1, fp
 8003480:	00cb      	lsls	r3, r1, #3
 8003482:	4651      	mov	r1, sl
 8003484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003488:	4651      	mov	r1, sl
 800348a:	00ca      	lsls	r2, r1, #3
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	4603      	mov	r3, r0
 8003492:	4642      	mov	r2, r8
 8003494:	189b      	adds	r3, r3, r2
 8003496:	66bb      	str	r3, [r7, #104]	; 0x68
 8003498:	464b      	mov	r3, r9
 800349a:	460a      	mov	r2, r1
 800349c:	eb42 0303 	adc.w	r3, r2, r3
 80034a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	663b      	str	r3, [r7, #96]	; 0x60
 80034ac:	667a      	str	r2, [r7, #100]	; 0x64
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034ba:	4649      	mov	r1, r9
 80034bc:	008b      	lsls	r3, r1, #2
 80034be:	4641      	mov	r1, r8
 80034c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c4:	4641      	mov	r1, r8
 80034c6:	008a      	lsls	r2, r1, #2
 80034c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034cc:	f7fc fe7c 	bl	80001c8 <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <UART_SetConfig+0x4e4>)
 80034d6:	fba3 1302 	umull	r1, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2164      	movs	r1, #100	; 0x64
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	3332      	adds	r3, #50	; 0x32
 80034e8:	4a08      	ldr	r2, [pc, #32]	; (800350c <UART_SetConfig+0x4e4>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4422      	add	r2, r4
 80034fc:	609a      	str	r2, [r3, #8]
}
 80034fe:	bf00      	nop
 8003500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4d0d      	ldr	r5, [pc, #52]	; (8003548 <__libc_init_array+0x38>)
 8003514:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003516:	1b64      	subs	r4, r4, r5
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	2600      	movs	r6, #0
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	4d0b      	ldr	r5, [pc, #44]	; (8003550 <__libc_init_array+0x40>)
 8003522:	4c0c      	ldr	r4, [pc, #48]	; (8003554 <__libc_init_array+0x44>)
 8003524:	f000 f820 	bl	8003568 <_init>
 8003528:	1b64      	subs	r4, r4, r5
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	2600      	movs	r6, #0
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	080035b8 	.word	0x080035b8
 800354c:	080035b8 	.word	0x080035b8
 8003550:	080035b8 	.word	0x080035b8
 8003554:	080035bc 	.word	0x080035bc

08003558 <memset>:
 8003558:	4402      	add	r2, r0
 800355a:	4603      	mov	r3, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
