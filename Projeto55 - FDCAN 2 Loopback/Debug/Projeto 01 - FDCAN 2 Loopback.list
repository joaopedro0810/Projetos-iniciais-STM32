
Projeto 01 - FDCAN 2 Loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b20  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08004e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  24000074  08004ef8  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001b0  08004ef8  000201b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d1a9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019b2  00000000  00000000  0002d24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000aa0  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009d8  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f50f  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b54c  00000000  00000000  0005f587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00135ff6  00000000  00000000  0006aad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a0ac9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fd8  00000000  00000000  001a0b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08004db8 	.word	0x08004db8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08004db8 	.word	0x08004db8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <HAL_FDCAN_RxFifo1Callback>:
uint8_t               TxData[12];
uint8_t               RxData[12];
int indx = 0;

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	f003 0310 	and.w	r3, r3, #16
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d014      	beq.n	80003ce <HAL_FDCAN_RxFifo1Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <HAL_FDCAN_RxFifo1Callback+0x48>)
 80003a6:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <HAL_FDCAN_RxFifo1Callback+0x4c>)
 80003a8:	2141      	movs	r1, #65	; 0x41
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 ffc0 	bl	8001330 <HAL_FDCAN_GetRxMessage>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <HAL_FDCAN_RxFifo1Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 80003b6:	f000 f97f 	bl	80006b8 <Error_Handler>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f001 f924 	bl	800160c <HAL_FDCAN_ActivateNotification>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <HAL_FDCAN_RxFifo1Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 80003ca:	f000 f975 	bl	80006b8 <Error_Handler>
		}

	}
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	24000188 	.word	0x24000188
 80003dc:	24000154 	.word	0x24000154

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fb04 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f856 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 f94a 	bl	8000684 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80003f0:	f000 f8c8 	bl	8000584 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 80003f4:	4823      	ldr	r0, [pc, #140]	; (8000484 <main+0xa4>)
 80003f6:	f000 ff15 	bl	8001224 <HAL_FDCAN_Start>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <main+0x24>
  {
	  Error_Handler();
 8000400:	f000 f95a 	bl	80006b8 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000404:	2200      	movs	r2, #0
 8000406:	2110      	movs	r1, #16
 8000408:	481e      	ldr	r0, [pc, #120]	; (8000484 <main+0xa4>)
 800040a:	f001 f8ff 	bl	800160c <HAL_FDCAN_ActivateNotification>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <main+0x38>
  {
	  /* Notification Error */
	  Error_Handler();
 8000414:	f000 f950 	bl	80006b8 <Error_Handler>
  }

  TxHeader.Identifier = 0x11;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <main+0xa8>)
 800041a:	2211      	movs	r2, #17
 800041c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <main+0xa8>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <main+0xa8>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <main+0xa8>)
 800042c:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000430:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <main+0xa8>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <main+0xa8>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <main+0xa8>)
 8000440:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000444:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <main+0xa8>)
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <main+0xa8>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf ((char *)TxData, "FDCAN_TX %d", indx++);
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <main+0xac>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	490c      	ldr	r1, [pc, #48]	; (800048c <main+0xac>)
 800045a:	600a      	str	r2, [r1, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	490c      	ldr	r1, [pc, #48]	; (8000490 <main+0xb0>)
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <main+0xb4>)
 8000462:	f004 f849 	bl	80044f8 <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData)!= HAL_OK)
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <main+0xb4>)
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <main+0xa8>)
 800046a:	4806      	ldr	r0, [pc, #24]	; (8000484 <main+0xa4>)
 800046c:	f000 ff05 	bl	800127a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <main+0x9a>
	  {
		  Error_Handler();
 8000476:	f000 f91f 	bl	80006b8 <Error_Handler>
	  }

	   HAL_Delay (1000);
 800047a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047e:	f000 fb49 	bl	8000b14 <HAL_Delay>
	  sprintf ((char *)TxData, "FDCAN_TX %d", indx++);
 8000482:	e7e6      	b.n	8000452 <main+0x72>
 8000484:	24000090 	.word	0x24000090
 8000488:	24000130 	.word	0x24000130
 800048c:	24000194 	.word	0x24000194
 8000490:	08004dd0 	.word	0x08004dd0
 8000494:	2400017c 	.word	0x2400017c

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b09c      	sub	sp, #112	; 0x70
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a2:	224c      	movs	r2, #76	; 0x4c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f004 f81e 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 f818 	bl	80044e8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80004b8:	4b30      	ldr	r3, [pc, #192]	; (800057c <SystemClock_Config+0xe4>)
 80004ba:	f04f 32ff 	mov.w	r2, #4294967295
 80004be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004c2:	2004      	movs	r0, #4
 80004c4:	f001 ffda 	bl	800247c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004c8:	2300      	movs	r3, #0
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <SystemClock_Config+0xe8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a2b      	ldr	r2, [pc, #172]	; (8000580 <SystemClock_Config+0xe8>)
 80004d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b29      	ldr	r3, [pc, #164]	; (8000580 <SystemClock_Config+0xe8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e4:	bf00      	nop
 80004e6:	4b26      	ldr	r3, [pc, #152]	; (8000580 <SystemClock_Config+0xe8>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f2:	d1f8      	bne.n	80004e6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f4:	2302      	movs	r3, #2
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000504:	2300      	movs	r3, #0
 8000506:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800050c:	2309      	movs	r3, #9
 800050e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000514:	2303      	movs	r3, #3
 8000516:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800051c:	230c      	movs	r3, #12
 800051e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000520:	2300      	movs	r3, #0
 8000522:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000524:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000528:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fffe 	bl	8002530 <HAL_RCC_OscConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800053a:	f000 f8bd 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	233f      	movs	r3, #63	; 0x3f
 8000540:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	2303      	movs	r3, #3
 8000544:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2101      	movs	r1, #1
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fbe8 	bl	8002d38 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800056e:	f000 f8a3 	bl	80006b8 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3770      	adds	r7, #112	; 0x70
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	58024400 	.word	0x58024400
 8000580:	58024800 	.word	0x58024800

08000584 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800058a:	4b3c      	ldr	r3, [pc, #240]	; (800067c <MX_FDCAN2_Init+0xf8>)
 800058c:	4a3c      	ldr	r2, [pc, #240]	; (8000680 <MX_FDCAN2_Init+0xfc>)
 800058e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000596:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000598:	4b38      	ldr	r3, [pc, #224]	; (800067c <MX_FDCAN2_Init+0xf8>)
 800059a:	2204      	movs	r2, #4
 800059c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80005aa:	4b34      	ldr	r3, [pc, #208]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 80005b0:	4b32      	ldr	r3, [pc, #200]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005b8:	220d      	movs	r2, #13
 80005ba:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005be:	2256      	movs	r2, #86	; 0x56
 80005c0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005c4:	220d      	movs	r2, #13
 80005c6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 26;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005ca:	221a      	movs	r2, #26
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005dc:	2201      	movs	r2, #1
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_FDCAN2_Init+0xf8>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000600:	2201      	movs	r2, #1
 8000602:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000606:	2205      	movs	r2, #5
 8000608:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_FDCAN2_Init+0xf8>)
 800060c:	2200      	movs	r2, #0
 800060e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000612:	2204      	movs	r2, #4
 8000614:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000618:	2200      	movs	r2, #0
 800061a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_FDCAN2_Init+0xf8>)
 800061e:	2200      	movs	r2, #0
 8000620:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000624:	2201      	movs	r2, #1
 8000626:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_FDCAN2_Init+0xf8>)
 800062a:	2200      	movs	r2, #0
 800062c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000630:	2205      	movs	r2, #5
 8000632:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000634:	4811      	ldr	r0, [pc, #68]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000636:	f000 fba1 	bl	8000d7c <HAL_FDCAN_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_FDCAN2_Init+0xc0>
  {
    Error_Handler();
 8000640:	f000 f83a 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800064c:	2302      	movs	r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000650:	2302      	movs	r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 8000654:	2311      	movs	r3, #17
 8000656:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 8000658:	2311      	movs	r3, #17
 800065a:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]

  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_FDCAN2_Init+0xf8>)
 8000666:	f000 fd67 	bl	8001138 <HAL_FDCAN_ConfigFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_FDCAN2_Init+0xf0>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 8000670:	f000 f822 	bl	80006b8 <Error_Handler>
  }

  /* USER CODE END FDCAN2_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	24000090 	.word	0x24000090
 8000680:	4000a400 	.word	0x4000a400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_GPIO_Init+0x30>)
 800068c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <MX_GPIO_Init+0x30>)
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_GPIO_Init+0x30>)
 800069c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	58024400 	.word	0x58024400

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_MspInit+0x30>)
 80006cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x30>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x30>)
 80006dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	58024400 	.word	0x58024400

080006f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0b8      	sub	sp, #224	; 0xe0
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	22b8      	movs	r2, #184	; 0xb8
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fee5 	bl	80044e8 <memset>
  if(hfdcan->Instance==FDCAN2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <HAL_FDCAN_MspInit+0xd4>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d14c      	bne.n	80007c2 <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800072e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fe2c 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000746:	f7ff ffb7 	bl	80006b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 800074c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000750:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 8000752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000756:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 800075c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 800076a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_FDCAN_MspInit+0xd8>)
 800077a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000786:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800078a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80007a0:	2309      	movs	r3, #9
 80007a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007aa:	4619      	mov	r1, r3
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <HAL_FDCAN_MspInit+0xdc>)
 80007ae:	f001 fcb5 	bl	800211c <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2014      	movs	r0, #20
 80007b8:	f000 faab 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80007bc:	2014      	movs	r0, #20
 80007be:	f000 fac2 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	37e0      	adds	r7, #224	; 0xe0
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	4000a400 	.word	0x4000a400
 80007d0:	58024400 	.word	0x58024400
 80007d4:	58020400 	.word	0x58020400

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f956 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <FDCAN2_IT0_IRQHandler+0x10>)
 8000832:	f000 ff65 	bl	8001700 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000090 	.word	0x24000090

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f003 fe02 	bl	8004478 <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24100000 	.word	0x24100000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	24000198 	.word	0x24000198
 80008a8:	240001b0 	.word	0x240001b0

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008b0:	4b32      	ldr	r3, [pc, #200]	; (800097c <SystemInit+0xd0>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a31      	ldr	r2, [pc, #196]	; (800097c <SystemInit+0xd0>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <SystemInit+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d807      	bhi.n	80008dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <SystemInit+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f023 030f 	bic.w	r3, r3, #15
 80008d4:	4a2a      	ldr	r2, [pc, #168]	; (8000980 <SystemInit+0xd4>)
 80008d6:	f043 0303 	orr.w	r3, r3, #3
 80008da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <SystemInit+0xd8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a28      	ldr	r2, [pc, #160]	; (8000984 <SystemInit+0xd8>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemInit+0xd8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <SystemInit+0xd8>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4924      	ldr	r1, [pc, #144]	; (8000984 <SystemInit+0xd8>)
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <SystemInit+0xdc>)
 80008f6:	4013      	ands	r3, r2
 80008f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <SystemInit+0xd4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 030c 	and.w	r3, r3, #12
 8000902:	2b00      	cmp	r3, #0
 8000904:	d007      	beq.n	8000916 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <SystemInit+0xd4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f023 030f 	bic.w	r3, r3, #15
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <SystemInit+0xd4>)
 8000910:	f043 0303 	orr.w	r3, r3, #3
 8000914:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <SystemInit+0xd8>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <SystemInit+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <SystemInit+0xd8>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <SystemInit+0xd8>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <SystemInit+0xe0>)
 800092c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <SystemInit+0xd8>)
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <SystemInit+0xe4>)
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <SystemInit+0xd8>)
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <SystemInit+0xe8>)
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <SystemInit+0xd8>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <SystemInit+0xd8>)
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <SystemInit+0xe8>)
 8000944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <SystemInit+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <SystemInit+0xd8>)
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <SystemInit+0xe8>)
 8000950:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <SystemInit+0xd8>)
 8000954:	2200      	movs	r2, #0
 8000956:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <SystemInit+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <SystemInit+0xd8>)
 800095e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <SystemInit+0xd8>)
 8000966:	2200      	movs	r2, #0
 8000968:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <SystemInit+0xec>)
 800096c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000970:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	52002000 	.word	0x52002000
 8000984:	58024400 	.word	0x58024400
 8000988:	eaf6ed7f 	.word	0xeaf6ed7f
 800098c:	02020200 	.word	0x02020200
 8000990:	01ff0000 	.word	0x01ff0000
 8000994:	01010280 	.word	0x01010280
 8000998:	52004000 	.word	0x52004000

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f7ff ff84 	bl	80008ac <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f003 fd5b 	bl	8004484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd07 	bl	80003e0 <main>
  bx  lr
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80009d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009dc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80009e0:	08004e84 	.word	0x08004e84
  ldr r2, =_sbss
 80009e4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80009e8:	240001b0 	.word	0x240001b0

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f6:	2003      	movs	r0, #3
 80009f8:	f000 f980 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80009fc:	f002 fb52 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8000a00:	4602      	mov	r2, r0
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_Init+0x68>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	4913      	ldr	r1, [pc, #76]	; (8000a5c <HAL_Init+0x6c>)
 8000a0e:	5ccb      	ldrb	r3, [r1, r3]
 8000a10:	f003 031f 	and.w	r3, r3, #31
 8000a14:	fa22 f303 	lsr.w	r3, r2, r3
 8000a18:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_Init+0x68>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_Init+0x6c>)
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	f003 031f 	and.w	r3, r3, #31
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_Init+0x70>)
 8000a32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <HAL_Init+0x74>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f814 	bl	8000a68 <HAL_InitTick>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e002      	b.n	8000a50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4a:	f7ff fe3b 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	08004e28 	.word	0x08004e28
 8000a60:	24000004 	.word	0x24000004
 8000a64:	24000000 	.word	0x24000000

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_InitTick+0x60>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e021      	b.n	8000ac0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_InitTick+0x64>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_InitTick+0x60>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f965 	bl	8000d62 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f92f 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x68>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400000c 	.word	0x2400000c
 8000acc:	24000000 	.word	0x24000000
 8000ad0:	24000008 	.word	0x24000008

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2400000c 	.word	0x2400000c
 8000af8:	2400019c 	.word	0x2400019c

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2400019c 	.word	0x2400019c

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2400000c 	.word	0x2400000c

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <__NVIC_SetPriorityGrouping+0x40>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x40>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0000 	.word	0x05fa0000

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff40 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff90 	bl	8000c50 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5f 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa4 	bl	8000cb8 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b098      	sub	sp, #96	; 0x60
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d84:	4a84      	ldr	r2, [pc, #528]	; (8000f98 <HAL_FDCAN_Init+0x21c>)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	224c      	movs	r2, #76	; 0x4c
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fb9c 	bl	80044cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e1c6      	b.n	800112c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a7e      	ldr	r2, [pc, #504]	; (8000f9c <HAL_FDCAN_Init+0x220>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d106      	bne.n	8000dd0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fc94 	bl	80006f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0210 	bic.w	r2, r2, #16
 8000dde:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de0:	f7ff fe8c 	bl	8000afc <HAL_GetTick>
 8000de4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000de6:	e014      	b.n	8000e12 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000de8:	f7ff fe88 	bl	8000afc <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b0a      	cmp	r3, #10
 8000df4:	d90d      	bls.n	8000e12 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e18c      	b.n	800112c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d0e3      	beq.n	8000de8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e30:	f7ff fe64 	bl	8000afc <HAL_GetTick>
 8000e34:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e36:	e014      	b.n	8000e62 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e38:	f7ff fe60 	bl	8000afc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b0a      	cmp	r3, #10
 8000e44:	d90d      	bls.n	8000e62 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e4c:	f043 0201 	orr.w	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e164      	b.n	800112c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0e3      	beq.n	8000e38 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0202 	orr.w	r2, r2, #2
 8000e7e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7c1b      	ldrb	r3, [r3, #16]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	e007      	b.n	8000eaa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ea8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7c5b      	ldrb	r3, [r3, #17]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	e007      	b.n	8000ed4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ed2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7c9b      	ldrb	r3, [r3, #18]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	e007      	b.n	8000efe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000efc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f22:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0210 	bic.w	r2, r2, #16
 8000f32:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0204 	orr.w	r2, r2, #4
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	e030      	b.n	8000fb0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d02c      	beq.n	8000fb0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d020      	beq.n	8000fa0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f6c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0210 	orr.w	r2, r2, #16
 8000f7c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d114      	bne.n	8000fb0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0220 	orr.w	r2, r2, #32
 8000f94:	619a      	str	r2, [r3, #24]
 8000f96:	e00b      	b.n	8000fb0 <HAL_FDCAN_Init+0x234>
 8000f98:	08004ddc 	.word	0x08004ddc
 8000f9c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0220 	orr.w	r2, r2, #32
 8000fae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fc0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fc8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fd8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fda:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fe4:	d115      	bne.n	8001012 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000ff4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000ffe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	3b01      	subs	r3, #1
 8001008:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800100e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001010:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00a      	beq.n	8001030 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001038:	4413      	add	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d011      	beq.n	8001062 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001046:	f023 0107 	bic.w	r1, r3, #7
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	3360      	adds	r3, #96	; 0x60
 8001052:	443b      	add	r3, r7
 8001054:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2b00      	cmp	r3, #0
 8001068:	d011      	beq.n	800108e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001072:	f023 0107 	bic.w	r1, r3, #7
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	3360      	adds	r3, #96	; 0x60
 800107e:	443b      	add	r3, r7
 8001080:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	2b00      	cmp	r3, #0
 8001094:	d012      	beq.n	80010bc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800109e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	3360      	adds	r3, #96	; 0x60
 80010aa:	443b      	add	r3, r7
 80010ac:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010b0:	011a      	lsls	r2, r3, #4
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d012      	beq.n	80010ea <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010cc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	3360      	adds	r3, #96	; 0x60
 80010d8:	443b      	add	r3, r7
 80010da:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010de:	021a      	lsls	r2, r3, #8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_FDCAN_Init+0x3b8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d107      	bne.n	8001104 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f022 0203 	bic.w	r2, r2, #3
 8001102:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fdf9 	bl	8001d14 <FDCAN_CalcultateRamBlockAddresses>
 8001122:	4603      	mov	r3, r0
 8001124:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001128:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800112c:	4618      	mov	r0, r3
 800112e:	3760      	adds	r7, #96	; 0x60
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	4000a000 	.word	0x4000a000

08001138 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001148:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d002      	beq.n	8001156 <HAL_FDCAN_ConfigFilter+0x1e>
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d157      	bne.n	8001206 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d12b      	bne.n	80011b6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d10d      	bne.n	8001182 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001172:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001178:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800117a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00e      	b.n	80011a0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800118e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001196:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e025      	b.n	8001202 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	075a      	lsls	r2, r3, #29
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	d103      	bne.n	80011d4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	e006      	b.n	80011e2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	079a      	lsls	r2, r3, #30
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3304      	adds	r3, #4
 80011fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e008      	b.n	8001218 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
  }
}
 8001218:	4618      	mov	r0, r3
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d111      	bne.n	800125c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	e008      	b.n	800126e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001262:	f043 0204 	orr.w	r2, r3, #4
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d141      	bne.n	8001316 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800129a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012a8:	f043 0220 	orr.w	r2, r3, #32
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e038      	b.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e026      	b.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012e2:	0c1b      	lsrs	r3, r3, #16
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fe95 	bl	8002020 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e008      	b.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800131c:	f043 0208 	orr.w	r2, r3, #8
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
  }
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001330:	b480      	push	{r7}
 8001332:	b08b      	sub	sp, #44	; 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001348:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800134a:	7efb      	ldrb	r3, [r7, #27]
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 814b 	bne.w	80015e8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b40      	cmp	r3, #64	; 0x40
 8001356:	d14d      	bne.n	80013f4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001360:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800136e:	f043 0220 	orr.w	r2, r3, #32
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e13e      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001392:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e12c      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013a8:	0e1b      	lsrs	r3, r3, #24
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10b      	bne.n	80013ca <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013ba:	0fdb      	lsrs	r3, r3, #31
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013c4:	d101      	bne.n	80013ca <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	69f9      	ldr	r1, [r7, #28]
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	e069      	b.n	80014c8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b41      	cmp	r3, #65	; 0x41
 80013f8:	d14d      	bne.n	8001496 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001402:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0ed      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0db      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800144a:	0e1b      	lsrs	r3, r3, #24
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10b      	bne.n	800146c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001466:	d101      	bne.n	800146c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001468:	2301      	movs	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	69f9      	ldr	r1, [r7, #28]
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	e018      	b.n	80014c8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	d309      	bcc.n	80014b4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014a6:	f043 0220 	orr.w	r2, r3, #32
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0a2      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e005      	b.n	80014f8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3304      	adds	r3, #4
 8001514:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e1b      	lsrs	r3, r3, #24
 800154a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0fda      	lsrs	r2, r3, #31
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3304      	adds	r3, #4
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	e00a      	b.n	8001582 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	441a      	add	r2, r3
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	440b      	add	r3, r1
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	3301      	adds	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	461a      	mov	r2, r3
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	4293      	cmp	r3, r2
 8001592:	d3eb      	bcc.n	800156c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d105      	bne.n	80015a6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80015a4:	e01e      	b.n	80015e4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b41      	cmp	r3, #65	; 0x41
 80015aa:	d105      	bne.n	80015b8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80015b6:	e015      	b.n	80015e4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	d808      	bhi.n	80015d0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2101      	movs	r1, #1
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80015ce:	e009      	b.n	80015e4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 021f 	and.w	r2, r3, #31
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e008      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ee:	f043 0208 	orr.w	r2, r3, #8
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	372c      	adds	r7, #44	; 0x2c
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	08004e38 	.word	0x08004e38

0800160c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800161e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d002      	beq.n	800162c <HAL_FDCAN_ActivateNotification+0x20>
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d155      	bne.n	80016d8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
 800164a:	e014      	b.n	8001676 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4013      	ands	r3, r2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d108      	bne.n	800166e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0202 	orr.w	r2, r2, #2
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c
 800166c:	e003      	b.n	8001676 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2203      	movs	r2, #3
 8001674:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	430a      	orrs	r2, r1
 8001690:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_FDCAN_ActivateNotification+0xec>)
 80016bc:	4013      	ands	r3, r2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6553      	str	r3, [r2, #84]	; 0x54
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0f9b      	lsrs	r3, r3, #30
 80016ce:	490b      	ldr	r1, [pc, #44]	; (80016fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e008      	b.n	80016ea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016de:	f043 0202 	orr.w	r2, r3, #2
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	3fcfffff 	.word	0x3fcfffff
 80016fc:	4000a800 	.word	0x4000a800

08001700 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b096      	sub	sp, #88	; 0x58
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001708:	4b9a      	ldr	r3, [pc, #616]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	079b      	lsls	r3, r3, #30
 800170e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001710:	4b98      	ldr	r3, [pc, #608]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	079b      	lsls	r3, r3, #30
 8001716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001718:	4013      	ands	r3, r2
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001726:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001730:	4013      	ands	r3, r2
 8001732:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001748:	4013      	ands	r3, r2
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001756:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001760:	4013      	ands	r3, r2
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800176e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001778:	4013      	ands	r3, r2
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001790:	4013      	ands	r3, r2
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80017a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d010      	beq.n	80017d2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80017b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c4:	651a      	str	r2, [r3, #80]	; 0x50
 80017c6:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fa54 	bl	8001c7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80017d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d4:	0a9b      	lsrs	r3, r3, #10
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01d      	beq.n	800181a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80017de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e0:	0a9b      	lsrs	r3, r3, #10
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d017      	beq.n	800181a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fe:	4013      	ands	r3, r2
 8001800:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180a:	651a      	str	r2, [r3, #80]	; 0x50
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fa07 	bl	8001c28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800181a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001826:	4b54      	ldr	r3, [pc, #336]	; (8001978 <HAL_FDCAN_IRQHandler+0x278>)
 8001828:	400b      	ands	r3, r1
 800182a:	6513      	str	r3, [r2, #80]	; 0x50
 800182c:	4a51      	ldr	r2, [pc, #324]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 800182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001830:	0f9b      	lsrs	r3, r3, #30
 8001832:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f9c0 	bl	8001bbc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800183c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00d      	beq.n	800185e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_FDCAN_IRQHandler+0x278>)
 800184a:	400b      	ands	r3, r1
 800184c:	6513      	str	r3, [r2, #80]	; 0x50
 800184e:	4a49      	ldr	r2, [pc, #292]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 8001850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001852:	0f9b      	lsrs	r3, r3, #30
 8001854:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001856:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f9ba 	bl	8001bd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800185e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_FDCAN_IRQHandler+0x278>)
 800186c:	400b      	ands	r3, r1
 800186e:	6513      	str	r3, [r2, #80]	; 0x50
 8001870:	4a40      	ldr	r2, [pc, #256]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 8001872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001874:	0f9b      	lsrs	r3, r3, #30
 8001876:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001878:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f9b4 	bl	8001be8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00d      	beq.n	80018a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_FDCAN_IRQHandler+0x278>)
 800188e:	400b      	ands	r3, r1
 8001890:	6513      	str	r3, [r2, #80]	; 0x50
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 8001894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001896:	0f9b      	lsrs	r3, r3, #30
 8001898:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800189a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7fe fd77 	bl	8000390 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80018a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a4:	0adb      	lsrs	r3, r3, #11
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80018ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b0:	0adb      	lsrs	r3, r3, #11
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c2:	651a      	str	r2, [r3, #80]	; 0x50
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f997 	bl	8001bfe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80018d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01d      	beq.n	8001918 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80018dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018de:	0a5b      	lsrs	r3, r3, #9
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d017      	beq.n	8001918 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018fc:	4013      	ands	r3, r2
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f97d 	bl	8001c12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191a:	0cdb      	lsrs	r3, r3, #19
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d010      	beq.n	8001946 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001926:	0cdb      	lsrs	r3, r3, #19
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00a      	beq.n	8001946 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001938:	651a      	str	r2, [r3, #80]	; 0x50
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f97c 	bl	8001c3e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d016      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d010      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001966:	651a      	str	r2, [r3, #80]	; 0x50
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <HAL_FDCAN_IRQHandler+0x274>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	e004      	b.n	800197c <HAL_FDCAN_IRQHandler+0x27c>
 8001972:	bf00      	nop
 8001974:	4000a800 	.word	0x4000a800
 8001978:	3fcfffff 	.word	0x3fcfffff
 800197c:	f000 f969 	bl	8001c52 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d010      	beq.n	80019ae <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800198c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f95c 	bl	8001c66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80019ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b0:	0c5b      	lsrs	r3, r3, #17
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80019ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019bc:	0c5b      	lsrs	r3, r3, #17
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00f      	beq.n	80019e6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ce:	651a      	str	r2, [r3, #80]	; 0x50
 80019d0:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80019e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_FDCAN_IRQHandler+0x4b4>)
 80019f4:	400b      	ands	r3, r1
 80019f6:	6513      	str	r3, [r2, #80]	; 0x50
 80019f8:	4a6d      	ldr	r2, [pc, #436]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fc:	0f9b      	lsrs	r3, r3, #30
 80019fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f94d 	bl	8001ca2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d011      	beq.n	8001a32 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a16:	400b      	ands	r3, r1
 8001a18:	6513      	str	r3, [r2, #80]	; 0x50
 8001a1a:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1e:	0f9b      	lsrs	r3, r3, #30
 8001a20:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	f040 80ac 	bne.w	8001b96 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a4 	beq.w	8001b96 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a62:	4013      	ands	r3, r2
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a92:	4013      	ands	r3, r2
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001aa0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001ab8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8e6 	bl	8001cb8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8e6 	bl	8001cce <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01a      	beq.n	8001b44 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d014      	beq.n	8001b44 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b30:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	6939      	ldr	r1, [r7, #16]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8d0 	bl	8001ce4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8d1 	bl	8001cfc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	6a3a      	ldr	r2, [r7, #32]
 8001b66:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f874 	bl	8001c8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3758      	adds	r7, #88	; 0x58
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	4000a800 	.word	0x4000a800
 8001bb4:	3fcfffff 	.word	0x3fcfffff
 8001bb8:	4000a000 	.word	0x4000a000

08001bbc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d2a:	4ba7      	ldr	r3, [pc, #668]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	0091      	lsls	r1, r2, #2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d44:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d6a:	4b97      	ldr	r3, [pc, #604]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	0091      	lsls	r1, r2, #2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d84:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4413      	add	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001dac:	4b86      	ldr	r3, [pc, #536]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	0091      	lsls	r1, r2, #2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dc6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	0091      	lsls	r1, r2, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	041a      	lsls	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e3c:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	0091      	lsls	r1, r2, #2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	0091      	lsls	r1, r2, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e82:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	0091      	lsls	r1, r2, #2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ec4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ee0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee8:	061a      	lsls	r2, r3, #24
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001efa:	4413      	add	r3, r2
 8001efc:	009a      	lsls	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d915      	bls.n	8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fc4:	e006      	b.n	8001fd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fc6:	bf00      	nop
 8001fc8:	ffff0003 	.word	0xffff0003
 8001fcc:	10002b00 	.word	0x10002b00
 8001fd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e010      	b.n	8002012 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e005      	b.n	8002004 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3f3      	bcc.n	8001ff8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800203e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002046:	4313      	orrs	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e00a      	b.n	8002062 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002054:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800205a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800205c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002060:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800206c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002072:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002078:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	3304      	adds	r3, #4
 80020a2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3304      	adds	r3, #4
 80020ae:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e020      	b.n	80020f8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3303      	adds	r3, #3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3302      	adds	r3, #2
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	440b      	add	r3, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020ce:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	440b      	add	r3, r1
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020dc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	440a      	add	r2, r1
 80020e4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020e6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	3304      	adds	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3304      	adds	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	4a06      	ldr	r2, [pc, #24]	; (8002118 <FDCAN_CopyMessageToRAM+0xf8>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	461a      	mov	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4293      	cmp	r3, r2
 8002108:	d3d5      	bcc.n	80020b6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3724      	adds	r7, #36	; 0x24
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	08004e38 	.word	0x08004e38

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800212a:	4b89      	ldr	r3, [pc, #548]	; (8002350 <HAL_GPIO_Init+0x234>)
 800212c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212e:	e194      	b.n	800245a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8186 	beq.w	8002454 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d005      	beq.n	8002160 <HAL_GPIO_Init+0x44>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d130      	bne.n	80021c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002196:	2201      	movs	r2, #1
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 0201 	and.w	r2, r3, #1
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d017      	beq.n	80021fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d123      	bne.n	8002252 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0203 	and.w	r2, r3, #3
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80e0 	beq.w	8002454 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HAL_GPIO_Init+0x238>)
 8002296:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800229a:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HAL_GPIO_Init+0x238>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_GPIO_Init+0x238>)
 80022a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a29      	ldr	r2, [pc, #164]	; (8002358 <HAL_GPIO_Init+0x23c>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <HAL_GPIO_Init+0x240>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d052      	beq.n	8002384 <HAL_GPIO_Init+0x268>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_GPIO_Init+0x244>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d031      	beq.n	800234a <HAL_GPIO_Init+0x22e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_GPIO_Init+0x248>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02b      	beq.n	8002346 <HAL_GPIO_Init+0x22a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_GPIO_Init+0x24c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d025      	beq.n	8002342 <HAL_GPIO_Init+0x226>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_GPIO_Init+0x250>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01f      	beq.n	800233e <HAL_GPIO_Init+0x222>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_GPIO_Init+0x254>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x21e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_GPIO_Init+0x258>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x21a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_GPIO_Init+0x25c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x216>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_GPIO_Init+0x260>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x212>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_GPIO_Init+0x264>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x20e>
 8002326:	2309      	movs	r3, #9
 8002328:	e02d      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 800232a:	230a      	movs	r3, #10
 800232c:	e02b      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 800232e:	2308      	movs	r3, #8
 8002330:	e029      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 8002332:	2307      	movs	r3, #7
 8002334:	e027      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 8002336:	2306      	movs	r3, #6
 8002338:	e025      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 800233a:	2305      	movs	r3, #5
 800233c:	e023      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 800233e:	2304      	movs	r3, #4
 8002340:	e021      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 8002342:	2303      	movs	r3, #3
 8002344:	e01f      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 8002346:	2302      	movs	r3, #2
 8002348:	e01d      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 800234a:	2301      	movs	r3, #1
 800234c:	e01b      	b.n	8002386 <HAL_GPIO_Init+0x26a>
 800234e:	bf00      	nop
 8002350:	58000080 	.word	0x58000080
 8002354:	58024400 	.word	0x58024400
 8002358:	58000400 	.word	0x58000400
 800235c:	58020000 	.word	0x58020000
 8002360:	58020400 	.word	0x58020400
 8002364:	58020800 	.word	0x58020800
 8002368:	58020c00 	.word	0x58020c00
 800236c:	58021000 	.word	0x58021000
 8002370:	58021400 	.word	0x58021400
 8002374:	58021800 	.word	0x58021800
 8002378:	58021c00 	.word	0x58021c00
 800237c:	58022000 	.word	0x58022000
 8002380:	58022400 	.word	0x58022400
 8002384:	2300      	movs	r3, #0
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	f002 0203 	and.w	r2, r2, #3
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	4093      	lsls	r3, r2
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002396:	4938      	ldr	r1, [pc, #224]	; (8002478 <HAL_GPIO_Init+0x35c>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3301      	adds	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	f47f ae63 	bne.w	8002130 <HAL_GPIO_Init+0x14>
  }
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	3724      	adds	r7, #36	; 0x24
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	58000400 	.word	0x58000400

0800247c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_PWREx_ConfigSupply+0xb0>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	2b06      	cmp	r3, #6
 800248e:	d00a      	beq.n	80024a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002490:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_PWREx_ConfigSupply+0xb0>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e040      	b.n	8002524 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e03e      	b.n	8002524 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_PWREx_ConfigSupply+0xb0>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024ae:	491f      	ldr	r1, [pc, #124]	; (800252c <HAL_PWREx_ConfigSupply+0xb0>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024b6:	f7fe fb21 	bl	8000afc <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024bc:	e009      	b.n	80024d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024be:	f7fe fb1d 	bl	8000afc <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024cc:	d901      	bls.n	80024d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e028      	b.n	8002524 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_PWREx_ConfigSupply+0xb0>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	d1ee      	bne.n	80024be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b1e      	cmp	r3, #30
 80024e4:	d008      	beq.n	80024f8 <HAL_PWREx_ConfigSupply+0x7c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b2e      	cmp	r3, #46	; 0x2e
 80024ea:	d005      	beq.n	80024f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b1d      	cmp	r3, #29
 80024f0:	d002      	beq.n	80024f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b2d      	cmp	r3, #45	; 0x2d
 80024f6:	d114      	bne.n	8002522 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024f8:	f7fe fb00 	bl	8000afc <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024fe:	e009      	b.n	8002514 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002500:	f7fe fafc 	bl	8000afc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800250e:	d901      	bls.n	8002514 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e007      	b.n	8002524 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_PWREx_ConfigSupply+0xb0>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d1ee      	bne.n	8002500 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	58024800 	.word	0x58024800

08002530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e3f4      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80b3 	beq.w	80026b6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002550:	4b95      	ldr	r3, [pc, #596]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800255a:	4b93      	ldr	r3, [pc, #588]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2b10      	cmp	r3, #16
 8002564:	d007      	beq.n	8002576 <HAL_RCC_OscConfig+0x46>
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b18      	cmp	r3, #24
 800256a:	d112      	bne.n	8002592 <HAL_RCC_OscConfig+0x62>
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d10d      	bne.n	8002592 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8098 	beq.w	80026b4 <HAL_RCC_OscConfig+0x184>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 8093 	bne.w	80026b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e3cc      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x7a>
 800259c:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a81      	ldr	r2, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	e058      	b.n	800265c <HAL_RCC_OscConfig+0x12c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d112      	bne.n	80025d8 <HAL_RCC_OscConfig+0xa8>
 80025b2:	4b7d      	ldr	r3, [pc, #500]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7c      	ldr	r2, [pc, #496]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b7a      	ldr	r3, [pc, #488]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a79      	ldr	r2, [pc, #484]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b77      	ldr	r3, [pc, #476]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a76      	ldr	r2, [pc, #472]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e041      	b.n	800265c <HAL_RCC_OscConfig+0x12c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d112      	bne.n	8002608 <HAL_RCC_OscConfig+0xd8>
 80025e2:	4b71      	ldr	r3, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6d      	ldr	r2, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6a      	ldr	r2, [pc, #424]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e029      	b.n	800265c <HAL_RCC_OscConfig+0x12c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x108>
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a64      	ldr	r2, [pc, #400]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a61      	ldr	r2, [pc, #388]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5e      	ldr	r2, [pc, #376]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e011      	b.n	800265c <HAL_RCC_OscConfig+0x12c>
 8002638:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5a      	ldr	r2, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a57      	ldr	r2, [pc, #348]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a54      	ldr	r2, [pc, #336]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002656:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fa4a 	bl	8000afc <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fa46 	bl	8000afc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e356      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x13c>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fa36 	bl	8000afc <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fa32 	bl	8000afc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e342      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a6:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x164>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 808d 	beq.w	80027de <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_RCC_OscConfig+0x1ba>
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b18      	cmp	r3, #24
 80026de:	d137      	bne.n	8002750 <HAL_RCC_OscConfig+0x220>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d132      	bne.n	8002750 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x1d2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e314      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0219 	bic.w	r2, r3, #25
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4926      	ldr	r1, [pc, #152]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002714:	f7fe f9f2 	bl	8000afc <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7fe f9ee 	bl	8000afc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e2fe      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	4917      	ldr	r1, [pc, #92]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274e:	e046      	b.n	80027de <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d029      	beq.n	80027ac <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 0219 	bic.w	r2, r3, #25
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4910      	ldr	r1, [pc, #64]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe f9c7 	bl	8000afc <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe f9c3 	bl	8000afc <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e2d3      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4902      	ldr	r1, [pc, #8]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e01b      	b.n	80027de <HAL_RCC_OscConfig+0x2ae>
 80027a6:	bf00      	nop
 80027a8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ac:	4b97      	ldr	r3, [pc, #604]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a96      	ldr	r2, [pc, #600]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe f9a0 	bl	8000afc <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c0:	f7fe f99c 	bl	8000afc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e2ac      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d2:	4b8e      	ldr	r3, [pc, #568]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06a      	beq.n	80028c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f4:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d007      	beq.n	8002810 <HAL_RCC_OscConfig+0x2e0>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b18      	cmp	r3, #24
 8002804:	d11b      	bne.n	800283e <HAL_RCC_OscConfig+0x30e>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d116      	bne.n	800283e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002810:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x2f8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e281      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002828:	4b78      	ldr	r3, [pc, #480]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	4975      	ldr	r1, [pc, #468]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002838:	4313      	orrs	r3, r2
 800283a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800283c:	e040      	b.n	80028c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002846:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a70      	ldr	r2, [pc, #448]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe f953 	bl	8000afc <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800285a:	f7fe f94f 	bl	8000afc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e25f      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800286c:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	4961      	ldr	r1, [pc, #388]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe f92f 	bl	8000afc <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028a2:	f7fe f92b 	bl	8000afc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e23b      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d036      	beq.n	800293a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe f90c 	bl	8000afc <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe f908 	bl	8000afc <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e218      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028fa:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3b8>
 8002906:	e018      	b.n	800293a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f8f2 	bl	8000afc <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe f8ee 	bl	8000afc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1fe      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d036      	beq.n	80029b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d019      	beq.n	8002982 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002958:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800295a:	f7fe f8cf 	bl	8000afc <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002962:	f7fe f8cb 	bl	8000afc <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1db      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x432>
 8002980:	e018      	b.n	80029b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800298c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800298e:	f7fe f8b5 	bl	8000afc <HAL_GetTick>
 8002992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002996:	f7fe f8b1 	bl	8000afc <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1c1      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80af 	beq.w	8002b20 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_OscConfig+0x4e0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_RCC_OscConfig+0x4e0>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ce:	f7fe f895 	bl	8000afc <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe f891 	bl	8000afc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1a1      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x4e0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4e4>
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a02      	ldr	r2, [pc, #8]	; (8002a0c <HAL_RCC_OscConfig+0x4dc>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	e05b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x592>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	58024800 	.word	0x58024800
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d112      	bne.n	8002a42 <HAL_RCC_OscConfig+0x512>
 8002a1c:	4b9d      	ldr	r3, [pc, #628]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a9c      	ldr	r2, [pc, #624]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	4a99      	ldr	r2, [pc, #612]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70
 8002a34:	4b97      	ldr	r3, [pc, #604]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	4a96      	ldr	r2, [pc, #600]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a40:	e03f      	b.n	8002ac2 <HAL_RCC_OscConfig+0x592>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x540>
 8002a4a:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a91      	ldr	r2, [pc, #580]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a8e      	ldr	r2, [pc, #568]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b8c      	ldr	r3, [pc, #560]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a8b      	ldr	r2, [pc, #556]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e028      	b.n	8002ac2 <HAL_RCC_OscConfig+0x592>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b85      	cmp	r3, #133	; 0x85
 8002a76:	d112      	bne.n	8002a9e <HAL_RCC_OscConfig+0x56e>
 8002a78:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a85      	ldr	r2, [pc, #532]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	4b83      	ldr	r3, [pc, #524]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a82      	ldr	r2, [pc, #520]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a7f      	ldr	r2, [pc, #508]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e011      	b.n	8002ac2 <HAL_RCC_OscConfig+0x592>
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a7c      	ldr	r2, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a79      	ldr	r2, [pc, #484]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b77      	ldr	r3, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a76      	ldr	r2, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d015      	beq.n	8002af6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7fe f817 	bl	8000afc <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe f813 	bl	8000afc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e121      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae8:	4b6a      	ldr	r3, [pc, #424]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ee      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x5a2>
 8002af4:	e014      	b.n	8002b20 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe f801 	bl	8000afc <HAL_GetTick>
 8002afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fd fffd 	bl	8000afc <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e10b      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b14:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ee      	bne.n	8002afe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8100 	beq.w	8002d2a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b2a:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b32:	2b18      	cmp	r3, #24
 8002b34:	f000 80bb 	beq.w	8002cae <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	f040 8095 	bne.w	8002c6c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a53      	ldr	r2, [pc, #332]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fd ffd5 	bl	8000afc <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fd ffd1 	bl	8000afc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0e1      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b68:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b74:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_OscConfig+0x768>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	430a      	orrs	r2, r1
 8002b88:	4942      	ldr	r1, [pc, #264]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	628b      	str	r3, [r1, #40]	; 0x28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	025b      	lsls	r3, r3, #9
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bbe:	4935      	ldr	r1, [pc, #212]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bc4:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bdc:	00d2      	lsls	r2, r2, #3
 8002bde:	492d      	ldr	r1, [pc, #180]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f023 020c 	bic.w	r2, r3, #12
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	4928      	ldr	r1, [pc, #160]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	f023 0202 	bic.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4924      	ldr	r1, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c14:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fd ff5a 	bl	8000afc <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fd ff56 	bl	8000afc <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e066      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x71c>
 8002c6a:	e05e      	b.n	8002d2a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_OscConfig+0x764>)
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fd ff40 	bl	8000afc <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fd ff3c 	bl	8000afc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d908      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e04c      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
 8002c92:	bf00      	nop
 8002c94:	58024400 	.word	0x58024400
 8002c98:	fffffc0c 	.word	0xfffffc0c
 8002c9c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_RCC_OscConfig+0x804>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e9      	bne.n	8002c80 <HAL_RCC_OscConfig+0x750>
 8002cac:	e03d      	b.n	8002d2a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_RCC_OscConfig+0x804>)
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_RCC_OscConfig+0x804>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d031      	beq.n	8002d26 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d12a      	bne.n	8002d26 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d122      	bne.n	8002d26 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d11a      	bne.n	8002d26 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	0a5b      	lsrs	r3, r3, #9
 8002cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d111      	bne.n	8002d26 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d108      	bne.n	8002d26 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	0e1b      	lsrs	r3, r3, #24
 8002d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3730      	adds	r7, #48	; 0x30
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58024400 	.word	0x58024400

08002d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e19c      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b87      	ldr	r3, [pc, #540]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	4985      	ldr	r1, [pc, #532]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e184      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	4b7b      	ldr	r3, [pc, #492]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d908      	bls.n	8002daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d98:	4b78      	ldr	r3, [pc, #480]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4975      	ldr	r1, [pc, #468]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d908      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	496a      	ldr	r1, [pc, #424]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	495e      	ldr	r1, [pc, #376]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e22:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4953      	ldr	r1, [pc, #332]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d908      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f023 020f 	bic.w	r2, r3, #15
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4947      	ldr	r1, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d055      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4940      	ldr	r1, [pc, #256]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e88:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d121      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0f6      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0ea      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0de      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d6      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ed8:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4925      	ldr	r1, [pc, #148]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fd fe07 	bl	8000afc <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fd fe03 	bl	8000afc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0be      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d1eb      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d208      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d214      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	4906      	ldr	r1, [pc, #24]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e086      	b.n	8003086 <HAL_RCC_ClockConfig+0x34e>
 8002f78:	52002000 	.word	0x52002000
 8002f7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d208      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4939      	ldr	r1, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	492e      	ldr	r1, [pc, #184]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d208      	bcs.n	800300a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4922      	ldr	r1, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003006:	4313      	orrs	r3, r2
 8003008:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003022:	429a      	cmp	r2, r3
 8003024:	d208      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4917      	ldr	r1, [pc, #92]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003034:	4313      	orrs	r3, r2
 8003036:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003038:	f000 f834 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4912      	ldr	r1, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x35c>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x358>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RCC_ClockConfig+0x35c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x360>)
 800306e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x364>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x368>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fcf4 	bl	8000a68 <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58024400 	.word	0x58024400
 8003094:	08004e28 	.word	0x08004e28
 8003098:	24000004 	.word	0x24000004
 800309c:	24000000 	.word	0x24000000
 80030a0:	24000008 	.word	0x24000008

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030aa:	4bb3      	ldr	r3, [pc, #716]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030b2:	2b18      	cmp	r3, #24
 80030b4:	f200 8155 	bhi.w	8003362 <HAL_RCC_GetSysClockFreq+0x2be>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	08003125 	.word	0x08003125
 80030c4:	08003363 	.word	0x08003363
 80030c8:	08003363 	.word	0x08003363
 80030cc:	08003363 	.word	0x08003363
 80030d0:	08003363 	.word	0x08003363
 80030d4:	08003363 	.word	0x08003363
 80030d8:	08003363 	.word	0x08003363
 80030dc:	08003363 	.word	0x08003363
 80030e0:	0800314b 	.word	0x0800314b
 80030e4:	08003363 	.word	0x08003363
 80030e8:	08003363 	.word	0x08003363
 80030ec:	08003363 	.word	0x08003363
 80030f0:	08003363 	.word	0x08003363
 80030f4:	08003363 	.word	0x08003363
 80030f8:	08003363 	.word	0x08003363
 80030fc:	08003363 	.word	0x08003363
 8003100:	08003151 	.word	0x08003151
 8003104:	08003363 	.word	0x08003363
 8003108:	08003363 	.word	0x08003363
 800310c:	08003363 	.word	0x08003363
 8003110:	08003363 	.word	0x08003363
 8003114:	08003363 	.word	0x08003363
 8003118:	08003363 	.word	0x08003363
 800311c:	08003363 	.word	0x08003363
 8003120:	08003157 	.word	0x08003157
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003124:	4b94      	ldr	r3, [pc, #592]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003130:	4b91      	ldr	r3, [pc, #580]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003142:	e111      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003144:	4b8d      	ldr	r3, [pc, #564]	; (800337c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003146:	61bb      	str	r3, [r7, #24]
    break;
 8003148:	e10e      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800314a:	4b8d      	ldr	r3, [pc, #564]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800314c:	61bb      	str	r3, [r7, #24]
    break;
 800314e:	e10b      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003150:	4b8c      	ldr	r3, [pc, #560]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003152:	61bb      	str	r3, [r7, #24]
    break;
 8003154:	e108      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003160:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800316c:	4b82      	ldr	r3, [pc, #520]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003176:	4b80      	ldr	r3, [pc, #512]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	08db      	lsrs	r3, r3, #3
 800317c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80e1 	beq.w	800335c <HAL_RCC_GetSysClockFreq+0x2b8>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b02      	cmp	r3, #2
 800319e:	f000 8083 	beq.w	80032a8 <HAL_RCC_GetSysClockFreq+0x204>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f200 80a1 	bhi.w	80032ec <HAL_RCC_GetSysClockFreq+0x248>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x114>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d056      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031b6:	e099      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b8:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02d      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031c4:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	08db      	lsrs	r3, r3, #3
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	4a6b      	ldr	r2, [pc, #428]	; (800337c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ee:	4b62      	ldr	r3, [pc, #392]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003202:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800321e:	e087      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800338c <HAL_RCC_GetSysClockFreq+0x2e8>
 800322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003232:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003242:	ed97 6a02 	vldr	s12, [r7, #8]
 8003246:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800324a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003262:	e065      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003276:	4b40      	ldr	r3, [pc, #256]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003286:	ed97 6a02 	vldr	s12, [r7, #8]
 800328a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800328e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800329a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032a6:	e043      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003394 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ea:	e021      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003312:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800332e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	0a5b      	lsrs	r3, r3, #9
 8003336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333a:	3301      	adds	r3, #1
 800333c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003348:	edd7 6a07 	vldr	s13, [r7, #28]
 800334c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003354:	ee17 3a90 	vmov	r3, s15
 8003358:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
    break;
 8003360:	e002      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003364:	61bb      	str	r3, [r7, #24]
    break;
 8003366:	bf00      	nop
  }

  return sysclockfreq;
 8003368:	69bb      	ldr	r3, [r7, #24]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	58024400 	.word	0x58024400
 800337c:	03d09000 	.word	0x03d09000
 8003380:	003d0900 	.word	0x003d0900
 8003384:	007a1200 	.word	0x007a1200
 8003388:	46000000 	.word	0x46000000
 800338c:	4c742400 	.word	0x4c742400
 8003390:	4a742400 	.word	0x4a742400
 8003394:	4af42400 	.word	0x4af42400

08003398 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033bc:	d02a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033c2:	d824      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c8:	d018      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ce:	d81e      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d8:	d007      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033da:	e018      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4b9f      	ldr	r3, [pc, #636]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	4a9e      	ldr	r2, [pc, #632]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033e8:	e015      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fedd 	bl	80041b0 <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033fa:	e00c      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3324      	adds	r3, #36	; 0x24
 8003400:	2102      	movs	r1, #2
 8003402:	4618      	mov	r0, r3
 8003404:	f000 ff86 	bl	8004314 <RCCEx_PLL3_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
      break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800341c:	4b8f      	ldr	r3, [pc, #572]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003428:	498c      	ldr	r1, [pc, #560]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	650b      	str	r3, [r1, #80]	; 0x50
 800342e:	e001      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03d      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	2b04      	cmp	r3, #4
 8003446:	d826      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003465 	.word	0x08003465
 8003454:	08003473 	.word	0x08003473
 8003458:	08003485 	.word	0x08003485
 800345c:	0800349d 	.word	0x0800349d
 8003460:	0800349d 	.word	0x0800349d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b7d      	ldr	r3, [pc, #500]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4a7c      	ldr	r2, [pc, #496]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003470:	e015      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fe99 	bl	80041b0 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003482:	e00c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3324      	adds	r3, #36	; 0x24
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f000 ff42 	bl	8004314 <RCCEx_PLL3_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
      break;
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800349c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	f023 0207 	bic.w	r2, r3, #7
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	496a      	ldr	r1, [pc, #424]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	650b      	str	r3, [r1, #80]	; 0x50
 80034b6:	e001      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80034d0:	d031      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80034d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80034d6:	d82b      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d02d      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80034de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e2:	d825      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034e4:	2bc0      	cmp	r3, #192	; 0xc0
 80034e6:	d02a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034e8:	2bc0      	cmp	r3, #192	; 0xc0
 80034ea:	d821      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d016      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d81d      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d007      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x174>
 80034fc:	e018      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fe:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800350a:	e019      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fe4c 	bl	80041b0 <RCCEx_PLL2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800351c:	e010      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3324      	adds	r3, #36	; 0x24
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fef5 	bl	8004314 <RCCEx_PLL3_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800352e:	e007      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
      break;
 8003534:	e004      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800353e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003546:	4b45      	ldr	r3, [pc, #276]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	4942      	ldr	r1, [pc, #264]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	650b      	str	r3, [r1, #80]	; 0x50
 8003558:	e001      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04f      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003572:	d036      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003574:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003578:	d830      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800357a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357e:	d032      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d82a      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003586:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800358a:	d02e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x252>
 800358c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003590:	d824      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d018      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359c:	d81e      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x212>
 80035a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a6:	d007      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80035a8:	e018      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	4a2b      	ldr	r2, [pc, #172]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80035b6:	e019      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fdf6 	bl	80041b0 <RCCEx_PLL2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80035c8:	e010      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3324      	adds	r3, #36	; 0x24
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fe9f 	bl	8004314 <RCCEx_PLL3_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80035da:	e007      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
      break;
 80035e0:	e004      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80035f2:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	650b      	str	r3, [r1, #80]	; 0x50
 8003604:	e001      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d034      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361a:	2b30      	cmp	r3, #48	; 0x30
 800361c:	d01c      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800361e:	2b30      	cmp	r3, #48	; 0x30
 8003620:	d817      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003622:	2b20      	cmp	r3, #32
 8003624:	d00c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003626:	2b20      	cmp	r3, #32
 8003628:	d813      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800362e:	2b10      	cmp	r3, #16
 8003630:	d10f      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800363e:	e010      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fdb2 	bl	80041b0 <RCCEx_PLL2_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003650:	e007      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
      break;
 8003656:	e004      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003658:	bf00      	nop
 800365a:	e002      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800365c:	58024400 	.word	0x58024400
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003668:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003674:	4998      	ldr	r1, [pc, #608]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003676:	4313      	orrs	r3, r2
 8003678:	64cb      	str	r3, [r1, #76]	; 0x4c
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d047      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003694:	d030      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369a:	d82a      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800369c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036a0:	d02c      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x364>
 80036a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036a6:	d824      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ac:	d018      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b2:	d81e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d007      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x336>
 80036be:	e018      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c0:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	4a84      	ldr	r2, [pc, #528]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036cc:	e017      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fd6b 	bl	80041b0 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036de:	e00e      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3324      	adds	r3, #36	; 0x24
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fe14 	bl	8004314 <RCCEx_PLL3_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036f0:	e005      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
      break;
 80036f6:	e002      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036f8:	bf00      	nop
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003704:	4b74      	ldr	r3, [pc, #464]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	4971      	ldr	r1, [pc, #452]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003712:	4313      	orrs	r3, r2
 8003714:	650b      	str	r3, [r1, #80]	; 0x50
 8003716:	e001      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d049      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003730:	d02e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003736:	d828      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800373c:	d02a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800373e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003742:	d822      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003744:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003748:	d026      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800374a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800374e:	d81c      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003754:	d010      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800375a:	d816      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01d      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d111      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fd1f 	bl	80041b0 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003776:	e012      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	2101      	movs	r1, #1
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fdc8 	bl	8004314 <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003788:	e009      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003790:	bf00      	nop
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800379c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037a4:	4b4c      	ldr	r3, [pc, #304]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b0:	4949      	ldr	r1, [pc, #292]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	650b      	str	r3, [r1, #80]	; 0x50
 80037b6:	e001      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d053      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80037d2:	d034      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80037d8:	d82e      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037de:	d030      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e4:	d828      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d02c      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d822      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037f6:	d028      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80037f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037fc:	d81c      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003802:	d010      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003808:	d816      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01f      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800380e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003812:	d111      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fcc8 	bl	80041b0 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003824:	e014      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3324      	adds	r3, #36	; 0x24
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fd71 	bl	8004314 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003836:	e00b      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	e008      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800383e:	bf00      	nop
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800384e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003864:	491c      	ldr	r1, [pc, #112]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003866:	4313      	orrs	r3, r2
 8003868:	658b      	str	r3, [r1, #88]	; 0x58
 800386a:	e001      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d031      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003884:	d00e      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388a:	d814      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003894:	d10f      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038a2:	e00c      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fc80 	bl	80041b0 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80038bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d0:	4901      	ldr	r1, [pc, #4]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	650b      	str	r3, [r1, #80]	; 0x50
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80038d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d81b      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003933 	.word	0x08003933
 8003900:	0800390d 	.word	0x0800390d
 8003904:	0800391b 	.word	0x0800391b
 8003908:	08003933 	.word	0x08003933
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4bb2      	ldr	r3, [pc, #712]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4ab1      	ldr	r2, [pc, #708]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003918:	e00c      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2102      	movs	r1, #2
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fc45 	bl	80041b0 <RCCEx_PLL2_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800392a:	e003      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	75fb      	strb	r3, [r7, #23]
      break;
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800393a:	4ba7      	ldr	r3, [pc, #668]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	f023 0203 	bic.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	49a4      	ldr	r1, [pc, #656]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003948:	4313      	orrs	r3, r2
 800394a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800394c:	e001      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8086 	beq.w	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003960:	4b9e      	ldr	r3, [pc, #632]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a9d      	ldr	r2, [pc, #628]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396c:	f7fd f8c6 	bl	8000afc <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003972:	e009      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fd f8c2 	bl	8000afc <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d902      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	75fb      	strb	r3, [r7, #23]
        break;
 8003986:	e005      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003988:	4b94      	ldr	r3, [pc, #592]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d166      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800399a:	4b8f      	ldr	r3, [pc, #572]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800399c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039a4:	4053      	eors	r3, r2
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d013      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ae:	4b8a      	ldr	r3, [pc, #552]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b8:	4b87      	ldr	r3, [pc, #540]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a86      	ldr	r2, [pc, #536]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c4:	4b84      	ldr	r3, [pc, #528]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a83      	ldr	r2, [pc, #524]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039d0:	4a81      	ldr	r2, [pc, #516]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e0:	d115      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fd f88b 	bl	8000afc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039e8:	e00b      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fd f887 	bl	8000afc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d902      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003a00:	e005      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a02:	4b75      	ldr	r3, [pc, #468]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ed      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d126      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003a24:	4b6c      	ldr	r3, [pc, #432]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a32:	0919      	lsrs	r1, r3, #4
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a36:	400b      	ands	r3, r1
 8003a38:	4967      	ldr	r1, [pc, #412]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	610b      	str	r3, [r1, #16]
 8003a3e:	e005      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003a40:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	4a64      	ldr	r2, [pc, #400]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a4a:	6113      	str	r3, [r2, #16]
 8003a4c:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5a:	495f      	ldr	r1, [pc, #380]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	670b      	str	r3, [r1, #112]	; 0x70
 8003a60:	e004      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	75bb      	strb	r3, [r7, #22]
 8003a66:	e001      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d07f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	2b28      	cmp	r3, #40	; 0x28
 8003a80:	d866      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003b57 	.word	0x08003b57
 8003a8c:	08003b51 	.word	0x08003b51
 8003a90:	08003b51 	.word	0x08003b51
 8003a94:	08003b51 	.word	0x08003b51
 8003a98:	08003b51 	.word	0x08003b51
 8003a9c:	08003b51 	.word	0x08003b51
 8003aa0:	08003b51 	.word	0x08003b51
 8003aa4:	08003b51 	.word	0x08003b51
 8003aa8:	08003b2d 	.word	0x08003b2d
 8003aac:	08003b51 	.word	0x08003b51
 8003ab0:	08003b51 	.word	0x08003b51
 8003ab4:	08003b51 	.word	0x08003b51
 8003ab8:	08003b51 	.word	0x08003b51
 8003abc:	08003b51 	.word	0x08003b51
 8003ac0:	08003b51 	.word	0x08003b51
 8003ac4:	08003b51 	.word	0x08003b51
 8003ac8:	08003b3f 	.word	0x08003b3f
 8003acc:	08003b51 	.word	0x08003b51
 8003ad0:	08003b51 	.word	0x08003b51
 8003ad4:	08003b51 	.word	0x08003b51
 8003ad8:	08003b51 	.word	0x08003b51
 8003adc:	08003b51 	.word	0x08003b51
 8003ae0:	08003b51 	.word	0x08003b51
 8003ae4:	08003b51 	.word	0x08003b51
 8003ae8:	08003b57 	.word	0x08003b57
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003b51 	.word	0x08003b51
 8003af4:	08003b51 	.word	0x08003b51
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b57 	.word	0x08003b57
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b51 	.word	0x08003b51
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b57 	.word	0x08003b57
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb3c 	bl	80041b0 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b3c:	e00c      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3324      	adds	r3, #36	; 0x24
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fbe5 	bl	8004314 <RCCEx_PLL3_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
      break;
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8003b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6c:	491a      	ldr	r1, [pc, #104]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	654b      	str	r3, [r1, #84]	; 0x54
 8003b72:	e001      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d03f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d821      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003bad 	.word	0x08003bad
 8003b9c:	08003bbf 	.word	0x08003bbf
 8003ba0:	08003be5 	.word	0x08003be5
 8003ba4:	08003be5 	.word	0x08003be5
 8003ba8:	08003be5 	.word	0x08003be5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fafc 	bl	80041b0 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e013      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3324      	adds	r3, #36	; 0x24
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fba5 	bl	8004314 <RCCEx_PLL3_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bce:	e00a      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd4:	e007      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003bd6:	bf00      	nop
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	58024800 	.word	0x58024800
 8003be0:	00ffffcf 	.word	0x00ffffcf
      break;
 8003be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bec:	4b9f      	ldr	r3, [pc, #636]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	f023 0207 	bic.w	r2, r3, #7
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf8:	499c      	ldr	r1, [pc, #624]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	654b      	str	r3, [r1, #84]	; 0x54
 8003bfe:	e001      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d039      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d820      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c63 	.word	0x08003c63
 8003c24:	08003c39 	.word	0x08003c39
 8003c28:	08003c4b 	.word	0x08003c4b
 8003c2c:	08003c63 	.word	0x08003c63
 8003c30:	08003c63 	.word	0x08003c63
 8003c34:	08003c63 	.word	0x08003c63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fab6 	bl	80041b0 <RCCEx_PLL2_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c48:	e00c      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3324      	adds	r3, #36	; 0x24
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fb5f 	bl	8004314 <RCCEx_PLL3_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c6a:	4b80      	ldr	r3, [pc, #512]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f023 0207 	bic.w	r2, r3, #7
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c78:	497c      	ldr	r1, [pc, #496]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d04b      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d02e      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca0:	d828      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d02a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d822      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb2:	d026      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb8:	d81c      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc4:	d816      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01d      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cce:	d111      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fa6a 	bl	80041b0 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e012      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3324      	adds	r3, #36	; 0x24
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fb13 	bl	8004314 <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0e:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1c:	4953      	ldr	r1, [pc, #332]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	654b      	str	r3, [r1, #84]	; 0x54
 8003d22:	e001      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d04b      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d3e:	d02e      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003d40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d44:	d828      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	d02a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d822      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d56:	d026      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d5c:	d81c      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d62:	d010      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d68:	d816      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01d      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d111      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fa18 	bl	80041b0 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d84:	e012      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3324      	adds	r3, #36	; 0x24
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fac1 	bl	8004314 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d96:	e009      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e004      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003da2:	bf00      	nop
 8003da4:	e002      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db2:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dc0:	492a      	ldr	r1, [pc, #168]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	658b      	str	r3, [r1, #88]	; 0x58
 8003dc6:	e001      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d04d      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003de2:	d02e      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003de4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003de8:	d828      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dee:	d02a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df4:	d822      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003df6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dfa:	d026      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003dfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e00:	d81c      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e06:	d010      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0c:	d816      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01d      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	d111      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f9c6 	bl	80041b0 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e28:	e012      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3324      	adds	r3, #36	; 0x24
 8003e2e:	2102      	movs	r1, #2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fa6f 	bl	8004314 <RCCEx_PLL3_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e3a:	e009      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e004      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003e46:	bf00      	nop
 8003e48:	e002      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e64:	4901      	ldr	r1, [pc, #4]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3324      	adds	r3, #36	; 0x24
 8003e90:	2102      	movs	r1, #2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fa3e 	bl	8004314 <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ea2:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	4988      	ldr	r1, [pc, #544]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fa1d 	bl	8004314 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ee4:	4b7b      	ldr	r3, [pc, #492]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef2:	4978      	ldr	r1, [pc, #480]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d034      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0e:	d01d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f14:	d817      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f20:	e011      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f941 	bl	80041b0 <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f32:	e00c      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f9ea 	bl	8004314 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f54:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f62:	495c      	ldr	r1, [pc, #368]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	658b      	str	r3, [r1, #88]	; 0x58
 8003f68:	e001      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d033      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f84:	d01c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f8a:	d816      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f96:	d007      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003f98:	e00f      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9a:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	4a4d      	ldr	r2, [pc, #308]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fa6:	e00c      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f9b0 	bl	8004314 <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd6:	493f      	ldr	r1, [pc, #252]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	654b      	str	r3, [r1, #84]	; 0x54
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d029      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d007      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ffc:	e00f      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffe:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800400a:	e00b      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	2102      	movs	r1, #2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f8cc 	bl	80041b0 <RCCEx_PLL2_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800401c:	e002      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
      break;
 8004022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	4927      	ldr	r1, [pc, #156]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800403c:	e001      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3324      	adds	r3, #36	; 0x24
 8004052:	2102      	movs	r1, #2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f95d 	bl	8004314 <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d035      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407a:	d017      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800407c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004080:	d811      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d013      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	d80b      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d010      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d106      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040a4:	e007      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
      break;
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80040b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ca:	4902      	ldr	r1, [pc, #8]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	654b      	str	r3, [r1, #84]	; 0x54
 80040d0:	e004      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040d2:	bf00      	nop
 80040d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f4:	492d      	ldr	r1, [pc, #180]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	4926      	ldr	r1, [pc, #152]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004114:	4313      	orrs	r3, r2
 8004116:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	491e      	ldr	r1, [pc, #120]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004132:	4313      	orrs	r3, r2
 8004134:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800414c:	6113      	str	r3, [r2, #16]
 800414e:	4b17      	ldr	r3, [pc, #92]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004158:	4914      	ldr	r1, [pc, #80]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800415a:	4313      	orrs	r3, r2
 800415c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	da08      	bge.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004174:	4313      	orrs	r3, r2
 8004176:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	4906      	ldr	r1, [pc, #24]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004194:	4313      	orrs	r3, r2
 8004196:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004198:	7dbb      	ldrb	r3, [r7, #22]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58024400 	.word	0x58024400

080041b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041be:	4b53      	ldr	r3, [pc, #332]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d101      	bne.n	80041ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e099      	b.n	8004302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041ce:	4b4f      	ldr	r3, [pc, #316]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4e      	ldr	r2, [pc, #312]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041da:	f7fc fc8f 	bl	8000afc <HAL_GetTick>
 80041de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041e2:	f7fc fc8b 	bl	8000afc <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e086      	b.n	8004302 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004200:	4b42      	ldr	r3, [pc, #264]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	493f      	ldr	r1, [pc, #252]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	628b      	str	r3, [r1, #40]	; 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	b29b      	uxth	r3, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	3b01      	subs	r3, #1
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004244:	4931      	ldr	r1, [pc, #196]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	492d      	ldr	r1, [pc, #180]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f023 0220 	bic.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4928      	ldr	r1, [pc, #160]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800426e:	4b27      	ldr	r3, [pc, #156]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a26      	ldr	r2, [pc, #152]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800427c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <RCCEx_PLL2_Config+0x160>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	69d2      	ldr	r2, [r2, #28]
 8004286:	00d2      	lsls	r2, r2, #3
 8004288:	4920      	ldr	r1, [pc, #128]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004294:	f043 0310 	orr.w	r3, r3, #16
 8004298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042ac:	e00f      	b.n	80042ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042b4:	4b15      	ldr	r3, [pc, #84]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042c0:	e005      	b.n	80042ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042da:	f7fc fc0f 	bl	8000afc <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042e2:	f7fc fc0b 	bl	8000afc <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e006      	b.n	8004302 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
 8004310:	ffff0007 	.word	0xffff0007

08004314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004322:	4b53      	ldr	r3, [pc, #332]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b03      	cmp	r3, #3
 800432c:	d101      	bne.n	8004332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e099      	b.n	8004466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004332:	4b4f      	ldr	r3, [pc, #316]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4e      	ldr	r2, [pc, #312]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433e:	f7fc fbdd 	bl	8000afc <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004344:	e008      	b.n	8004358 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004346:	f7fc fbd9 	bl	8000afc <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e086      	b.n	8004466 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004358:	4b45      	ldr	r3, [pc, #276]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004364:	4b42      	ldr	r3, [pc, #264]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	493f      	ldr	r1, [pc, #252]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	628b      	str	r3, [r1, #40]	; 0x28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	3b01      	subs	r3, #1
 800437e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	025b      	lsls	r3, r3, #9
 800438a:	b29b      	uxth	r3, r3
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	3b01      	subs	r3, #1
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043a8:	4931      	ldr	r1, [pc, #196]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043ae:	4b30      	ldr	r3, [pc, #192]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	492d      	ldr	r1, [pc, #180]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4928      	ldr	r1, [pc, #160]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	4a26      	ldr	r2, [pc, #152]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <RCCEx_PLL3_Config+0x160>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	69d2      	ldr	r2, [r2, #28]
 80043ea:	00d2      	lsls	r2, r2, #3
 80043ec:	4920      	ldr	r1, [pc, #128]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043f2:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800440a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800440e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004410:	e00f      	b.n	8004432 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800441e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004422:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004424:	e005      	b.n	8004432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4a11      	ldr	r2, [pc, #68]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800442c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004430:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443e:	f7fc fb5d 	bl	8000afc <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004444:	e008      	b.n	8004458 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004446:	f7fc fb59 	bl	8000afc <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	ffff0007 	.word	0xffff0007

08004478 <__errno>:
 8004478:	4b01      	ldr	r3, [pc, #4]	; (8004480 <__errno+0x8>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	24000010 	.word	0x24000010

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4d0d      	ldr	r5, [pc, #52]	; (80044bc <__libc_init_array+0x38>)
 8004488:	4c0d      	ldr	r4, [pc, #52]	; (80044c0 <__libc_init_array+0x3c>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	2600      	movs	r6, #0
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	4d0b      	ldr	r5, [pc, #44]	; (80044c4 <__libc_init_array+0x40>)
 8004496:	4c0c      	ldr	r4, [pc, #48]	; (80044c8 <__libc_init_array+0x44>)
 8004498:	f000 fc8e 	bl	8004db8 <_init>
 800449c:	1b64      	subs	r4, r4, r5
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	2600      	movs	r6, #0
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	08004e7c 	.word	0x08004e7c
 80044c0:	08004e7c 	.word	0x08004e7c
 80044c4:	08004e7c 	.word	0x08004e7c
 80044c8:	08004e80 	.word	0x08004e80

080044cc <memcpy>:
 80044cc:	440a      	add	r2, r1
 80044ce:	4291      	cmp	r1, r2
 80044d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044d4:	d100      	bne.n	80044d8 <memcpy+0xc>
 80044d6:	4770      	bx	lr
 80044d8:	b510      	push	{r4, lr}
 80044da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e2:	4291      	cmp	r1, r2
 80044e4:	d1f9      	bne.n	80044da <memcpy+0xe>
 80044e6:	bd10      	pop	{r4, pc}

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <siprintf>:
 80044f8:	b40e      	push	{r1, r2, r3}
 80044fa:	b500      	push	{lr}
 80044fc:	b09c      	sub	sp, #112	; 0x70
 80044fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9006      	str	r0, [sp, #24]
 8004504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004508:	4809      	ldr	r0, [pc, #36]	; (8004530 <siprintf+0x38>)
 800450a:	9107      	str	r1, [sp, #28]
 800450c:	9104      	str	r1, [sp, #16]
 800450e:	4909      	ldr	r1, [pc, #36]	; (8004534 <siprintf+0x3c>)
 8004510:	f853 2b04 	ldr.w	r2, [r3], #4
 8004514:	9105      	str	r1, [sp, #20]
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	a902      	add	r1, sp, #8
 800451c:	f000 f868 	bl	80045f0 <_svfiprintf_r>
 8004520:	9b02      	ldr	r3, [sp, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	b01c      	add	sp, #112	; 0x70
 8004528:	f85d eb04 	ldr.w	lr, [sp], #4
 800452c:	b003      	add	sp, #12
 800452e:	4770      	bx	lr
 8004530:	24000010 	.word	0x24000010
 8004534:	ffff0208 	.word	0xffff0208

08004538 <__ssputs_r>:
 8004538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	688e      	ldr	r6, [r1, #8]
 800453e:	429e      	cmp	r6, r3
 8004540:	4682      	mov	sl, r0
 8004542:	460c      	mov	r4, r1
 8004544:	4690      	mov	r8, r2
 8004546:	461f      	mov	r7, r3
 8004548:	d838      	bhi.n	80045bc <__ssputs_r+0x84>
 800454a:	898a      	ldrh	r2, [r1, #12]
 800454c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004550:	d032      	beq.n	80045b8 <__ssputs_r+0x80>
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	6909      	ldr	r1, [r1, #16]
 8004556:	eba5 0901 	sub.w	r9, r5, r1
 800455a:	6965      	ldr	r5, [r4, #20]
 800455c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004564:	3301      	adds	r3, #1
 8004566:	444b      	add	r3, r9
 8004568:	106d      	asrs	r5, r5, #1
 800456a:	429d      	cmp	r5, r3
 800456c:	bf38      	it	cc
 800456e:	461d      	movcc	r5, r3
 8004570:	0553      	lsls	r3, r2, #21
 8004572:	d531      	bpl.n	80045d8 <__ssputs_r+0xa0>
 8004574:	4629      	mov	r1, r5
 8004576:	f000 fb55 	bl	8004c24 <_malloc_r>
 800457a:	4606      	mov	r6, r0
 800457c:	b950      	cbnz	r0, 8004594 <__ssputs_r+0x5c>
 800457e:	230c      	movs	r3, #12
 8004580:	f8ca 3000 	str.w	r3, [sl]
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004594:	6921      	ldr	r1, [r4, #16]
 8004596:	464a      	mov	r2, r9
 8004598:	f7ff ff98 	bl	80044cc <memcpy>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	6126      	str	r6, [r4, #16]
 80045aa:	6165      	str	r5, [r4, #20]
 80045ac:	444e      	add	r6, r9
 80045ae:	eba5 0509 	sub.w	r5, r5, r9
 80045b2:	6026      	str	r6, [r4, #0]
 80045b4:	60a5      	str	r5, [r4, #8]
 80045b6:	463e      	mov	r6, r7
 80045b8:	42be      	cmp	r6, r7
 80045ba:	d900      	bls.n	80045be <__ssputs_r+0x86>
 80045bc:	463e      	mov	r6, r7
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	4632      	mov	r2, r6
 80045c2:	4641      	mov	r1, r8
 80045c4:	f000 faa8 	bl	8004b18 <memmove>
 80045c8:	68a3      	ldr	r3, [r4, #8]
 80045ca:	1b9b      	subs	r3, r3, r6
 80045cc:	60a3      	str	r3, [r4, #8]
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	4433      	add	r3, r6
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	2000      	movs	r0, #0
 80045d6:	e7db      	b.n	8004590 <__ssputs_r+0x58>
 80045d8:	462a      	mov	r2, r5
 80045da:	f000 fb97 	bl	8004d0c <_realloc_r>
 80045de:	4606      	mov	r6, r0
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d1e1      	bne.n	80045a8 <__ssputs_r+0x70>
 80045e4:	6921      	ldr	r1, [r4, #16]
 80045e6:	4650      	mov	r0, sl
 80045e8:	f000 fab0 	bl	8004b4c <_free_r>
 80045ec:	e7c7      	b.n	800457e <__ssputs_r+0x46>
	...

080045f0 <_svfiprintf_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	4698      	mov	r8, r3
 80045f6:	898b      	ldrh	r3, [r1, #12]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	b09d      	sub	sp, #116	; 0x74
 80045fc:	4607      	mov	r7, r0
 80045fe:	460d      	mov	r5, r1
 8004600:	4614      	mov	r4, r2
 8004602:	d50e      	bpl.n	8004622 <_svfiprintf_r+0x32>
 8004604:	690b      	ldr	r3, [r1, #16]
 8004606:	b963      	cbnz	r3, 8004622 <_svfiprintf_r+0x32>
 8004608:	2140      	movs	r1, #64	; 0x40
 800460a:	f000 fb0b 	bl	8004c24 <_malloc_r>
 800460e:	6028      	str	r0, [r5, #0]
 8004610:	6128      	str	r0, [r5, #16]
 8004612:	b920      	cbnz	r0, 800461e <_svfiprintf_r+0x2e>
 8004614:	230c      	movs	r3, #12
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	e0d1      	b.n	80047c2 <_svfiprintf_r+0x1d2>
 800461e:	2340      	movs	r3, #64	; 0x40
 8004620:	616b      	str	r3, [r5, #20]
 8004622:	2300      	movs	r3, #0
 8004624:	9309      	str	r3, [sp, #36]	; 0x24
 8004626:	2320      	movs	r3, #32
 8004628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800462c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004630:	2330      	movs	r3, #48	; 0x30
 8004632:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047dc <_svfiprintf_r+0x1ec>
 8004636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800463a:	f04f 0901 	mov.w	r9, #1
 800463e:	4623      	mov	r3, r4
 8004640:	469a      	mov	sl, r3
 8004642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004646:	b10a      	cbz	r2, 800464c <_svfiprintf_r+0x5c>
 8004648:	2a25      	cmp	r2, #37	; 0x25
 800464a:	d1f9      	bne.n	8004640 <_svfiprintf_r+0x50>
 800464c:	ebba 0b04 	subs.w	fp, sl, r4
 8004650:	d00b      	beq.n	800466a <_svfiprintf_r+0x7a>
 8004652:	465b      	mov	r3, fp
 8004654:	4622      	mov	r2, r4
 8004656:	4629      	mov	r1, r5
 8004658:	4638      	mov	r0, r7
 800465a:	f7ff ff6d 	bl	8004538 <__ssputs_r>
 800465e:	3001      	adds	r0, #1
 8004660:	f000 80aa 	beq.w	80047b8 <_svfiprintf_r+0x1c8>
 8004664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004666:	445a      	add	r2, fp
 8004668:	9209      	str	r2, [sp, #36]	; 0x24
 800466a:	f89a 3000 	ldrb.w	r3, [sl]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80a2 	beq.w	80047b8 <_svfiprintf_r+0x1c8>
 8004674:	2300      	movs	r3, #0
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800467e:	f10a 0a01 	add.w	sl, sl, #1
 8004682:	9304      	str	r3, [sp, #16]
 8004684:	9307      	str	r3, [sp, #28]
 8004686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800468a:	931a      	str	r3, [sp, #104]	; 0x68
 800468c:	4654      	mov	r4, sl
 800468e:	2205      	movs	r2, #5
 8004690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004694:	4851      	ldr	r0, [pc, #324]	; (80047dc <_svfiprintf_r+0x1ec>)
 8004696:	f7fb fe2b 	bl	80002f0 <memchr>
 800469a:	9a04      	ldr	r2, [sp, #16]
 800469c:	b9d8      	cbnz	r0, 80046d6 <_svfiprintf_r+0xe6>
 800469e:	06d0      	lsls	r0, r2, #27
 80046a0:	bf44      	itt	mi
 80046a2:	2320      	movmi	r3, #32
 80046a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a8:	0711      	lsls	r1, r2, #28
 80046aa:	bf44      	itt	mi
 80046ac:	232b      	movmi	r3, #43	; 0x2b
 80046ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b2:	f89a 3000 	ldrb.w	r3, [sl]
 80046b6:	2b2a      	cmp	r3, #42	; 0x2a
 80046b8:	d015      	beq.n	80046e6 <_svfiprintf_r+0xf6>
 80046ba:	9a07      	ldr	r2, [sp, #28]
 80046bc:	4654      	mov	r4, sl
 80046be:	2000      	movs	r0, #0
 80046c0:	f04f 0c0a 	mov.w	ip, #10
 80046c4:	4621      	mov	r1, r4
 80046c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ca:	3b30      	subs	r3, #48	; 0x30
 80046cc:	2b09      	cmp	r3, #9
 80046ce:	d94e      	bls.n	800476e <_svfiprintf_r+0x17e>
 80046d0:	b1b0      	cbz	r0, 8004700 <_svfiprintf_r+0x110>
 80046d2:	9207      	str	r2, [sp, #28]
 80046d4:	e014      	b.n	8004700 <_svfiprintf_r+0x110>
 80046d6:	eba0 0308 	sub.w	r3, r0, r8
 80046da:	fa09 f303 	lsl.w	r3, r9, r3
 80046de:	4313      	orrs	r3, r2
 80046e0:	9304      	str	r3, [sp, #16]
 80046e2:	46a2      	mov	sl, r4
 80046e4:	e7d2      	b.n	800468c <_svfiprintf_r+0x9c>
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	1d19      	adds	r1, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9103      	str	r1, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfbb      	ittet	lt
 80046f2:	425b      	neglt	r3, r3
 80046f4:	f042 0202 	orrlt.w	r2, r2, #2
 80046f8:	9307      	strge	r3, [sp, #28]
 80046fa:	9307      	strlt	r3, [sp, #28]
 80046fc:	bfb8      	it	lt
 80046fe:	9204      	strlt	r2, [sp, #16]
 8004700:	7823      	ldrb	r3, [r4, #0]
 8004702:	2b2e      	cmp	r3, #46	; 0x2e
 8004704:	d10c      	bne.n	8004720 <_svfiprintf_r+0x130>
 8004706:	7863      	ldrb	r3, [r4, #1]
 8004708:	2b2a      	cmp	r3, #42	; 0x2a
 800470a:	d135      	bne.n	8004778 <_svfiprintf_r+0x188>
 800470c:	9b03      	ldr	r3, [sp, #12]
 800470e:	1d1a      	adds	r2, r3, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	9203      	str	r2, [sp, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	bfb8      	it	lt
 8004718:	f04f 33ff 	movlt.w	r3, #4294967295
 800471c:	3402      	adds	r4, #2
 800471e:	9305      	str	r3, [sp, #20]
 8004720:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047ec <_svfiprintf_r+0x1fc>
 8004724:	7821      	ldrb	r1, [r4, #0]
 8004726:	2203      	movs	r2, #3
 8004728:	4650      	mov	r0, sl
 800472a:	f7fb fde1 	bl	80002f0 <memchr>
 800472e:	b140      	cbz	r0, 8004742 <_svfiprintf_r+0x152>
 8004730:	2340      	movs	r3, #64	; 0x40
 8004732:	eba0 000a 	sub.w	r0, r0, sl
 8004736:	fa03 f000 	lsl.w	r0, r3, r0
 800473a:	9b04      	ldr	r3, [sp, #16]
 800473c:	4303      	orrs	r3, r0
 800473e:	3401      	adds	r4, #1
 8004740:	9304      	str	r3, [sp, #16]
 8004742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004746:	4826      	ldr	r0, [pc, #152]	; (80047e0 <_svfiprintf_r+0x1f0>)
 8004748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800474c:	2206      	movs	r2, #6
 800474e:	f7fb fdcf 	bl	80002f0 <memchr>
 8004752:	2800      	cmp	r0, #0
 8004754:	d038      	beq.n	80047c8 <_svfiprintf_r+0x1d8>
 8004756:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <_svfiprintf_r+0x1f4>)
 8004758:	bb1b      	cbnz	r3, 80047a2 <_svfiprintf_r+0x1b2>
 800475a:	9b03      	ldr	r3, [sp, #12]
 800475c:	3307      	adds	r3, #7
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	3308      	adds	r3, #8
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004768:	4433      	add	r3, r6
 800476a:	9309      	str	r3, [sp, #36]	; 0x24
 800476c:	e767      	b.n	800463e <_svfiprintf_r+0x4e>
 800476e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004772:	460c      	mov	r4, r1
 8004774:	2001      	movs	r0, #1
 8004776:	e7a5      	b.n	80046c4 <_svfiprintf_r+0xd4>
 8004778:	2300      	movs	r3, #0
 800477a:	3401      	adds	r4, #1
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	4619      	mov	r1, r3
 8004780:	f04f 0c0a 	mov.w	ip, #10
 8004784:	4620      	mov	r0, r4
 8004786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800478a:	3a30      	subs	r2, #48	; 0x30
 800478c:	2a09      	cmp	r2, #9
 800478e:	d903      	bls.n	8004798 <_svfiprintf_r+0x1a8>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0c5      	beq.n	8004720 <_svfiprintf_r+0x130>
 8004794:	9105      	str	r1, [sp, #20]
 8004796:	e7c3      	b.n	8004720 <_svfiprintf_r+0x130>
 8004798:	fb0c 2101 	mla	r1, ip, r1, r2
 800479c:	4604      	mov	r4, r0
 800479e:	2301      	movs	r3, #1
 80047a0:	e7f0      	b.n	8004784 <_svfiprintf_r+0x194>
 80047a2:	ab03      	add	r3, sp, #12
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	462a      	mov	r2, r5
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <_svfiprintf_r+0x1f8>)
 80047aa:	a904      	add	r1, sp, #16
 80047ac:	4638      	mov	r0, r7
 80047ae:	f3af 8000 	nop.w
 80047b2:	1c42      	adds	r2, r0, #1
 80047b4:	4606      	mov	r6, r0
 80047b6:	d1d6      	bne.n	8004766 <_svfiprintf_r+0x176>
 80047b8:	89ab      	ldrh	r3, [r5, #12]
 80047ba:	065b      	lsls	r3, r3, #25
 80047bc:	f53f af2c 	bmi.w	8004618 <_svfiprintf_r+0x28>
 80047c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047c2:	b01d      	add	sp, #116	; 0x74
 80047c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c8:	ab03      	add	r3, sp, #12
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	462a      	mov	r2, r5
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <_svfiprintf_r+0x1f8>)
 80047d0:	a904      	add	r1, sp, #16
 80047d2:	4638      	mov	r0, r7
 80047d4:	f000 f87a 	bl	80048cc <_printf_i>
 80047d8:	e7eb      	b.n	80047b2 <_svfiprintf_r+0x1c2>
 80047da:	bf00      	nop
 80047dc:	08004e48 	.word	0x08004e48
 80047e0:	08004e52 	.word	0x08004e52
 80047e4:	00000000 	.word	0x00000000
 80047e8:	08004539 	.word	0x08004539
 80047ec:	08004e4e 	.word	0x08004e4e

080047f0 <_printf_common>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	4616      	mov	r6, r2
 80047f6:	4699      	mov	r9, r3
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	690b      	ldr	r3, [r1, #16]
 80047fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004800:	4293      	cmp	r3, r2
 8004802:	bfb8      	it	lt
 8004804:	4613      	movlt	r3, r2
 8004806:	6033      	str	r3, [r6, #0]
 8004808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800480c:	4607      	mov	r7, r0
 800480e:	460c      	mov	r4, r1
 8004810:	b10a      	cbz	r2, 8004816 <_printf_common+0x26>
 8004812:	3301      	adds	r3, #1
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	0699      	lsls	r1, r3, #26
 800481a:	bf42      	ittt	mi
 800481c:	6833      	ldrmi	r3, [r6, #0]
 800481e:	3302      	addmi	r3, #2
 8004820:	6033      	strmi	r3, [r6, #0]
 8004822:	6825      	ldr	r5, [r4, #0]
 8004824:	f015 0506 	ands.w	r5, r5, #6
 8004828:	d106      	bne.n	8004838 <_printf_common+0x48>
 800482a:	f104 0a19 	add.w	sl, r4, #25
 800482e:	68e3      	ldr	r3, [r4, #12]
 8004830:	6832      	ldr	r2, [r6, #0]
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	42ab      	cmp	r3, r5
 8004836:	dc26      	bgt.n	8004886 <_printf_common+0x96>
 8004838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800483c:	1e13      	subs	r3, r2, #0
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	bf18      	it	ne
 8004842:	2301      	movne	r3, #1
 8004844:	0692      	lsls	r2, r2, #26
 8004846:	d42b      	bmi.n	80048a0 <_printf_common+0xb0>
 8004848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d01e      	beq.n	8004894 <_printf_common+0xa4>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	68e5      	ldr	r5, [r4, #12]
 800485a:	6832      	ldr	r2, [r6, #0]
 800485c:	f003 0306 	and.w	r3, r3, #6
 8004860:	2b04      	cmp	r3, #4
 8004862:	bf08      	it	eq
 8004864:	1aad      	subeq	r5, r5, r2
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	bf0c      	ite	eq
 800486c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004870:	2500      	movne	r5, #0
 8004872:	4293      	cmp	r3, r2
 8004874:	bfc4      	itt	gt
 8004876:	1a9b      	subgt	r3, r3, r2
 8004878:	18ed      	addgt	r5, r5, r3
 800487a:	2600      	movs	r6, #0
 800487c:	341a      	adds	r4, #26
 800487e:	42b5      	cmp	r5, r6
 8004880:	d11a      	bne.n	80048b8 <_printf_common+0xc8>
 8004882:	2000      	movs	r0, #0
 8004884:	e008      	b.n	8004898 <_printf_common+0xa8>
 8004886:	2301      	movs	r3, #1
 8004888:	4652      	mov	r2, sl
 800488a:	4649      	mov	r1, r9
 800488c:	4638      	mov	r0, r7
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d103      	bne.n	800489c <_printf_common+0xac>
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	3501      	adds	r5, #1
 800489e:	e7c6      	b.n	800482e <_printf_common+0x3e>
 80048a0:	18e1      	adds	r1, r4, r3
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	2030      	movs	r0, #48	; 0x30
 80048a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048aa:	4422      	add	r2, r4
 80048ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b4:	3302      	adds	r3, #2
 80048b6:	e7c7      	b.n	8004848 <_printf_common+0x58>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4622      	mov	r2, r4
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0e6      	beq.n	8004894 <_printf_common+0xa4>
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7d9      	b.n	800487e <_printf_common+0x8e>
	...

080048cc <_printf_i>:
 80048cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	7e0f      	ldrb	r7, [r1, #24]
 80048d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048d4:	2f78      	cmp	r7, #120	; 0x78
 80048d6:	4691      	mov	r9, r2
 80048d8:	4680      	mov	r8, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	469a      	mov	sl, r3
 80048de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048e2:	d807      	bhi.n	80048f4 <_printf_i+0x28>
 80048e4:	2f62      	cmp	r7, #98	; 0x62
 80048e6:	d80a      	bhi.n	80048fe <_printf_i+0x32>
 80048e8:	2f00      	cmp	r7, #0
 80048ea:	f000 80d8 	beq.w	8004a9e <_printf_i+0x1d2>
 80048ee:	2f58      	cmp	r7, #88	; 0x58
 80048f0:	f000 80a3 	beq.w	8004a3a <_printf_i+0x16e>
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048fc:	e03a      	b.n	8004974 <_printf_i+0xa8>
 80048fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004902:	2b15      	cmp	r3, #21
 8004904:	d8f6      	bhi.n	80048f4 <_printf_i+0x28>
 8004906:	a101      	add	r1, pc, #4	; (adr r1, 800490c <_printf_i+0x40>)
 8004908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800490c:	08004965 	.word	0x08004965
 8004910:	08004979 	.word	0x08004979
 8004914:	080048f5 	.word	0x080048f5
 8004918:	080048f5 	.word	0x080048f5
 800491c:	080048f5 	.word	0x080048f5
 8004920:	080048f5 	.word	0x080048f5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048f5 	.word	0x080048f5
 800492c:	080048f5 	.word	0x080048f5
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	08004a85 	.word	0x08004a85
 800493c:	080049a9 	.word	0x080049a9
 8004940:	08004a67 	.word	0x08004a67
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004aa7 	.word	0x08004aa7
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a6f 	.word	0x08004a6f
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	602a      	str	r2, [r5, #0]
 800496c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004974:	2301      	movs	r3, #1
 8004976:	e0a3      	b.n	8004ac0 <_printf_i+0x1f4>
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	0606      	lsls	r6, r0, #24
 800497e:	f101 0304 	add.w	r3, r1, #4
 8004982:	d50a      	bpl.n	800499a <_printf_i+0xce>
 8004984:	680e      	ldr	r6, [r1, #0]
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	2e00      	cmp	r6, #0
 800498a:	da03      	bge.n	8004994 <_printf_i+0xc8>
 800498c:	232d      	movs	r3, #45	; 0x2d
 800498e:	4276      	negs	r6, r6
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004994:	485e      	ldr	r0, [pc, #376]	; (8004b10 <_printf_i+0x244>)
 8004996:	230a      	movs	r3, #10
 8004998:	e019      	b.n	80049ce <_printf_i+0x102>
 800499a:	680e      	ldr	r6, [r1, #0]
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049a2:	bf18      	it	ne
 80049a4:	b236      	sxthne	r6, r6
 80049a6:	e7ef      	b.n	8004988 <_printf_i+0xbc>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	1d19      	adds	r1, r3, #4
 80049ae:	6029      	str	r1, [r5, #0]
 80049b0:	0601      	lsls	r1, r0, #24
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0xec>
 80049b4:	681e      	ldr	r6, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0xf2>
 80049b8:	0646      	lsls	r6, r0, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0xe8>
 80049bc:	881e      	ldrh	r6, [r3, #0]
 80049be:	4854      	ldr	r0, [pc, #336]	; (8004b10 <_printf_i+0x244>)
 80049c0:	2f6f      	cmp	r7, #111	; 0x6f
 80049c2:	bf0c      	ite	eq
 80049c4:	2308      	moveq	r3, #8
 80049c6:	230a      	movne	r3, #10
 80049c8:	2100      	movs	r1, #0
 80049ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ce:	6865      	ldr	r5, [r4, #4]
 80049d0:	60a5      	str	r5, [r4, #8]
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	bfa2      	ittt	ge
 80049d6:	6821      	ldrge	r1, [r4, #0]
 80049d8:	f021 0104 	bicge.w	r1, r1, #4
 80049dc:	6021      	strge	r1, [r4, #0]
 80049de:	b90e      	cbnz	r6, 80049e4 <_printf_i+0x118>
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	d04d      	beq.n	8004a80 <_printf_i+0x1b4>
 80049e4:	4615      	mov	r5, r2
 80049e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ea:	fb03 6711 	mls	r7, r3, r1, r6
 80049ee:	5dc7      	ldrb	r7, [r0, r7]
 80049f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049f4:	4637      	mov	r7, r6
 80049f6:	42bb      	cmp	r3, r7
 80049f8:	460e      	mov	r6, r1
 80049fa:	d9f4      	bls.n	80049e6 <_printf_i+0x11a>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d10b      	bne.n	8004a18 <_printf_i+0x14c>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	07de      	lsls	r6, r3, #31
 8004a04:	d508      	bpl.n	8004a18 <_printf_i+0x14c>
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	6861      	ldr	r1, [r4, #4]
 8004a0a:	4299      	cmp	r1, r3
 8004a0c:	bfde      	ittt	le
 8004a0e:	2330      	movle	r3, #48	; 0x30
 8004a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a18:	1b52      	subs	r2, r2, r5
 8004a1a:	6122      	str	r2, [r4, #16]
 8004a1c:	f8cd a000 	str.w	sl, [sp]
 8004a20:	464b      	mov	r3, r9
 8004a22:	aa03      	add	r2, sp, #12
 8004a24:	4621      	mov	r1, r4
 8004a26:	4640      	mov	r0, r8
 8004a28:	f7ff fee2 	bl	80047f0 <_printf_common>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d14c      	bne.n	8004aca <_printf_i+0x1fe>
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	b004      	add	sp, #16
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	4835      	ldr	r0, [pc, #212]	; (8004b10 <_printf_i+0x244>)
 8004a3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a40:	6829      	ldr	r1, [r5, #0]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a48:	6029      	str	r1, [r5, #0]
 8004a4a:	061d      	lsls	r5, r3, #24
 8004a4c:	d514      	bpl.n	8004a78 <_printf_i+0x1ac>
 8004a4e:	07df      	lsls	r7, r3, #31
 8004a50:	bf44      	itt	mi
 8004a52:	f043 0320 	orrmi.w	r3, r3, #32
 8004a56:	6023      	strmi	r3, [r4, #0]
 8004a58:	b91e      	cbnz	r6, 8004a62 <_printf_i+0x196>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f023 0320 	bic.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2310      	movs	r3, #16
 8004a64:	e7b0      	b.n	80049c8 <_printf_i+0xfc>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	2378      	movs	r3, #120	; 0x78
 8004a70:	4828      	ldr	r0, [pc, #160]	; (8004b14 <_printf_i+0x248>)
 8004a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a76:	e7e3      	b.n	8004a40 <_printf_i+0x174>
 8004a78:	0659      	lsls	r1, r3, #25
 8004a7a:	bf48      	it	mi
 8004a7c:	b2b6      	uxthmi	r6, r6
 8004a7e:	e7e6      	b.n	8004a4e <_printf_i+0x182>
 8004a80:	4615      	mov	r5, r2
 8004a82:	e7bb      	b.n	80049fc <_printf_i+0x130>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6826      	ldr	r6, [r4, #0]
 8004a88:	6961      	ldr	r1, [r4, #20]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6028      	str	r0, [r5, #0]
 8004a8e:	0635      	lsls	r5, r6, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1cc>
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1d2>
 8004a98:	0670      	lsls	r0, r6, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1c8>
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4615      	mov	r5, r2
 8004aa4:	e7ba      	b.n	8004a1c <_printf_i+0x150>
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	602a      	str	r2, [r5, #0]
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f7fb fc1c 	bl	80002f0 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1f2>
 8004aba:	1b40      	subs	r0, r0, r5
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac8:	e7a8      	b.n	8004a1c <_printf_i+0x150>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	462a      	mov	r2, r5
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ab      	beq.n	8004a30 <_printf_i+0x164>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x23a>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a4      	b.n	8004a34 <_printf_i+0x168>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09b      	beq.n	8004a30 <_printf_i+0x164>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x21e>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x212>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x22e>
 8004b0e:	bf00      	nop
 8004b10:	08004e59 	.word	0x08004e59
 8004b14:	08004e6a 	.word	0x08004e6a

08004b18 <memmove>:
 8004b18:	4288      	cmp	r0, r1
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	eb01 0402 	add.w	r4, r1, r2
 8004b20:	d902      	bls.n	8004b28 <memmove+0x10>
 8004b22:	4284      	cmp	r4, r0
 8004b24:	4623      	mov	r3, r4
 8004b26:	d807      	bhi.n	8004b38 <memmove+0x20>
 8004b28:	1e43      	subs	r3, r0, #1
 8004b2a:	42a1      	cmp	r1, r4
 8004b2c:	d008      	beq.n	8004b40 <memmove+0x28>
 8004b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b36:	e7f8      	b.n	8004b2a <memmove+0x12>
 8004b38:	4402      	add	r2, r0
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d100      	bne.n	8004b42 <memmove+0x2a>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4a:	e7f7      	b.n	8004b3c <memmove+0x24>

08004b4c <_free_r>:
 8004b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d044      	beq.n	8004bdc <_free_r+0x90>
 8004b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b5e:	bfb8      	it	lt
 8004b60:	18e4      	addlt	r4, r4, r3
 8004b62:	f000 f913 	bl	8004d8c <__malloc_lock>
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <_free_r+0x94>)
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	b933      	cbnz	r3, 8004b7c <_free_r+0x30>
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6014      	str	r4, [r2, #0]
 8004b72:	b003      	add	sp, #12
 8004b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b78:	f000 b90e 	b.w	8004d98 <__malloc_unlock>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x46>
 8004b80:	6825      	ldr	r5, [r4, #0]
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	e7ed      	b.n	8004b6e <_free_r+0x22>
 8004b92:	461a      	mov	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b10b      	cbz	r3, 8004b9c <_free_r+0x50>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d9fa      	bls.n	8004b92 <_free_r+0x46>
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	1855      	adds	r5, r2, r1
 8004ba0:	42a5      	cmp	r5, r4
 8004ba2:	d10b      	bne.n	8004bbc <_free_r+0x70>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	d1e0      	bne.n	8004b72 <_free_r+0x26>
 8004bb0:	681c      	ldr	r4, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	4421      	add	r1, r4
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	e7da      	b.n	8004b72 <_free_r+0x26>
 8004bbc:	d902      	bls.n	8004bc4 <_free_r+0x78>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6003      	str	r3, [r0, #0]
 8004bc2:	e7d6      	b.n	8004b72 <_free_r+0x26>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf04      	itt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	bf04      	itt	eq
 8004bd4:	1949      	addeq	r1, r1, r5
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	6054      	str	r4, [r2, #4]
 8004bda:	e7ca      	b.n	8004b72 <_free_r+0x26>
 8004bdc:	b003      	add	sp, #12
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	240001a0 	.word	0x240001a0

08004be4 <sbrk_aligned>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4e0e      	ldr	r6, [pc, #56]	; (8004c20 <sbrk_aligned+0x3c>)
 8004be8:	460c      	mov	r4, r1
 8004bea:	6831      	ldr	r1, [r6, #0]
 8004bec:	4605      	mov	r5, r0
 8004bee:	b911      	cbnz	r1, 8004bf6 <sbrk_aligned+0x12>
 8004bf0:	f000 f8bc 	bl	8004d6c <_sbrk_r>
 8004bf4:	6030      	str	r0, [r6, #0]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 f8b7 	bl	8004d6c <_sbrk_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d00a      	beq.n	8004c18 <sbrk_aligned+0x34>
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d007      	beq.n	8004c1c <sbrk_aligned+0x38>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 f8ac 	bl	8004d6c <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d101      	bne.n	8004c1c <sbrk_aligned+0x38>
 8004c18:	f04f 34ff 	mov.w	r4, #4294967295
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	240001a4 	.word	0x240001a4

08004c24 <_malloc_r>:
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	1ccd      	adds	r5, r1, #3
 8004c2a:	f025 0503 	bic.w	r5, r5, #3
 8004c2e:	3508      	adds	r5, #8
 8004c30:	2d0c      	cmp	r5, #12
 8004c32:	bf38      	it	cc
 8004c34:	250c      	movcc	r5, #12
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	4607      	mov	r7, r0
 8004c3a:	db01      	blt.n	8004c40 <_malloc_r+0x1c>
 8004c3c:	42a9      	cmp	r1, r5
 8004c3e:	d905      	bls.n	8004c4c <_malloc_r+0x28>
 8004c40:	230c      	movs	r3, #12
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	2600      	movs	r6, #0
 8004c46:	4630      	mov	r0, r6
 8004c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c4c:	4e2e      	ldr	r6, [pc, #184]	; (8004d08 <_malloc_r+0xe4>)
 8004c4e:	f000 f89d 	bl	8004d8c <__malloc_lock>
 8004c52:	6833      	ldr	r3, [r6, #0]
 8004c54:	461c      	mov	r4, r3
 8004c56:	bb34      	cbnz	r4, 8004ca6 <_malloc_r+0x82>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	f7ff ffc2 	bl	8004be4 <sbrk_aligned>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	4604      	mov	r4, r0
 8004c64:	d14d      	bne.n	8004d02 <_malloc_r+0xde>
 8004c66:	6834      	ldr	r4, [r6, #0]
 8004c68:	4626      	mov	r6, r4
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	d140      	bne.n	8004cf0 <_malloc_r+0xcc>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	4631      	mov	r1, r6
 8004c72:	4638      	mov	r0, r7
 8004c74:	eb04 0803 	add.w	r8, r4, r3
 8004c78:	f000 f878 	bl	8004d6c <_sbrk_r>
 8004c7c:	4580      	cmp	r8, r0
 8004c7e:	d13a      	bne.n	8004cf6 <_malloc_r+0xd2>
 8004c80:	6821      	ldr	r1, [r4, #0]
 8004c82:	3503      	adds	r5, #3
 8004c84:	1a6d      	subs	r5, r5, r1
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	4629      	mov	r1, r5
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ffa5 	bl	8004be4 <sbrk_aligned>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d02b      	beq.n	8004cf6 <_malloc_r+0xd2>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	442b      	add	r3, r5
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	e00e      	b.n	8004cc4 <_malloc_r+0xa0>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	1b52      	subs	r2, r2, r5
 8004caa:	d41e      	bmi.n	8004cea <_malloc_r+0xc6>
 8004cac:	2a0b      	cmp	r2, #11
 8004cae:	d916      	bls.n	8004cde <_malloc_r+0xba>
 8004cb0:	1961      	adds	r1, r4, r5
 8004cb2:	42a3      	cmp	r3, r4
 8004cb4:	6025      	str	r5, [r4, #0]
 8004cb6:	bf18      	it	ne
 8004cb8:	6059      	strne	r1, [r3, #4]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	bf08      	it	eq
 8004cbe:	6031      	streq	r1, [r6, #0]
 8004cc0:	5162      	str	r2, [r4, r5]
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f104 060b 	add.w	r6, r4, #11
 8004cca:	f000 f865 	bl	8004d98 <__malloc_unlock>
 8004cce:	f026 0607 	bic.w	r6, r6, #7
 8004cd2:	1d23      	adds	r3, r4, #4
 8004cd4:	1af2      	subs	r2, r6, r3
 8004cd6:	d0b6      	beq.n	8004c46 <_malloc_r+0x22>
 8004cd8:	1b9b      	subs	r3, r3, r6
 8004cda:	50a3      	str	r3, [r4, r2]
 8004cdc:	e7b3      	b.n	8004c46 <_malloc_r+0x22>
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	bf0c      	ite	eq
 8004ce4:	6032      	streq	r2, [r6, #0]
 8004ce6:	605a      	strne	r2, [r3, #4]
 8004ce8:	e7ec      	b.n	8004cc4 <_malloc_r+0xa0>
 8004cea:	4623      	mov	r3, r4
 8004cec:	6864      	ldr	r4, [r4, #4]
 8004cee:	e7b2      	b.n	8004c56 <_malloc_r+0x32>
 8004cf0:	4634      	mov	r4, r6
 8004cf2:	6876      	ldr	r6, [r6, #4]
 8004cf4:	e7b9      	b.n	8004c6a <_malloc_r+0x46>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f000 f84c 	bl	8004d98 <__malloc_unlock>
 8004d00:	e7a1      	b.n	8004c46 <_malloc_r+0x22>
 8004d02:	6025      	str	r5, [r4, #0]
 8004d04:	e7de      	b.n	8004cc4 <_malloc_r+0xa0>
 8004d06:	bf00      	nop
 8004d08:	240001a0 	.word	0x240001a0

08004d0c <_realloc_r>:
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	4680      	mov	r8, r0
 8004d12:	4614      	mov	r4, r2
 8004d14:	460e      	mov	r6, r1
 8004d16:	b921      	cbnz	r1, 8004d22 <_realloc_r+0x16>
 8004d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	f7ff bf81 	b.w	8004c24 <_malloc_r>
 8004d22:	b92a      	cbnz	r2, 8004d30 <_realloc_r+0x24>
 8004d24:	f7ff ff12 	bl	8004b4c <_free_r>
 8004d28:	4625      	mov	r5, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d30:	f000 f838 	bl	8004da4 <_malloc_usable_size_r>
 8004d34:	4284      	cmp	r4, r0
 8004d36:	4607      	mov	r7, r0
 8004d38:	d802      	bhi.n	8004d40 <_realloc_r+0x34>
 8004d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d3e:	d812      	bhi.n	8004d66 <_realloc_r+0x5a>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff ff6e 	bl	8004c24 <_malloc_r>
 8004d48:	4605      	mov	r5, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0ed      	beq.n	8004d2a <_realloc_r+0x1e>
 8004d4e:	42bc      	cmp	r4, r7
 8004d50:	4622      	mov	r2, r4
 8004d52:	4631      	mov	r1, r6
 8004d54:	bf28      	it	cs
 8004d56:	463a      	movcs	r2, r7
 8004d58:	f7ff fbb8 	bl	80044cc <memcpy>
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f7ff fef4 	bl	8004b4c <_free_r>
 8004d64:	e7e1      	b.n	8004d2a <_realloc_r+0x1e>
 8004d66:	4635      	mov	r5, r6
 8004d68:	e7df      	b.n	8004d2a <_realloc_r+0x1e>
	...

08004d6c <_sbrk_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	; (8004d88 <_sbrk_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f7fb fd62 	bl	8000840 <_sbrk>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_sbrk_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_sbrk_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	240001a8 	.word	0x240001a8

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	; (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f000 b811 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	240001ac 	.word	0x240001ac

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f000 b80c 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	240001ac 	.word	0x240001ac

08004da4 <_malloc_usable_size_r>:
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f18      	subs	r0, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbc      	itt	lt
 8004dae:	580b      	ldrlt	r3, [r1, r0]
 8004db0:	18c0      	addlt	r0, r0, r3
 8004db2:	4770      	bx	lr

08004db4 <__retarget_lock_acquire_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_release_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
