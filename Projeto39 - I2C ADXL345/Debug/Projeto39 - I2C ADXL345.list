
Projeto39 - I2C ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000360c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ac  080037ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b4  080037b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006dc3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011f7  00000000  00000000  00026dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00027ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  000286c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f319  00000000  00000000  00028d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008576  00000000  00000000  00048031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be8ee  00000000  00000000  000505a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ee95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c8c  00000000  00000000  0010eee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800377c 	.word	0x0800377c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800377c 	.word	0x0800377c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 face 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f870 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 f8fa 	bl	8000d3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b48:	f000 f8ca 	bl	8000ce0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  adxl_init();
 8000b4c:	f000 f946 	bl	8000ddc <adxl_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  adxl_read_values(DATA_X0_REGISTER, adxl_data.data_register);
 8000b50:	492f      	ldr	r1, [pc, #188]	; (8000c10 <main+0xd8>)
 8000b52:	2032      	movs	r0, #50	; 0x32
 8000b54:	f000 f9ac 	bl	8000eb0 <adxl_read_values>

	  adxl_data.data_readed_register.x = little_endian_2_bytes(&adxl_data.data_register[0]);
 8000b58:	482d      	ldr	r0, [pc, #180]	; (8000c10 <main+0xd8>)
 8000b5a:	f000 f9c7 	bl	8000eec <little_endian_2_bytes>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <main+0xdc>)
 8000b64:	811a      	strh	r2, [r3, #8]
	  adxl_data.data_readed_register.y = little_endian_2_bytes(&adxl_data.data_register[2]);
 8000b66:	482c      	ldr	r0, [pc, #176]	; (8000c18 <main+0xe0>)
 8000b68:	f000 f9c0 	bl	8000eec <little_endian_2_bytes>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <main+0xdc>)
 8000b72:	815a      	strh	r2, [r3, #10]
	  adxl_data.data_readed_register.z = little_endian_2_bytes(&adxl_data.data_register[4]);
 8000b74:	4829      	ldr	r0, [pc, #164]	; (8000c1c <main+0xe4>)
 8000b76:	f000 f9b9 	bl	8000eec <little_endian_2_bytes>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <main+0xdc>)
 8000b80:	819a      	strh	r2, [r3, #12]

	  adxl_data.data_converted_g.x = ADXL_CONVERT_REGISTER_DATA(adxl_data.data_readed_register.x);
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <main+0xdc>)
 8000b84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd99 	bl	80006c0 <__aeabi_i2d>
 8000b8e:	a31e      	add	r3, pc, #120	; (adr r3, 8000c08 <main+0xd0>)
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	f7ff fb18 	bl	80001c8 <__aeabi_dmul>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff fdf8 	bl	8000794 <__aeabi_d2f>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <main+0xdc>)
 8000ba8:	6113      	str	r3, [r2, #16]
	  adxl_data.data_converted_g.y = ADXL_CONVERT_REGISTER_DATA(adxl_data.data_readed_register.y);
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <main+0xdc>)
 8000bac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd85 	bl	80006c0 <__aeabi_i2d>
 8000bb6:	a314      	add	r3, pc, #80	; (adr r3, 8000c08 <main+0xd0>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fb04 	bl	80001c8 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff fde4 	bl	8000794 <__aeabi_d2f>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <main+0xdc>)
 8000bd0:	6153      	str	r3, [r2, #20]
	  adxl_data.data_converted_g.z = ADXL_CONVERT_REGISTER_DATA(adxl_data.data_readed_register.z);
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <main+0xdc>)
 8000bd4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fd71 	bl	80006c0 <__aeabi_i2d>
 8000bde:	a30a      	add	r3, pc, #40	; (adr r3, 8000c08 <main+0xd0>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff faf0 	bl	80001c8 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff fdd0 	bl	8000794 <__aeabi_d2f>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <main+0xdc>)
 8000bf8:	6193      	str	r3, [r2, #24]

	  loopCont++;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <main+0xe8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <main+0xe8>)
 8000c02:	6013      	str	r3, [r2, #0]
	  adxl_read_values(DATA_X0_REGISTER, adxl_data.data_register);
 8000c04:	e7a4      	b.n	8000b50 <main+0x18>
 8000c06:	bf00      	nop
 8000c08:	8e8a71de 	.word	0x8e8a71de
 8000c0c:	3f7ff2e4 	.word	0x3f7ff2e4
 8000c10:	20000081 	.word	0x20000081
 8000c14:	20000080 	.word	0x20000080
 8000c18:	20000083 	.word	0x20000083
 8000c1c:	20000085 	.word	0x20000085
 8000c20:	2000007c 	.word	0x2000007c

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	2230      	movs	r2, #48	; 0x30
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fd9a 	bl	800376c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <SystemClock_Config+0xb4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <SystemClock_Config+0xb4>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <SystemClock_Config+0xb4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <SystemClock_Config+0xb8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <SystemClock_Config+0xb8>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <SystemClock_Config+0xb8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f901 	bl	8002e9c <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ca0:	f000 f93a 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 fb64 	bl	800338c <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cca:	f000 f925 	bl	8000f18 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	; 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_I2C1_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x58>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d1e:	f000 fceb 	bl	80016f8 <HAL_I2C_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 f8f6 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000028 	.word	0x20000028
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_GPIO_Init+0x98>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <MX_GPIO_Init+0x9c>)
 8000dac:	f000 fc8a 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_GPIO_Init+0x9c>)
 8000dc8:	f000 fae0 	bl	800138c <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <adxl_init>:

/**
 * Inicializa o ADXL345
 */
void adxl_init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, ADXL345_ADDRESS_WRITE, 2, 10) != HAL_OK)
 8000de0:	230a      	movs	r3, #10
 8000de2:	2202      	movs	r2, #2
 8000de4:	21a6      	movs	r1, #166	; 0xa6
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <adxl_init+0x40>)
 8000de8:	f001 fb14 	bl	8002414 <HAL_I2C_IsDeviceReady>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <adxl_init+0x1a>
		Error_Handler();
 8000df2:	f000 f891 	bl	8000f18 <Error_Handler>

	adxl_write_byte(DATA_POWER_CTRL_REGISTER, 0x00);
 8000df6:	2100      	movs	r1, #0
 8000df8:	202d      	movs	r0, #45	; 0x2d
 8000dfa:	f000 f813 	bl	8000e24 <adxl_write_byte>
	adxl_write_byte(DATA_POWER_CTRL_REGISTER, 0x08);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	202d      	movs	r0, #45	; 0x2d
 8000e02:	f000 f80f 	bl	8000e24 <adxl_write_byte>
	adxl_write_byte(DATA_FORMAT_REGISTER, 0x01);
 8000e06:	2101      	movs	r1, #1
 8000e08:	2031      	movs	r0, #49	; 0x31
 8000e0a:	f000 f80b 	bl	8000e24 <adxl_write_byte>

	adxl_read_byte(DATA_DEVID_REGISTER, &adxl_data.device_id);
 8000e0e:	4904      	ldr	r1, [pc, #16]	; (8000e20 <adxl_init+0x44>)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 f827 	bl	8000e64 <adxl_read_byte>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000028 	.word	0x20000028
 8000e20:	20000080 	.word	0x20000080

08000e24 <adxl_write_byte>:

/**
 * Escreve um byte no ADXL345 dado o registrador
 */
void adxl_write_byte(uint8_t reg, uint8_t data)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	uint8_t data_write[2] = {reg, data};
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	733b      	strb	r3, [r7, #12]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS_WRITE, data_write, sizeof(data_write), 100) != HAL_OK)
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	2364      	movs	r3, #100	; 0x64
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2302      	movs	r3, #2
 8000e46:	21a6      	movs	r1, #166	; 0xa6
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <adxl_write_byte+0x3c>)
 8000e4a:	f000 fd99 	bl	8001980 <HAL_I2C_Master_Transmit>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <adxl_write_byte+0x34>
		Error_Handler();
 8000e54:	f000 f860 	bl	8000f18 <Error_Handler>
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000028 	.word	0x20000028

08000e64 <adxl_read_byte>:

/**
 * Lê um byte no ADXL345 dado o registrador
 */
void adxl_read_byte(uint8_t reg, uint8_t *data_readed)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS_WRITE, &reg, sizeof(reg), 100) != HAL_OK)
 8000e70:	1dfa      	adds	r2, r7, #7
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	21a6      	movs	r1, #166	; 0xa6
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <adxl_read_byte+0x48>)
 8000e7c:	f000 fd80 	bl	8001980 <HAL_I2C_Master_Transmit>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <adxl_read_byte+0x26>
		Error_Handler();
 8000e86:	f000 f847 	bl	8000f18 <Error_Handler>

	if(HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS_READ, data_readed, sizeof(data_readed), 100) != HAL_OK)
 8000e8a:	2364      	movs	r3, #100	; 0x64
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2304      	movs	r3, #4
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	21a7      	movs	r1, #167	; 0xa7
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <adxl_read_byte+0x48>)
 8000e96:	f000 fe71 	bl	8001b7c <HAL_I2C_Master_Receive>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <adxl_read_byte+0x40>
		Error_Handler();
 8000ea0:	f000 f83a 	bl	8000f18 <Error_Handler>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000028 	.word	0x20000028

08000eb0 <adxl_read_values>:

/**
 * Lê os valores dos eixos no ADXL345 dado o registrador inicial
 */
void adxl_read_values (uint8_t reg, uint8_t *data_rec)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDRESS_WRITE, reg, 1, data_rec, 6, 100) != HAL_OK)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	2364      	movs	r3, #100	; 0x64
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2306      	movs	r3, #6
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	21a6      	movs	r1, #166	; 0xa6
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <adxl_read_values+0x38>)
 8000ed2:	f001 f879 	bl	8001fc8 <HAL_I2C_Mem_Read>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <adxl_read_values+0x30>
		Error_Handler();
 8000edc:	f000 f81c 	bl	8000f18 <Error_Handler>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000028 	.word	0x20000028

08000eec <little_endian_2_bytes>:

/**
 * Converte um dado little endian de 2 bytes
 */
uint16_t little_endian_2_bytes(uint8_t *data)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return ((data[1]<<8) | data[0]);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	b29b      	uxth	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <Error_Handler+0x14>)
 8000f22:	f000 fbcf 	bl	80016c4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f26:	b672      	cpsid	i
}
 8000f28:	bf00      	nop
  __disable_irq();
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <Error_Handler+0x12>
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_I2C_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12b      	bne.n	8000ffa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <HAL_I2C_MspInit+0x8c>)
 8000fda:	f000 f9d7 	bl	800138c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40005400 	.word	0x40005400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020400 	.word	0x40020400

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f890 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a4:	4c0b      	ldr	r4, [pc, #44]	; (80010d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b2:	f7ff ffd7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 fb35 	bl	8003724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fd3d 	bl	8000b38 <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010cc:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 80010d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d4:	200000a0 	.word	0x200000a0

080010d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f90d 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff ff0e 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f917 	bl	8001372 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f8ed 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	2000009c 	.word	0x2000009c

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000009c 	.word	0x2000009c

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff47 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5c 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e16b      	b.n	8001680 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 815a 	bne.w	800167a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80b4 	beq.w	800167a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_GPIO_Init+0x30c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <HAL_GPIO_Init+0x30c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_GPIO_Init+0x310>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_GPIO_Init+0x314>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x318>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <HAL_GPIO_Init+0x31c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x320>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_GPIO_Init+0x324>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x328>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x32c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_GPIO_Init+0x330>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x20a>
 8001592:	2307      	movs	r3, #7
 8001594:	e00e      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 8001596:	2308      	movs	r3, #8
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159a:	2306      	movs	r3, #6
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_GPIO_Init+0x310>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_GPIO_Init+0x334>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_GPIO_Init+0x334>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_GPIO_Init+0x334>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae90 	bls.w	80013a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40021c00 	.word	0x40021c00
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e12b      	b.n	8001962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fc2e 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800174a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800175c:	f001 ffce 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8001760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a81      	ldr	r2, [pc, #516]	; (800196c <HAL_I2C_Init+0x274>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d807      	bhi.n	800177c <HAL_I2C_Init+0x84>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_I2C_Init+0x278>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e006      	b.n	800178a <HAL_I2C_Init+0x92>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a7d      	ldr	r2, [pc, #500]	; (8001974 <HAL_I2C_Init+0x27c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0e7      	b.n	8001962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a78      	ldr	r2, [pc, #480]	; (8001978 <HAL_I2C_Init+0x280>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <HAL_I2C_Init+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d802      	bhi.n	80017cc <HAL_I2C_Init+0xd4>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e009      	b.n	80017e0 <HAL_I2C_Init+0xe8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a69      	ldr	r2, [pc, #420]	; (800197c <HAL_I2C_Init+0x284>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	495c      	ldr	r1, [pc, #368]	; (800196c <HAL_I2C_Init+0x274>)
 80017fc:	428b      	cmp	r3, r1
 80017fe:	d819      	bhi.n	8001834 <HAL_I2C_Init+0x13c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e59      	subs	r1, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb1 f3f3 	udiv	r3, r1, r3
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001814:	400b      	ands	r3, r1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <HAL_I2C_Init+0x138>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e59      	subs	r1, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182e:	e051      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001830:	2304      	movs	r3, #4
 8001832:	e04f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_I2C_Init+0x168>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e012      	b.n	8001886 <HAL_I2C_Init+0x18e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Init+0x196>
 800188a:	2301      	movs	r3, #1
 800188c:	e022      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <HAL_I2C_Init+0x1bc>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e58      	subs	r0, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	440b      	add	r3, r1
 80018a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	e00f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6911      	ldr	r1, [r2, #16]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68d2      	ldr	r2, [r2, #12]
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	000186a0 	.word	0x000186a0
 8001970:	001e847f 	.word	0x001e847f
 8001974:	003d08ff 	.word	0x003d08ff
 8001978:	431bde83 	.word	0x431bde83
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	461a      	mov	r2, r3
 800198c:	460b      	mov	r3, r1
 800198e:	817b      	strh	r3, [r7, #10]
 8001990:	4613      	mov	r3, r2
 8001992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fc08 	bl	80011a8 <HAL_GetTick>
 8001998:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	f040 80e0 	bne.w	8001b68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2319      	movs	r3, #25
 80019ae:	2201      	movs	r2, #1
 80019b0:	4970      	ldr	r1, [pc, #448]	; (8001b74 <HAL_I2C_Master_Transmit+0x1f4>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f001 f894 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
 80019c0:	e0d3      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x50>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e0cc      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d007      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2221      	movs	r2, #33	; 0x21
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2210      	movs	r2, #16
 8001a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a38:	8979      	ldrh	r1, [r7, #10]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	6a3a      	ldr	r2, [r7, #32]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fe16 	bl	8002670 <I2C_MasterRequestWrite>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e08d      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a64:	e066      	b.n	8001b34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	6a39      	ldr	r1, [r7, #32]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f001 f90e 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d107      	bne.n	8001a8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06b      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d11b      	bne.n	8001b08 <HAL_I2C_Master_Transmit+0x188>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d017      	beq.n	8001b08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	6a39      	ldr	r1, [r7, #32]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f001 f8fe 	bl	8002d0e <I2C_WaitOnBTFFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d107      	bne.n	8001b30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e01a      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d194      	bne.n	8001a66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	00100002 	.word	0x00100002
 8001b78:	ffff0000 	.word	0xffff0000

08001b7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	461a      	mov	r2, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	817b      	strh	r3, [r7, #10]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fb0a 	bl	80011a8 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	f040 820b 	bne.w	8001fba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2319      	movs	r3, #25
 8001baa:	2201      	movs	r2, #1
 8001bac:	497c      	ldr	r1, [pc, #496]	; (8001da0 <HAL_I2C_Master_Receive+0x224>)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 ff96 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e1fe      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2C_Master_Receive+0x50>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e1f7      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d007      	beq.n	8001bf2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2222      	movs	r2, #34	; 0x22
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	893a      	ldrh	r2, [r7, #8]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a5c      	ldr	r2, [pc, #368]	; (8001da4 <HAL_I2C_Master_Receive+0x228>)
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c34:	8979      	ldrh	r1, [r7, #10]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fd9a 	bl	8002774 <I2C_MasterRequestRead>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1b8      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d113      	bne.n	8001c7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e18c      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d11b      	bne.n	8001cba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e16c      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	e14c      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d20:	e138      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	f200 80f1 	bhi.w	8001f0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d123      	bne.n	8001d7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f001 f829 	bl	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e139      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d7a:	e10b      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d14e      	bne.n	8001e22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4906      	ldr	r1, [pc, #24]	; (8001da8 <HAL_I2C_Master_Receive+0x22c>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fea6 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e10e      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
 8001d9e:	bf00      	nop
 8001da0:	00100002 	.word	0x00100002
 8001da4:	ffff0000 	.word	0xffff0000
 8001da8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e20:	e0b8      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4966      	ldr	r1, [pc, #408]	; (8001fc4 <HAL_I2C_Master_Receive+0x448>)
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fe57 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0bf      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	2200      	movs	r2, #0
 8001e86:	494f      	ldr	r1, [pc, #316]	; (8001fc4 <HAL_I2C_Master_Receive+0x448>)
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fe29 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e091      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f0c:	e042      	b.n	8001f94 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 ff3c 	bl	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e04c      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d118      	bne.n	8001f94 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f47f aec2 	bne.w	8001d22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	00010004 	.word	0x00010004

08001fc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	817b      	strh	r3, [r7, #10]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	813b      	strh	r3, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe2:	f7ff f8e1 	bl	80011a8 <HAL_GetTick>
 8001fe6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	f040 8208 	bne.w	8002406 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2319      	movs	r3, #25
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	497b      	ldr	r1, [pc, #492]	; (80021ec <HAL_I2C_Mem_Read+0x224>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fd6d 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
 800200e:	e1fb      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_I2C_Mem_Read+0x56>
 800201a:	2302      	movs	r3, #2
 800201c:	e1f4      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d007      	beq.n	8002044 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2222      	movs	r2, #34	; 0x22
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2240      	movs	r2, #64	; 0x40
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_I2C_Mem_Read+0x228>)
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002086:	88f8      	ldrh	r0, [r7, #6]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fc3a 	bl	8002910 <I2C_RequestMemoryRead>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1b0      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d113      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e184      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d11b      	bne.n	8002116 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e164      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	2b02      	cmp	r3, #2
 800211c:	d11b      	bne.n	8002156 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	e144      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800216c:	e138      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	2b03      	cmp	r3, #3
 8002174:	f200 80f1 	bhi.w	800235a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	2b01      	cmp	r3, #1
 800217e:	d123      	bne.n	80021c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fe03 	bl	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e139      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021c6:	e10b      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d14e      	bne.n	800226e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	2200      	movs	r2, #0
 80021d8:	4906      	ldr	r1, [pc, #24]	; (80021f4 <HAL_I2C_Mem_Read+0x22c>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fc80 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e10e      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
 80021ea:	bf00      	nop
 80021ec:	00100002 	.word	0x00100002
 80021f0:	ffff0000 	.word	0xffff0000
 80021f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800226c:	e0b8      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	2200      	movs	r2, #0
 8002276:	4966      	ldr	r1, [pc, #408]	; (8002410 <HAL_I2C_Mem_Read+0x448>)
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fc31 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0bf      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	2200      	movs	r2, #0
 80022d2:	494f      	ldr	r1, [pc, #316]	; (8002410 <HAL_I2C_Mem_Read+0x448>)
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fc03 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e091      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002358:	e042      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fd16 	bl	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e04c      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d118      	bne.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f aec2 	bne.w	800216e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010004 	.word	0x00010004

08002414 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	460b      	mov	r3, r1
 8002422:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7fe fec0 	bl	80011a8 <HAL_GetTick>
 8002428:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 8111 	bne.w	800265e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2319      	movs	r3, #25
 8002442:	2201      	movs	r2, #1
 8002444:	4988      	ldr	r1, [pc, #544]	; (8002668 <HAL_I2C_IsDeviceReady+0x254>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fb4a 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	e104      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_I2C_IsDeviceReady+0x50>
 8002460:	2302      	movs	r3, #2
 8002462:	e0fd      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d007      	beq.n	800248a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2224      	movs	r2, #36	; 0x24
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a70      	ldr	r2, [pc, #448]	; (800266c <HAL_I2C_IsDeviceReady+0x258>)
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fb08 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e4:	d103      	bne.n	80024ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0b6      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002500:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002502:	f7fe fe51 	bl	80011a8 <HAL_GetTick>
 8002506:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002536:	e025      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe fe36 	bl	80011a8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <HAL_I2C_IsDeviceReady+0x13a>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	22a0      	movs	r2, #160	; 0xa0
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2ba0      	cmp	r3, #160	; 0xa0
 800258e:	d005      	beq.n	800259c <HAL_I2C_IsDeviceReady+0x188>
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_I2C_IsDeviceReady+0x188>
 8002596:	7dbb      	ldrb	r3, [r7, #22]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0cd      	beq.n	8002538 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d129      	bne.n	8002606 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	4921      	ldr	r1, [pc, #132]	; (8002668 <HAL_I2C_IsDeviceReady+0x254>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fa7c 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e036      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e02c      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002614:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800261e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2319      	movs	r3, #25
 8002626:	2201      	movs	r2, #1
 8002628:	490f      	ldr	r1, [pc, #60]	; (8002668 <HAL_I2C_IsDeviceReady+0x254>)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fa58 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e012      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3301      	adds	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	f4ff af32 	bcc.w	80024ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	00100002 	.word	0x00100002
 800266c:	ffff0000 	.word	0xffff0000

08002670 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	460b      	mov	r3, r1
 800267e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d006      	beq.n	800269a <I2C_MasterRequestWrite+0x2a>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <I2C_MasterRequestWrite+0x2a>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002698:	d108      	bne.n	80026ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e00b      	b.n	80026c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d107      	bne.n	80026c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fa05 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ea:	d103      	bne.n	80026f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e035      	b.n	8002764 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002700:	d108      	bne.n	8002714 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002710:	611a      	str	r2, [r3, #16]
 8002712:	e01b      	b.n	800274c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	11db      	asrs	r3, r3, #7
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0306 	and.w	r3, r3, #6
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f063 030f 	orn	r3, r3, #15
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	490e      	ldr	r1, [pc, #56]	; (800276c <I2C_MasterRequestWrite+0xfc>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fa2b 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e010      	b.n	8002764 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4907      	ldr	r1, [pc, #28]	; (8002770 <I2C_MasterRequestWrite+0x100>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa1b 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	00010008 	.word	0x00010008
 8002770:	00010002 	.word	0x00010002

08002774 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002798:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d006      	beq.n	80027ae <I2C_MasterRequestRead+0x3a>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d003      	beq.n	80027ae <I2C_MasterRequestRead+0x3a>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ac:	d108      	bne.n	80027c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e00b      	b.n	80027d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b11      	cmp	r3, #17
 80027c6:	d107      	bne.n	80027d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f97b 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00d      	beq.n	800280c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fe:	d103      	bne.n	8002808 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e079      	b.n	8002900 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002814:	d108      	bne.n	8002828 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	e05f      	b.n	80028e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002828:	897b      	ldrh	r3, [r7, #10]
 800282a:	11db      	asrs	r3, r3, #7
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 0306 	and.w	r3, r3, #6
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f063 030f 	orn	r3, r3, #15
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4930      	ldr	r1, [pc, #192]	; (8002908 <I2C_MasterRequestRead+0x194>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f9a1 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e054      	b.n	8002900 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4929      	ldr	r1, [pc, #164]	; (800290c <I2C_MasterRequestRead+0x198>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f991 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e044      	b.n	8002900 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f919 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c2:	d103      	bne.n	80028cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e017      	b.n	8002900 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	11db      	asrs	r3, r3, #7
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0306 	and.w	r3, r3, #6
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f063 030e 	orn	r3, r3, #14
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <I2C_MasterRequestRead+0x198>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f94d 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00010008 	.word	0x00010008
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	4608      	mov	r0, r1
 800291a:	4611      	mov	r1, r2
 800291c:	461a      	mov	r2, r3
 800291e:	4603      	mov	r3, r0
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	460b      	mov	r3, r1
 8002924:	813b      	strh	r3, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002938:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2200      	movs	r2, #0
 8002952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f8c2 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002970:	d103      	bne.n	800297a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0aa      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800298c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	4952      	ldr	r1, [pc, #328]	; (8002adc <I2C_RequestMemoryRead+0x1cc>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f8fa 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e097      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	6a39      	ldr	r1, [r7, #32]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f964 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d107      	bne.n	80029e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e076      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	e021      	b.n	8002a3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029f8:	893b      	ldrh	r3, [r7, #8]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f93e 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e050      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a32:	893b      	ldrh	r3, [r7, #8]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f923 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e035      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f82b 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d103      	bne.n	8002aa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e013      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aac:	897b      	ldrh	r3, [r7, #10]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	4906      	ldr	r1, [pc, #24]	; (8002adc <I2C_RequestMemoryRead+0x1cc>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f863 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	00010002 	.word	0x00010002

08002ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	e025      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d021      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe fb55 	bl	80011a8 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e023      	b.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10d      	bne.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	e00c      	b.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d0b6      	beq.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9c:	e051      	b.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d123      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e046      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d021      	beq.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7fe fad3 	bl	80011a8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e020      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e00b      	b.n	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d18d      	bne.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c98:	e02d      	b.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8ce 	bl	8002e3c <I2C_IsAcknowledgeFailed>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02d      	b.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d021      	beq.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe fa79 	bl	80011a8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d116      	bne.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e007      	b.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d1ca      	bne.n	8002c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d1a:	e02d      	b.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f88d 	bl	8002e3c <I2C_IsAcknowledgeFailed>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e02d      	b.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d021      	beq.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d34:	f7fe fa38 	bl	80011a8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d302      	bcc.n	8002d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e007      	b.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d1ca      	bne.n	8002d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d9c:	e042      	b.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d119      	bne.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0210 	mvn.w	r2, #16
 8002db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e029      	b.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe f9e2 	bl	80011a8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e007      	b.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d1b5      	bne.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d11b      	bne.n	8002e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e267      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d075      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d112      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	4b7e      	ldr	r3, [pc, #504]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05b      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x108>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d157      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e242      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x74>
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a75      	ldr	r2, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xb0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x98>
 8002f1a:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6f      	ldr	r2, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6c      	ldr	r2, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xb0>
 8002f34:	4b69      	ldr	r3, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a68      	ldr	r2, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b66      	ldr	r3, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a65      	ldr	r2, [pc, #404]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe f928 	bl	80011a8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe f924 	bl	80011a8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e207      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xc0>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f914 	bl	80011a8 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe f910 	bl	80011a8 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1f3      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b51      	ldr	r3, [pc, #324]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0xe8>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x152>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1c7      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4937      	ldr	r1, [pc, #220]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	e03a      	b.n	800307a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCC_OscConfig+0x244>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe f8c9 	bl	80011a8 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe f8c5 	bl	80011a8 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1a8      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4925      	ldr	r1, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x244>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f8a8 	bl	80011a8 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe f8a4 	bl	80011a8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e187      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d036      	beq.n	80030f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x248>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe f888 	bl	80011a8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe f884 	bl	80011a8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e167      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x200>
 80030ba:	e01b      	b.n	80030f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x248>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe f871 	bl	80011a8 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e00e      	b.n	80030e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe f86d 	bl	80011a8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d907      	bls.n	80030e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e150      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	42470000 	.word	0x42470000
 80030e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ea      	bne.n	80030ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8097 	beq.w	8003230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b81      	ldr	r3, [pc, #516]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a7c      	ldr	r2, [pc, #496]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b7a      	ldr	r3, [pc, #488]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b77      	ldr	r3, [pc, #476]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d118      	bne.n	8003170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313e:	4b74      	ldr	r3, [pc, #464]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a73      	ldr	r2, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fe f82d 	bl	80011a8 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fe f829 	bl	80011a8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e10c      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x2ea>
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a63      	ldr	r2, [pc, #396]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0x324>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x30c>
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a5e      	ldr	r2, [pc, #376]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0x324>
 80031a8:	4b58      	ldr	r3, [pc, #352]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031ba:	f023 0304 	bic.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd ffee 	bl	80011a8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fd ffea 	bl	80011a8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0cb      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ee      	beq.n	80031d0 <HAL_RCC_OscConfig+0x334>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f4:	f7fd ffd8 	bl	80011a8 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd ffd4 	bl	80011a8 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0b5      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ee      	bne.n	80031fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	4a38      	ldr	r2, [pc, #224]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a1 	beq.w	800337c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800323a:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b08      	cmp	r3, #8
 8003244:	d05c      	beq.n	8003300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d141      	bne.n	80032d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fd ffa8 	bl	80011a8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325c:	f7fd ffa4 	bl	80011a8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e087      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	491b      	ldr	r1, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fd ff7d 	bl	80011a8 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fd ff79 	bl	80011a8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e05c      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x416>
 80032d0:	e054      	b.n	800337c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff66 	bl	80011a8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fd ff62 	bl	80011a8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e045      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x444>
 80032fe:	e03d      	b.n	800337c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e038      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000
 8003314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x4ec>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d028      	beq.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d121      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11a      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003348:	4013      	ands	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003350:	4293      	cmp	r3, r2
 8003352:	d111      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	3b01      	subs	r3, #1
 8003362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0cc      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d90c      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0b8      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a52      	ldr	r2, [pc, #328]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	494d      	ldr	r1, [pc, #308]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d044      	beq.n	80034ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d119      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d003      	beq.n	800344a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	2b03      	cmp	r3, #3
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e067      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4934      	ldr	r1, [pc, #208]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347c:	f7fd fe94 	bl	80011a8 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fd fe90 	bl	80011a8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e04f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d20c      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e032      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4916      	ldr	r1, [pc, #88]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	490e      	ldr	r1, [pc, #56]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003512:	f000 f821 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003516:	4602      	mov	r2, r0
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	490a      	ldr	r1, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fdf4 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023c00 	.word	0x40023c00
 8003548:	40023800 	.word	0x40023800
 800354c:	08003794 	.word	0x08003794
 8003550:	20000000 	.word	0x20000000
 8003554:	20000004 	.word	0x20000004

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b090      	sub	sp, #64	; 0x40
 800355e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	2300      	movs	r3, #0
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d00d      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x40>
 800357c:	2b08      	cmp	r3, #8
 800357e:	f200 80a1 	bhi.w	80036c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x34>
 8003586:	2b04      	cmp	r3, #4
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x3a>
 800358a:	e09b      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_RCC_GetSysClockFreq+0x184>)
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003590:	e09b      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003592:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003596:	e098      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a2:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d028      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2200      	movs	r2, #0
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	627a      	str	r2, [r7, #36]	; 0x24
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035c0:	2100      	movs	r1, #0
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035c4:	fb03 f201 	mul.w	r2, r3, r1
 80035c8:	2300      	movs	r3, #0
 80035ca:	fb00 f303 	mul.w	r3, r0, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	4a43      	ldr	r2, [pc, #268]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d2:	fba0 1202 	umull	r1, r2, r0, r2
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d8:	460a      	mov	r2, r1
 80035da:	62ba      	str	r2, [r7, #40]	; 0x28
 80035dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035de:	4413      	add	r3, r2
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	2200      	movs	r2, #0
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	61fa      	str	r2, [r7, #28]
 80035ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035f2:	f7fd f91f 	bl	8000834 <__aeabi_uldivmod>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4613      	mov	r3, r2
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fe:	e053      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	2200      	movs	r2, #0
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	617a      	str	r2, [r7, #20]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003612:	f04f 0b00 	mov.w	fp, #0
 8003616:	4652      	mov	r2, sl
 8003618:	465b      	mov	r3, fp
 800361a:	f04f 0000 	mov.w	r0, #0
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	0159      	lsls	r1, r3, #5
 8003624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003628:	0150      	lsls	r0, r2, #5
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	ebb2 080a 	subs.w	r8, r2, sl
 8003632:	eb63 090b 	sbc.w	r9, r3, fp
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003642:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003646:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800364a:	ebb2 0408 	subs.w	r4, r2, r8
 800364e:	eb63 0509 	sbc.w	r5, r3, r9
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	00eb      	lsls	r3, r5, #3
 800365c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003660:	00e2      	lsls	r2, r4, #3
 8003662:	4614      	mov	r4, r2
 8003664:	461d      	mov	r5, r3
 8003666:	eb14 030a 	adds.w	r3, r4, sl
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	eb45 030b 	adc.w	r3, r5, fp
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800367e:	4629      	mov	r1, r5
 8003680:	028b      	lsls	r3, r1, #10
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003688:	4621      	mov	r1, r4
 800368a:	028a      	lsls	r2, r1, #10
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	2200      	movs	r2, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	60fa      	str	r2, [r7, #12]
 8003698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800369c:	f7fd f8ca 	bl	8000834 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	3301      	adds	r3, #1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetSysClockFreq+0x184>)
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3740      	adds	r7, #64	; 0x40
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	00f42400 	.word	0x00f42400
 80036e0:	017d7840 	.word	0x017d7840

080036e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003700:	f7ff fff0 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0a9b      	lsrs	r3, r3, #10
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	080037a4 	.word	0x080037a4

08003724 <__libc_init_array>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4d0d      	ldr	r5, [pc, #52]	; (800375c <__libc_init_array+0x38>)
 8003728:	4c0d      	ldr	r4, [pc, #52]	; (8003760 <__libc_init_array+0x3c>)
 800372a:	1b64      	subs	r4, r4, r5
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	2600      	movs	r6, #0
 8003730:	42a6      	cmp	r6, r4
 8003732:	d109      	bne.n	8003748 <__libc_init_array+0x24>
 8003734:	4d0b      	ldr	r5, [pc, #44]	; (8003764 <__libc_init_array+0x40>)
 8003736:	4c0c      	ldr	r4, [pc, #48]	; (8003768 <__libc_init_array+0x44>)
 8003738:	f000 f820 	bl	800377c <_init>
 800373c:	1b64      	subs	r4, r4, r5
 800373e:	10a4      	asrs	r4, r4, #2
 8003740:	2600      	movs	r6, #0
 8003742:	42a6      	cmp	r6, r4
 8003744:	d105      	bne.n	8003752 <__libc_init_array+0x2e>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	f855 3b04 	ldr.w	r3, [r5], #4
 800374c:	4798      	blx	r3
 800374e:	3601      	adds	r6, #1
 8003750:	e7ee      	b.n	8003730 <__libc_init_array+0xc>
 8003752:	f855 3b04 	ldr.w	r3, [r5], #4
 8003756:	4798      	blx	r3
 8003758:	3601      	adds	r6, #1
 800375a:	e7f2      	b.n	8003742 <__libc_init_array+0x1e>
 800375c:	080037b4 	.word	0x080037b4
 8003760:	080037b4 	.word	0x080037b4
 8003764:	080037b4 	.word	0x080037b4
 8003768:	080037b8 	.word	0x080037b8

0800376c <memset>:
 800376c:	4402      	add	r2, r0
 800376e:	4603      	mov	r3, r0
 8003770:	4293      	cmp	r3, r2
 8003772:	d100      	bne.n	8003776 <memset+0xa>
 8003774:	4770      	bx	lr
 8003776:	f803 1b01 	strb.w	r1, [r3], #1
 800377a:	e7f9      	b.n	8003770 <memset+0x4>

0800377c <_init>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr

08003788 <_fini>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr
