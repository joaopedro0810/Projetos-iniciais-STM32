
QP - Projeto04 - Eventos dinamicos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800332c  0800332c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000214  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2ec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a0  00000000  00000000  0002a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020323  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae7d  00000000  00000000  0004e54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed4e  00000000  00000000  000593c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118116  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b88  00000000  00000000  00118168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003234 	.word	0x08003234

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003234 	.word	0x08003234

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b974 	b.w	8000ad4 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468e      	mov	lr, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d14d      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000812:	428a      	cmp	r2, r1
 8000814:	4694      	mov	ip, r2
 8000816:	d969      	bls.n	80008ec <__udivmoddi4+0xe8>
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	b152      	cbz	r2, 8000834 <__udivmoddi4+0x30>
 800081e:	fa01 f302 	lsl.w	r3, r1, r2
 8000822:	f1c2 0120 	rsb	r1, r2, #32
 8000826:	fa20 f101 	lsr.w	r1, r0, r1
 800082a:	fa0c fc02 	lsl.w	ip, ip, r2
 800082e:	ea41 0e03 	orr.w	lr, r1, r3
 8000832:	4094      	lsls	r4, r2
 8000834:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000838:	0c21      	lsrs	r1, r4, #16
 800083a:	fbbe f6f8 	udiv	r6, lr, r8
 800083e:	fa1f f78c 	uxth.w	r7, ip
 8000842:	fb08 e316 	mls	r3, r8, r6, lr
 8000846:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800084a:	fb06 f107 	mul.w	r1, r6, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 811f 	bcs.w	8000a9c <__udivmoddi4+0x298>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 811c 	bls.w	8000a9c <__udivmoddi4+0x298>
 8000864:	3e02      	subs	r6, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 f707 	mul.w	r7, r0, r7
 800087c:	42a7      	cmp	r7, r4
 800087e:	d90a      	bls.n	8000896 <__udivmoddi4+0x92>
 8000880:	eb1c 0404 	adds.w	r4, ip, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	f080 810a 	bcs.w	8000aa0 <__udivmoddi4+0x29c>
 800088c:	42a7      	cmp	r7, r4
 800088e:	f240 8107 	bls.w	8000aa0 <__udivmoddi4+0x29c>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800089a:	1be4      	subs	r4, r4, r7
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa4>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xc2>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	f000 80ef 	beq.w	8000a96 <__udivmoddi4+0x292>
 80008b8:	2600      	movs	r6, #0
 80008ba:	e9c5 0100 	strd	r0, r1, [r5]
 80008be:	4630      	mov	r0, r6
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f683 	clz	r6, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d14a      	bne.n	8000964 <__udivmoddi4+0x160>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd4>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80f9 	bhi.w	8000aca <__udivmoddi4+0x2c6>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	469e      	mov	lr, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa4>
 80008e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa4>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xec>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 8092 	bne.w	8000a1e <__udivmoddi4+0x21a>
 80008fa:	eba1 010c 	sub.w	r1, r1, ip
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2601      	movs	r6, #1
 8000908:	0c20      	lsrs	r0, r4, #16
 800090a:	fbb1 f3f7 	udiv	r3, r1, r7
 800090e:	fb07 1113 	mls	r1, r7, r3, r1
 8000912:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000916:	fb0e f003 	mul.w	r0, lr, r3
 800091a:	4288      	cmp	r0, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x12c>
 800091e:	eb1c 0101 	adds.w	r1, ip, r1
 8000922:	f103 38ff 	add.w	r8, r3, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x12a>
 8000928:	4288      	cmp	r0, r1
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2c0>
 800092e:	4643      	mov	r3, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1110 	mls	r1, r7, r0, r1
 800093c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x156>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x154>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2ca>
 8000958:	4608      	mov	r0, r1
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000962:	e79c      	b.n	800089e <__udivmoddi4+0x9a>
 8000964:	f1c6 0720 	rsb	r7, r6, #32
 8000968:	40b3      	lsls	r3, r6
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa20 f407 	lsr.w	r4, r0, r7
 8000976:	fa01 f306 	lsl.w	r3, r1, r6
 800097a:	431c      	orrs	r4, r3
 800097c:	40f9      	lsrs	r1, r7
 800097e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000982:	fa00 f306 	lsl.w	r3, r0, r6
 8000986:	fbb1 f8f9 	udiv	r8, r1, r9
 800098a:	0c20      	lsrs	r0, r4, #16
 800098c:	fa1f fe8c 	uxth.w	lr, ip
 8000990:	fb09 1118 	mls	r1, r9, r8, r1
 8000994:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000998:	fb08 f00e 	mul.w	r0, r8, lr
 800099c:	4288      	cmp	r0, r1
 800099e:	fa02 f206 	lsl.w	r2, r2, r6
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b8>
 80009a4:	eb1c 0101 	adds.w	r1, ip, r1
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4461      	add	r1, ip
 80009bc:	1a09      	subs	r1, r1, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009c4:	fb09 1110 	mls	r1, r9, r0, r1
 80009c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d0:	458e      	cmp	lr, r1
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1e2>
 80009d4:	eb1c 0101 	adds.w	r1, ip, r1
 80009d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2b4>
 80009de:	458e      	cmp	lr, r1
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2b4>
 80009e2:	3802      	subs	r0, #2
 80009e4:	4461      	add	r1, ip
 80009e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ea:	fba0 9402 	umull	r9, r4, r0, r2
 80009ee:	eba1 010e 	sub.w	r1, r1, lr
 80009f2:	42a1      	cmp	r1, r4
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46a6      	mov	lr, r4
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x2a4>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x2a0>
 80009fc:	b15d      	cbz	r5, 8000a16 <__udivmoddi4+0x212>
 80009fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000a02:	eb61 010e 	sbc.w	r1, r1, lr
 8000a06:	fa01 f707 	lsl.w	r7, r1, r7
 8000a0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a0e:	40f1      	lsrs	r1, r6
 8000a10:	431f      	orrs	r7, r3
 8000a12:	e9c5 7100 	strd	r7, r1, [r5]
 8000a16:	2600      	movs	r6, #0
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	f1c2 0320 	rsb	r3, r2, #32
 8000a22:	40d8      	lsrs	r0, r3
 8000a24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a28:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a40:	0c0b      	lsrs	r3, r1, #16
 8000a42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a46:	fb00 f60e 	mul.w	r6, r0, lr
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x260>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b8>
 8000a5c:	429e      	cmp	r6, r3
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b8>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4463      	add	r3, ip
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	b289      	uxth	r1, r1
 8000a68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a74:	fb06 f30e 	mul.w	r3, r6, lr
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x28a>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a8a:	3e02      	subs	r6, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	1ac9      	subs	r1, r1, r3
 8000a90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0x104>
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e705      	b.n	80008a8 <__udivmoddi4+0xa4>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e3      	b.n	8000868 <__udivmoddi4+0x64>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6f8      	b.n	8000896 <__udivmoddi4+0x92>
 8000aa4:	454b      	cmp	r3, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f8>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f8>
 8000ab4:	4646      	mov	r6, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x28a>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1e2>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x260>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b8>
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	4461      	add	r1, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x12c>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e709      	b.n	80008e2 <__udivmoddi4+0xde>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x156>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <SMConsumer_ctor>:
----------------------------------------------------*/
QMActive * const AO_SMConsumer = (QMActive *)&l_consumer; /*

opaque pointer */
void SMConsumer_ctor(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
    SMConsumer *me = &l_consumer;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SMConsumer_ctor+0x1c>)
 8000ae0:	607b      	str	r3, [r7, #4]

    // Construtor. Inicializa e coloca no estado inicial.
    QMActive_ctor(&me->super, Q_STATE_CAST(&SMConsumer_initial));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4904      	ldr	r1, [pc, #16]	; (8000af8 <SMConsumer_ctor+0x20>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f930 	bl	8002d4c <QMActive_ctor>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000028 	.word	0x20000028
 8000af8:	08000afd 	.word	0x08000afd

08000afc <SMConsumer_initial>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::SMConsumer} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::SMConsumer} ......................................................*/
/*.${AOs::SMConsumer::SM} ..................................................*/
QState SMConsumer_initial(SMConsumer * const me, void const * const par) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
            Q_ACTION_CAST(&SMConsumer_Consumindo_e), /* entry */
            Q_ACTION_NULL /* zero terminator */
        }
    };
    /*.${AOs::SMConsumer::SM::initial} */
    return QM_TRAN_INIT(&tatbl_);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <SMConsumer_initial+0x20>)
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	2309      	movs	r3, #9
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	08003264 	.word	0x08003264

08000b20 <SMConsumer_Consumindo_e>:
    Q_ACTION_CAST(&SMConsumer_Consumindo_e),
    Q_ACTION_NULL, /* no exit action */
    Q_ACTION_NULL  /* no initial tran. */
};
/*.${AOs::SMConsumer::SM::Consumindo} */
QState SMConsumer_Consumindo_e(SMConsumer * const me) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    QActive_subscribe((QActive *)me, PISCAR_LED_SIG);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f002 f8a4 	bl	8002c78 <QActive_subscribe>
    return QM_ENTRY(&SMConsumer_Consumindo_s);
 8000b30:	2305      	movs	r3, #5
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <SMConsumer_Consumindo>:
/*.${AOs::SMConsumer::SM::Consumindo} */
QState SMConsumer_Consumindo(SMConsumer * const me, QEvt const * const e) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d107      	bne.n	8000b5c <SMConsumer_Consumindo+0x22>
        /*.${AOs::SMConsumer::SM::Consumindo::PISCAR_LED} */
        case PISCAR_LED_SIG: {
            ToggleLED(Q_EVT_CAST(EvtPiscaLED)->quantidade);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f80b 	bl	8000b6c <ToggleLED>
            status_ = QM_HANDLED();
 8000b56:	2303      	movs	r3, #3
 8000b58:	60fb      	str	r3, [r7, #12]
            break;
 8000b5a:	e002      	b.n	8000b62 <SMConsumer_Consumindo+0x28>
        }
        default: {
            status_ = QM_SUPER();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
            break;
 8000b60:	bf00      	nop
        }
    }
    (void)me; /* unused parameter */
    return status_;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ToggleLED>:
 */

#include "main.h"

void ToggleLED(uint8_t quantidade)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	for (uint8_t counter = 0; counter < quantidade; counter++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e012      	b.n	8000ba2 <ToggleLED+0x36>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <ToggleLED+0x48>)
 8000b82:	f000 fe3b 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f000 fb66 	bl	8001258 <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <ToggleLED+0x48>)
 8000b92:	f000 fe33 	bl	80017fc <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 fb5e 	bl	8001258 <HAL_Delay>
	for (uint8_t counter = 0; counter < quantidade; counter++)
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3e8      	bcc.n	8000b7c <ToggleLED+0x10>
	}
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <SMLed_ctor>:
/* Public-scope objects
----------------------------------------------------*/
QMActive * const AO_SMLed = (QMActive *)&l_led; /* opaque pointer */

void SMLed_ctor(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    SMLed *me = &l_led;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <SMLed_ctor+0x2c>)
 8000bc0:	607b      	str	r3, [r7, #4]

    // Construtor. Inicializa e coloca no estado inicial.
    QMActive_ctor(&me->super, Q_STATE_CAST(&SMLed_initial));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4908      	ldr	r1, [pc, #32]	; (8000be8 <SMLed_ctor+0x30>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 f8c0 	bl	8002d4c <QMActive_ctor>
    QTimeEvt_ctorX(&me->timer, (QActive *) &me->super, TIMEOUT_SIG, 0U);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f103 0020 	add.w	r0, r3, #32
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2206      	movs	r2, #6
 8000bd8:	f002 f96a 	bl	8002eb0 <QTimeEvt_ctorX>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000048 	.word	0x20000048
 8000be8:	08000bed 	.word	0x08000bed

08000bec <SMLed_initial>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::SMLed} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::SMLed} ...........................................................*/
/*.${AOs::SMLed::SM} .......................................................*/
QState SMLed_initial(SMLed * const me, void const * const par) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
            Q_ACTION_CAST(&SMLed_Desligado_e), /* entry */
            Q_ACTION_NULL /* zero terminator */
        }
    };
    /*.${AOs::SMLed::SM::initial} */
    return QM_TRAN_INIT(&tatbl_);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <SMLed_initial+0x20>)
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	2309      	movs	r3, #9
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	08003288 	.word	0x08003288

08000c10 <SMLed_Desligado_e>:
    Q_ACTION_CAST(&SMLed_Desligado_e),
    Q_ACTION_CAST(&SMLed_Desligado_x),
    Q_ACTION_NULL  /* no initial tran. */
};
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado_e(SMLed * const me) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    QTimeEvt_armX(&me->timer, BSP_TICKS_PER_SEC * 3, BSP_TICKS_PER_SEC/10);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	2264      	movs	r2, #100	; 0x64
 8000c1e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 f974 	bl	8002f10 <QTimeEvt_armX>
    return QM_ENTRY(&SMLed_Desligado_s);
 8000c28:	2305      	movs	r3, #5
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <SMLed_Desligado_x>:
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado_x(SMLed * const me) {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
    QTimeEvt_disarm(&me->timer);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3320      	adds	r3, #32
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f9c0 	bl	8002fc4 <QTimeEvt_disarm>
    return QM_EXIT(&SMLed_Desligado_s);
 8000c44:	2306      	movs	r3, #6
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <SMLed_Desligado>:
/*.${AOs::SMLed::SM::Desligado} */
QState SMLed_Desligado(SMLed * const me, QEvt const * const e) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d104      	bne.n	8000c6a <SMLed_Desligado+0x1c>
        /*.${AOs::SMLed::SM::Desligado::TIMEOUT} */
        case TIMEOUT_SIG: {
            PublicarEvento();
 8000c60:	f000 f80c 	bl	8000c7c <PublicarEvento>
            status_ = QM_HANDLED();
 8000c64:	2303      	movs	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
            break;
 8000c68:	e002      	b.n	8000c70 <SMLed_Desligado+0x22>
        }
        default: {
            status_ = QM_SUPER();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
            break;
 8000c6e:	bf00      	nop
        }
    }
    (void)me; /* unused parameter */
    return status_;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <PublicarEvento>:
#include "main.h"
#include "qf_port.h"
#include "SharedData.h"

void PublicarEvento(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	EvtPiscaLED *evt = Q_NEW(EvtPiscaLED, PISCAR_LED_SIG);
 8000c82:	2204      	movs	r2, #4
 8000c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c88:	2006      	movs	r0, #6
 8000c8a:	f001 fe07 	bl	800289c <QF_newX_>
 8000c8e:	6078      	str	r0, [r7, #4]
	evt->quantidade = 2;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2202      	movs	r2, #2
 8000c94:	711a      	strb	r2, [r3, #4]

	QACTIVE_POST((QActive *const) AO_SMConsumer, (QEvt *)evt, 0);
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <PublicarEvento+0x38>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <PublicarEvento+0x38>)
 8000ca0:	6810      	ldr	r0, [r2, #0]
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4798      	blx	r3
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800324c 	.word	0x0800324c

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d10:	f3bf 8f4f 	dsb	sy
}
 8000d14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <__NVIC_SystemReset+0x24>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d1e:	4904      	ldr	r1, [pc, #16]	; (8000d30 <__NVIC_SystemReset+0x24>)
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_SystemReset+0x28>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d26:	f3bf 8f4f 	dsb	sy
}
 8000d2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <__NVIC_SystemReset+0x20>
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	05fa0004 	.word	0x05fa0004

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ffac 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af04      	add	r7, sp, #16
	static QF_MPOOL_EL(EvtPiscaLED) smlPoolSto[10]; // Pool de eventos dinâmicos.

	static QSubscrList l_subscrSto[MAX_PUB_SIG]; // Lista de inscritos do mecanismo publish-subscribe do QP.

	// Construtores dos Active Objects.
	SMLed_ctor();
 8000d82:	f7ff ff19 	bl	8000bb8 <SMLed_ctor>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 f9f5 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f85f 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 f8bb 	bl	8000f08 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Inicializa o framework do QP.
  QF_init();
 8000d92:	f002 f97f 	bl	8003094 <QF_init>

  QF_psInit(l_subscrSto, Q_DIM(l_subscrSto));
 8000d96:	2105      	movs	r1, #5
 8000d98:	4825      	ldr	r0, [pc, #148]	; (8000e30 <main+0xb4>)
 8000d9a:	f001 ff53 	bl	8002c44 <QF_psInit>

  // Inicializa as filas de eventos dinâmicos (alocados via macro Q_NEW).
  QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 8000d9e:	2208      	movs	r2, #8
 8000da0:	2150      	movs	r1, #80	; 0x50
 8000da2:	4824      	ldr	r0, [pc, #144]	; (8000e34 <main+0xb8>)
 8000da4:	f001 fd38 	bl	8002818 <QF_poolInit>

  uint8_t priority = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	71fb      	strb	r3, [r7, #7]

  SMConsumer_ctor();
 8000dac:	f7ff fe94 	bl	8000ad8 <SMConsumer_ctor>

  QACTIVE_START(AO_SMLed, priority++, evtQueueLed, Q_DIM(evtQueueLed),(void *)0, 0U, (QEvt *)0);
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <main+0xbc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <main+0x46>
 8000dba:	2176      	movs	r1, #118	; 0x76
 8000dbc:	481f      	ldr	r0, [pc, #124]	; (8000e3c <main+0xc0>)
 8000dbe:	f000 f92f 	bl	8001020 <Q_onAssert>
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <main+0xbc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689c      	ldr	r4, [r3, #8]
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <main+0xbc>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	71fa      	strb	r2, [r7, #7]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	2300      	movs	r3, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	230a      	movs	r3, #10
 8000de4:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <main+0xc4>)
 8000de6:	47a0      	blx	r4
  QACTIVE_START(AO_SMConsumer, priority++, evtQueueConsumer, Q_DIM(evtQueueConsumer), (void* )0, 0U, (QEvt* )0);
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <main+0xc8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d103      	bne.n	8000dfa <main+0x7e>
 8000df2:	2177      	movs	r1, #119	; 0x77
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <main+0xc0>)
 8000df6:	f000 f913 	bl	8001020 <Q_onAssert>
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <main+0xc8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689c      	ldr	r4, [r3, #8]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <main+0xc8>)
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	71fa      	strb	r2, [r7, #7]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2300      	movs	r3, #0
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2300      	movs	r3, #0
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <main+0xcc>)
 8000e1e:	47a0      	blx	r4

  // Executa a aplicação QF.
  return QF_run();
 8000e20:	f002 f960 	bl	80030e4 <QF_run>
 8000e24:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000078 	.word	0x20000078
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	08003270 	.word	0x08003270
 8000e3c:	08003294 	.word	0x08003294
 8000e40:	200000dc 	.word	0x200000dc
 8000e44:	0800324c 	.word	0x0800324c
 8000e48:	20000104 	.word	0x20000104

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	; 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	; 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 f9e2 	bl	8003224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <SystemClock_Config+0xb4>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <SystemClock_Config+0xb4>)
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <SystemClock_Config+0xb4>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <SystemClock_Config+0xb8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <SystemClock_Config+0xb8>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <SystemClock_Config+0xb8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fcdb 	bl	8001878 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ec8:	f000 f8b6 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 ff3e 	bl	8001d68 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ef2:	f000 f8a1 	bl	8001038 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0xa8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0xa8>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_GPIO_Init+0xa8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_GPIO_Init+0xa8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_GPIO_Init+0xa8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_GPIO_Init+0xa8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0xac>)
 8000f5c:	f000 fc4e 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000f60:	2310      	movs	r3, #16
 8000f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <MX_GPIO_Init+0xb0>)
 8000f76:	f000 faa5 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <MX_GPIO_Init+0xac>)
 8000f92:	f000 fa97 	bl	80014c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 fa5b 	bl	8001456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f000 fa74 	bl	800148e <HAL_NVIC_EnableIRQ>

}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <QF_onStartup>:

/* USER CODE BEGIN 4 */

void QF_onStartup(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock * SYSTICK_INT_FREQ);
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <QF_onStartup+0x48>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb69 	bl	80006a0 <__aeabi_ui2d>
 8000fce:	a30c      	add	r3, pc, #48	; (adr r3, 8001000 <QF_onStartup+0x40>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff f8f8 	bl	80001c8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fbd8 	bl	8000794 <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fea6 	bl	8000d38 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, SysTick_PRIO);
 8000fec:	2103      	movs	r1, #3
 8000fee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff2:	f7ff fe61 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	d2f1a9fc 	.word	0xd2f1a9fc
 8001004:	3f50624d 	.word	0x3f50624d
 8001008:	20000000 	.word	0x20000000

0800100c <QV_onIdle>:

void QF_onCleanup(void){}

void QV_onIdle(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	QF_INT_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	f383 8811 	msr	BASEPRI, r3
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <Q_onAssert>:

void Q_onAssert(char_t const * const module, int_t location)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	QF_INT_DISABLE(); /* make sure that all interrupts are disabled */
 800102a:	233f      	movs	r3, #63	; 0x3f
 800102c:	b672      	cpsid	i
 800102e:	f383 8811 	msr	BASEPRI, r3
 8001032:	b662      	cpsie	i
	NVIC_SystemReset();
 8001034:	f7ff fe6a 	bl	8000d0c <__NVIC_SystemReset>

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_MspInit+0x4c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x4c>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f89a 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  QF_TICK_X(0U, (void *)0);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f001 fe49 	bl	8002d7c <QF_tickX_>

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO_Pin);
 80010f2:	2010      	movs	r0, #16
 80010f4:	f000 fb9c 	bl	8001830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f002 f845 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fe13 	bl	8000d7c <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001164:	08003334 	.word	0x08003334
  ldr r2, =_sbss
 8001168:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800116c:	20000220 	.word	0x20000220

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f94f 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff ff4c 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f967 	bl	80014aa <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f92f 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	2000012c 	.word	0x2000012c

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000012c 	.word	0x2000012c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e16b      	b.n	80017b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 815a 	bne.w	80017b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	2b02      	cmp	r3, #2
 8001514:	d130      	bne.n	8001578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 0201 	and.w	r2, r3, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d017      	beq.n	80015b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d123      	bne.n	8001608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80b4 	beq.w	80017b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a5b      	ldr	r2, [pc, #364]	; (80017d4 <HAL_GPIO_Init+0x310>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x314>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d02b      	beq.n	80016ea <HAL_GPIO_Init+0x226>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x318>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_Init+0x222>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x31c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_Init+0x21e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x320>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x21a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_GPIO_Init+0x324>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x216>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <HAL_GPIO_Init+0x328>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x212>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_GPIO_Init+0x32c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x20e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <HAL_GPIO_Init+0x330>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x20a>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e00e      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016ce:	2308      	movs	r3, #8
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016ea:	2300      	movs	r3, #0
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x310>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_GPIO_Init+0x334>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	f67f ae90 	bls.w	80014e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40021800 	.word	0x40021800
 80017f4:	40021c00 	.word	0x40021c00
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f806 	bl	8001860 <HAL_GPIO_EXTI_Callback>
  }
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e267      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d075      	beq.n	8001982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d00c      	beq.n	80018bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a2:	4b85      	ldr	r3, [pc, #532]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d112      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ae:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ba:	d10b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	4b7e      	ldr	r3, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d05b      	beq.n	8001980 <HAL_RCC_OscConfig+0x108>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d157      	bne.n	8001980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e242      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x74>
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6f      	ldr	r2, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6c      	ldr	r2, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xb0>
 8001910:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a68      	ldr	r2, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fc86 	bl	8001240 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fc82 	bl	8001240 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e207      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xc0>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fc72 	bl	8001240 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fc6e 	bl	8001240 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1f3      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0xe8>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x152>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1c7      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCC_OscConfig+0x244>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fc27 	bl	8001240 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc23 	bl	8001240 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1a8      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x244>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc06 	bl	8001240 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff fc02 	bl	8001240 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e187      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d036      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x248>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff fbe6 	bl	8001240 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbe2 	bl	8001240 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e167      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x200>
 8001a96:	e01b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x248>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fbcf 	bl	8001240 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fbcb 	bl	8001240 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d907      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e150      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470000 	.word	0x42470000
 8001ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ea      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8097 	beq.w	8001c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b81      	ldr	r3, [pc, #516]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10f      	bne.n	8001b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b7d      	ldr	r3, [pc, #500]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a7c      	ldr	r2, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b7a      	ldr	r3, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b77      	ldr	r3, [pc, #476]	; (8001cec <HAL_RCC_OscConfig+0x474>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b74      	ldr	r3, [pc, #464]	; (8001cec <HAL_RCC_OscConfig+0x474>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a73      	ldr	r2, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x474>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fb8b 	bl	8001240 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff fb87 	bl	8001240 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e10c      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x474>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x2ea>
 8001b54:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x324>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x30c>
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a5b      	ldr	r2, [pc, #364]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x324>
 8001b84:	4b58      	ldr	r3, [pc, #352]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a57      	ldr	r2, [pc, #348]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fb4c 	bl	8001240 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb48 	bl	8001240 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0cb      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ee      	beq.n	8001bac <HAL_RCC_OscConfig+0x334>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fb36 	bl	8001240 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fb32 	bl	8001240 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0b5      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a38      	ldr	r2, [pc, #224]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a1 	beq.w	8001d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d05c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d141      	bne.n	8001cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCC_OscConfig+0x478>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb06 	bl	8001240 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff fb02 	bl	8001240 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e087      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	491b      	ldr	r1, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x478>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fadb 	bl	8001240 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fad7 	bl	8001240 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e05c      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x416>
 8001cac:	e054      	b.n	8001d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_OscConfig+0x478>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fac4 	bl	8001240 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff fac0 	bl	8001240 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e045      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x444>
 8001cda:	e03d      	b.n	8001d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e038      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x4ec>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d028      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d121      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d11a      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0cc      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d90c      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0b8      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d044      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d119      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e06f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e067      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4934      	ldr	r1, [pc, #208]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7ff f9f2 	bl	8001240 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff f9ee 	bl	8001240 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e04f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d20c      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e032      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4916      	ldr	r1, [pc, #88]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490e      	ldr	r1, [pc, #56]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eee:	f000 f821 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	490a      	ldr	r1, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f952 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00
 8001f24:	40023800 	.word	0x40023800
 8001f28:	080032a8 	.word	0x080032a8
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f38:	b090      	sub	sp, #64	; 0x40
 8001f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f40:	2300      	movs	r3, #0
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f44:	2300      	movs	r3, #0
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d00d      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x40>
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	f200 80a1 	bhi.w	80020a0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x34>
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f66:	e09b      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f6c:	e09b      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f72:	e098      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f7e:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d028      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	2200      	movs	r2, #0
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	627a      	str	r2, [r7, #36]	; 0x24
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fa0:	fb03 f201 	mul.w	r2, r3, r1
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	fb00 f303 	mul.w	r3, r0, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fae:	fba0 1202 	umull	r1, r2, r0, r2
 8001fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fba:	4413      	add	r3, r2
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	61fa      	str	r2, [r7, #28]
 8001fc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fce:	f7fe fc01 	bl	80007d4 <__aeabi_uldivmod>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fda:	e053      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	617a      	str	r2, [r7, #20]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fee:	f04f 0b00 	mov.w	fp, #0
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	465b      	mov	r3, fp
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	0159      	lsls	r1, r3, #5
 8002000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002004:	0150      	lsls	r0, r2, #5
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	ebb2 080a 	subs.w	r8, r2, sl
 800200e:	eb63 090b 	sbc.w	r9, r3, fp
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800201e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002022:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002026:	ebb2 0408 	subs.w	r4, r2, r8
 800202a:	eb63 0509 	sbc.w	r5, r3, r9
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	00eb      	lsls	r3, r5, #3
 8002038:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800203c:	00e2      	lsls	r2, r4, #3
 800203e:	4614      	mov	r4, r2
 8002040:	461d      	mov	r5, r3
 8002042:	eb14 030a 	adds.w	r3, r4, sl
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	eb45 030b 	adc.w	r3, r5, fp
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205a:	4629      	mov	r1, r5
 800205c:	028b      	lsls	r3, r1, #10
 800205e:	4621      	mov	r1, r4
 8002060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002064:	4621      	mov	r1, r4
 8002066:	028a      	lsls	r2, r1, #10
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	2200      	movs	r2, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	60fa      	str	r2, [r7, #12]
 8002074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002078:	f7fe fbac 	bl	80007d4 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4613      	mov	r3, r2
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3740      	adds	r7, #64	; 0x40
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	017d7840 	.word	0x017d7840

080020c0 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] |= (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI;
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <QV_init+0x6c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a18      	ldr	r2, [pc, #96]	; (800212c <QV_init+0x6c>)
 80020cc:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 80020d0:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
 80020d4:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] |= (QF_BASEPRI << 24);
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <QV_init+0x70>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <QV_init+0x70>)
 80020dc:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 80020e0:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] |= (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <QV_init+0x74>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <QV_init+0x74>)
 80020e8:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 80020ec:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 80020f0:	6013      	str	r3, [r2, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <QV_init+0x78>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020fc:	3308      	adds	r3, #8
 80020fe:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800210e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002112:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8002116:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <QV_init+0x40>
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed18 	.word	0xe000ed18
 8002130:	e000ed1c 	.word	0xe000ed1c
 8002134:	e000ed20 	.word	0xe000ed20
 8002138:	e000e004 	.word	0xe000e004

0800213c <QMsm_ctor>:
* @usage
* The following example illustrates how to invoke QMsm_ctor() in the
* "constructor" of a derived state machine:
* @include qep_qmsm_ctor.c
*/
void QMsm_ctor(QMsm * const me, QStateHandler initial) {
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
#ifdef Q_SPY
        ,&QMsm_getStateHandler_
#endif
    };
    /* do not call the QHsm_ctor() here */
    me->super.vptr = &vtable;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <QMsm_ctor+0x28>)
 800214a:	601a      	str	r2, [r3, #0]
    me->super.state.obj = &l_msm_top_s; /* the current state (top) */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <QMsm_ctor+0x2c>)
 8002150:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;      /* the initial transition handler */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	080032d4 	.word	0x080032d4
 8002168:	080032c0 	.word	0x080032c0

0800216c <QMsm_init_>:
void QMsm_init_(QHsm * const me, void const * const e,
                uint_fast8_t const qs_id)
#else
void QMsm_init_(QHsm * const me, void const * const e)
#endif
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <QMsm_init_+0x24>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <QMsm_init_+0x24>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <QMsm_init_+0x70>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <QMsm_init_+0x2c>
 8002190:	21c8      	movs	r1, #200	; 0xc8
 8002192:	4813      	ldr	r0, [pc, #76]	; (80021e0 <QMsm_init_+0x74>)
 8002194:	f7fe ff44 	bl	8001020 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (me->state.obj == &l_msm_top_s));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
 80021a2:	60f8      	str	r0, [r7, #12]

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN_INIT);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b09      	cmp	r3, #9
 80021a8:	d003      	beq.n	80021b2 <QMsm_init_+0x46>
 80021aa:	21d2      	movs	r1, #210	; 0xd2
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <QMsm_init_+0x74>)
 80021ae:	f7fe ff37 	bl	8001020 <Q_onAssert>
        QS_FUN_PRE_(me->state.obj->stateHandler);          /* source state */
        QS_FUN_PRE_(me->temp.tatbl->target->stateHandler); /* target state */
    QS_END_PRE_()

    /* set state to the last tran. target */
    me->state.obj = me->temp.tatbl->target;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]
    /* execute the tran. table */
    do {
#ifdef Q_SPY
        r = QMsm_execTatbl_(me, me->temp.tatbl, qs_id);
#else
        r = QMsm_execTatbl_(me, me->temp.tatbl);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8cc 	bl	8002360 <QMsm_execTatbl_>
 80021c8:	60f8      	str	r0, [r7, #12]
#endif
    } while (r >= (QState)Q_RET_TRAN_INIT);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d8f5      	bhi.n	80021bc <QMsm_init_+0x50>
    QS_BEGIN_PRE_(QS_QEP_INIT_TRAN, qs_id)
        QS_TIME_PRE_();   /* time stamp */
        QS_OBJ_PRE_(me);  /* this state machine object */
        QS_FUN_PRE_(me->state.obj->stateHandler); /* the new current state */
    QS_END_PRE_()
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	080032c0 	.word	0x080032c0
 80021e0:	080032b8 	.word	0x080032b8

080021e4 <QMsm_dispatch_>:
void QMsm_dispatch_(QHsm * const me, QEvt const * const e,
                    uint_fast8_t const qs_id)
#else
void QMsm_dispatch_(QHsm * const me, QEvt const * const e)
#endif
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    QMState const *s = me->state.obj; /* store the current state */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61fb      	str	r3, [r7, #28]
    QMState const *t = s;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	61bb      	str	r3, [r7, #24]
    QState r;
    QS_CRIT_STAT_

    /*! @pre current state must be initialized */
    Q_REQUIRE_ID(300, s != (QMState *)0);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <QMsm_dispatch_+0x24>
 80021fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002202:	4856      	ldr	r0, [pc, #344]	; (800235c <QMsm_dispatch_+0x178>)
 8002204:	f7fe ff0c 	bl	8001020 <Q_onAssert>
        QS_FUN_PRE_(s->stateHandler); /* the current state handler */
    QS_END_PRE_()

    /* scan the state hierarchy up to the top state... */
    do {
        r = (*t->stateHandler)(me, e);  /* call state handler function */
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
 8002212:	6178      	str	r0, [r7, #20]

        /* event handled? (the most frequent case) */
        if (r >= (QState)Q_RET_HANDLED) {
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d81d      	bhi.n	8002256 <QMsm_dispatch_+0x72>
            break; /* done scanning the state hierarchy */
        }
        /* event unhandled and passed to the superstate? */
        else if (r == (QState)Q_RET_SUPER) {
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <QMsm_dispatch_+0x44>
            t = t->superstate; /* advance to the superstate */
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e012      	b.n	800224e <QMsm_dispatch_+0x6a>
        }
        /* event unhandled and passed to a submachine superstate? */
        else if (r == (QState)Q_RET_SUPER_SUB) {
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d103      	bne.n	8002236 <QMsm_dispatch_+0x52>
            t = me->temp.obj; /* current host state of the submachie */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e00b      	b.n	800224e <QMsm_dispatch_+0x6a>
        }
        /* event unhandled due to a guard? */
        else if (r == (QState)Q_RET_UNHANDLED) {
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d103      	bne.n	8002244 <QMsm_dispatch_+0x60>
                QS_SIG_PRE_(e->sig);  /* the signal of the event */
                QS_OBJ_PRE_(me);      /* this state machine object */
                QS_FUN_PRE_(t->stateHandler); /* the current state */
            QS_END_PRE_()

            t = t->superstate; /* advance to the superstate */
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e004      	b.n	800224e <QMsm_dispatch_+0x6a>
        }
        else {
            /* no other return value should be produced */
            Q_ERROR_ID(310);
 8002244:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002248:	4844      	ldr	r0, [pc, #272]	; (800235c <QMsm_dispatch_+0x178>)
 800224a:	f7fe fee9 	bl	8001020 <Q_onAssert>
        }
    } while (t != (QMState *)0);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1d9      	bne.n	8002208 <QMsm_dispatch_+0x24>
 8002254:	e000      	b.n	8002258 <QMsm_dispatch_+0x74>
            break; /* done scanning the state hierarchy */
 8002256:	bf00      	nop


    /* any kind of transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b07      	cmp	r3, #7
 800225c:	d979      	bls.n	8002352 <QMsm_dispatch_+0x16e>
        Q_ASSERT_ID(320, ts != (QMState *)0);
#endif /* Q_SPY */

        do {
            /* save the transition-action table before it gets clobbered */
            struct QMTranActTable const * const tatbl = me->temp.tatbl;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	613b      	str	r3, [r7, #16]
            union QHsmAttr tmp; /* temporary to save intermediate values */

            /* was TRAN, TRAN_INIT, or TRAN_EP taken? */
            if (r <= (QState)Q_RET_TRAN_EP) {
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b0a      	cmp	r3, #10
 8002268:	d80d      	bhi.n	8002286 <QMsm_dispatch_+0xa2>
#ifdef Q_SPY
                QMsm_exitToTranSource_(me, s, t, qs_id);
                r = QMsm_execTatbl_(me, tatbl, qs_id);
#else
                QMsm_exitToTranSource_(me, s, t);
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	69f9      	ldr	r1, [r7, #28]
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8a8 	bl	80023c4 <QMsm_exitToTranSource_>
                r = QMsm_execTatbl_(me, tatbl);
 8002274:	6939      	ldr	r1, [r7, #16]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f872 	bl	8002360 <QMsm_execTatbl_>
 800227c:	6178      	str	r0, [r7, #20]
#endif
                s = me->state.obj;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e060      	b.n	8002348 <QMsm_dispatch_+0x164>
            }
            /* was a transition segment to history taken? */
            else if (r == (QState)Q_RET_TRAN_HIST) {
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b0b      	cmp	r3, #11
 800228a:	d118      	bne.n	80022be <QMsm_dispatch_+0xda>
                tmp.obj = me->state.obj; /* save history */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
                me->state.obj = s; /* restore the original state */
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	605a      	str	r2, [r3, #4]
#ifdef Q_SPY
                QMsm_exitToTranSource_(me, s, t, qs_id);
                (void)QMsm_execTatbl_(me, tatbl, qs_id);
                r = QMsm_enterHistory_(me, tmp.obj, qs_id);
#else
                QMsm_exitToTranSource_(me, s, t);
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	69f9      	ldr	r1, [r7, #28]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f891 	bl	80023c4 <QMsm_exitToTranSource_>
                (void)QMsm_execTatbl_(me, tatbl);
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f85b 	bl	8002360 <QMsm_execTatbl_>
                r = QMsm_enterHistory_(me, tmp.obj);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8b6 	bl	8002420 <QMsm_enterHistory_>
 80022b4:	6178      	str	r0, [r7, #20]
#endif
                s = me->state.obj;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	e044      	b.n	8002348 <QMsm_dispatch_+0x164>
            }
            /* was a transition segment to an exit point taken? */
            else if (r == (QState)Q_RET_TRAN_XP) {
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d13c      	bne.n	800233e <QMsm_dispatch_+0x15a>
                tmp.act = me->state.act; /* save XP action */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
                me->state.obj = s; /* restore the original state */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	605a      	str	r2, [r3, #4]
                r = (*tmp.act)(me); /* execute the XP action */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	6178      	str	r0, [r7, #20]
                if (r == (QState)Q_RET_TRAN) { /* XP -> TRAN ? */
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d10c      	bne.n	80022f8 <QMsm_dispatch_+0x114>
                    tmp.tatbl = me->temp.tatbl; /* save me->temp */
                    QMsm_exitToTranSource_(me, s, t, qs_id);
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl, qs_id);
#else
                    QMsm_exitToTranSource_(me, s, t);
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	69f9      	ldr	r1, [r7, #28]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f86e 	bl	80023c4 <QMsm_exitToTranSource_>
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl);
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f838 	bl	8002360 <QMsm_execTatbl_>
#endif /* Q_SPY */
                    s = me->state.obj;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e027      	b.n	8002348 <QMsm_dispatch_+0x164>
#ifdef Q_SPY
                    me->temp.tatbl = tmp.tatbl; /* restore me->temp */
#endif /* Q_SPY */
                }
                else if (r == (QState)Q_RET_TRAN_HIST) { /* XP -> HIST ? */
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b0b      	cmp	r3, #11
 80022fc:	d117      	bne.n	800232e <QMsm_dispatch_+0x14a>
                    tmp.obj = me->state.obj; /* save the history */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
                    me->state.obj = s; /* restore the original state */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	605a      	str	r2, [r3, #4]
                    s = me->temp.obj; /* save me->temp */
                    QMsm_exitToTranSource_(me, me->state.obj, t, qs_id);
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl, qs_id);
#else
                    QMsm_exitToTranSource_(me, me->state.obj, t);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4619      	mov	r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f856 	bl	80023c4 <QMsm_exitToTranSource_>
                    /* take the tran-to-XP segment inside submachine */
                    (void)QMsm_execTatbl_(me, tatbl);
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f820 	bl	8002360 <QMsm_execTatbl_>
#endif /* Q_SPY */
#ifdef Q_SPY
                    me->temp.obj = s; /* restore me->temp */
#endif /* Q_SPY */
                    s = me->state.obj;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	61fb      	str	r3, [r7, #28]
                    me->state.obj = tmp.obj; /* restore the history */
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	e00c      	b.n	8002348 <QMsm_dispatch_+0x164>
                }
                else {
                    /* TRAN_XP must NOT be followed by any other tran type */
                    Q_ASSERT_ID(330, r < (QState)Q_RET_TRAN);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b07      	cmp	r3, #7
 8002332:	d909      	bls.n	8002348 <QMsm_dispatch_+0x164>
 8002334:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002338:	4808      	ldr	r0, [pc, #32]	; (800235c <QMsm_dispatch_+0x178>)
 800233a:	f7fe fe71 	bl	8001020 <Q_onAssert>
                }
            }
            else {
                /* no other return value should be produced */
                Q_ERROR_ID(340);
 800233e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <QMsm_dispatch_+0x178>)
 8002344:	f7fe fe6c 	bl	8001020 <Q_onAssert>
            }

            t = s; /* set target to the current state */
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	61bb      	str	r3, [r7, #24]

        } while (r >= (QState)Q_RET_TRAN);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b07      	cmp	r3, #7
 8002350:	d885      	bhi.n	800225e <QMsm_dispatch_+0x7a>
    }
#endif /* Q_SPY */
    else {
        /* empty */
    }
}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	080032b8 	.word	0x080032b8

08002360 <QMsm_execTatbl_>:
                              uint_fast8_t const qs_id)
#else
static QState QMsm_execTatbl_(QHsm * const me,
                              struct QMTranActTable const *tatbl)
#endif
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
    QState r = (QState)Q_RET_NULL;
 800236a:	2307      	movs	r3, #7
 800236c:	60fb      	str	r3, [r7, #12]
    QS_CRIT_STAT_

    /*! @pre the transition-action table pointer must not be NULL */
    Q_REQUIRE_ID(400, tatbl != (struct QMTranActTable *)0);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <QMsm_execTatbl_+0x1e>
 8002374:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002378:	4811      	ldr	r0, [pc, #68]	; (80023c0 <QMsm_execTatbl_+0x60>)
 800237a:	f7fe fe51 	bl	8001020 <Q_onAssert>

    for (QActionHandler const *a = &tatbl->act[0];
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3304      	adds	r3, #4
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	e007      	b.n	8002396 <QMsm_execTatbl_+0x36>
         *a != Q_ACTION_CAST(0);
         ++a)
    {
        r = (*(*a))(me); /* call the action through the 'a' pointer */
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
 800238e:	60f8      	str	r0, [r7, #12]
         ++a)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3304      	adds	r3, #4
 8002394:	60bb      	str	r3, [r7, #8]
         *a != Q_ACTION_CAST(0);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	681b      	ldr	r3, [r3, #0]
    for (QActionHandler const *a = &tatbl->act[0];
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f3      	bne.n	8002386 <QMsm_execTatbl_+0x26>
#endif /* Q_SPY */
    }

    me->state.obj = (r >= (QState)Q_RET_TRAN)
        ? me->temp.tatbl->target
        : tatbl->target;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b07      	cmp	r3, #7
 80023a2:	d903      	bls.n	80023ac <QMsm_execTatbl_+0x4c>
        ? me->temp.tatbl->target
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
        : tatbl->target;
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e001      	b.n	80023b0 <QMsm_execTatbl_+0x50>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
    me->state.obj = (r >= (QState)Q_RET_TRAN)
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6053      	str	r3, [r2, #4]
    return r;
 80023b4:	68fb      	ldr	r3, [r7, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	080032b8 	.word	0x080032b8

080023c4 <QMsm_exitToTranSource_>:
                                   uint_fast8_t const qs_id)
#else
static void QMsm_exitToTranSource_(QHsm * const me, QMState const *cs,
                                   QMState const *ts)
#endif
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
    QMState const *s = cs;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	617b      	str	r3, [r7, #20]

    /* exit states from the current state to the tran. source state */
    while (s != ts) {
 80023d4:	e018      	b.n	8002408 <QMsm_exitToTranSource_+0x44>
        /* exit action provided in state 's'? */
        if (s->exitAction != Q_ACTION_CAST(0)) {
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <QMsm_exitToTranSource_+0x22>
            QS_CRIT_STAT_

            (void)(*s->exitAction)(me); /* execute the exit action */
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	4798      	blx	r3
                QS_OBJ_PRE_(me);              /* this state machine object */
                QS_FUN_PRE_(s->stateHandler); /* the exited state handler */
            QS_END_PRE_()
        }

        s = s->superstate; /* advance to the superstate */
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	617b      	str	r3, [r7, #20]

        if (s == (QMState *)0) { /* reached the top of a submachine? */
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <QMsm_exitToTranSource_+0x44>
            s = me->temp.obj; /* the superstate from QM_SM_EXIT() */
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	617b      	str	r3, [r7, #20]
            Q_ASSERT_ID(510, s != (QMState *)0); /* must be valid */
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d104      	bne.n	8002408 <QMsm_exitToTranSource_+0x44>
 80023fe:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <QMsm_exitToTranSource_+0x58>)
 8002404:	f7fe fe0c 	bl	8001020 <Q_onAssert>
    while (s != ts) {
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d1e2      	bne.n	80023d6 <QMsm_exitToTranSource_+0x12>
        }
    }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	080032b8 	.word	0x080032b8

08002420 <QMsm_enterHistory_>:
static QState QMsm_enterHistory_(QHsm * const me, QMState const *const hist,
                                 uint_fast8_t const qs_id)
#else
static QState QMsm_enterHistory_(QHsm * const me, QMState const *const hist)
#endif
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    QMState const *s = hist;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    QMState const *ts = me->state.obj; /* transition source */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	623b      	str	r3, [r7, #32]
        QS_OBJ_PRE_(me);                 /* this state machine object */
        QS_FUN_PRE_(ts->stateHandler);   /* source state handler */
        QS_FUN_PRE_(hist->stateHandler); /* target state handler */
    QS_END_PRE_()

    int_fast8_t i = 0;  /* transition entry path index */
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    while (s != ts) {
 8002438:	e01d      	b.n	8002476 <QMsm_enterHistory_+0x56>
        if (s->entryAction != Q_ACTION_CAST(0)) {
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <QMsm_enterHistory_+0x46>
            Q_ASSERT_ID(620, i < QMSM_MAX_ENTRY_DEPTH_);
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b03      	cmp	r3, #3
 8002446:	dd04      	ble.n	8002452 <QMsm_enterHistory_+0x32>
 8002448:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800244c:	481e      	ldr	r0, [pc, #120]	; (80024c8 <QMsm_enterHistory_+0xa8>)
 800244e:	f7fe fde7 	bl	8001020 <Q_onAssert>
            epath[i] = s;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	3328      	adds	r3, #40	; 0x28
 8002458:	443b      	add	r3, r7
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	f843 2c20 	str.w	r2, [r3, #-32]
            ++i;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	3301      	adds	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
        }
        s = s->superstate;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
        if (s == (QMState *)0) {
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <QMsm_enterHistory_+0x56>
            ts = s; /* force exit from the for-loop */
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	623b      	str	r3, [r7, #32]
    while (s != ts) {
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	429a      	cmp	r2, r3
 800247c:	d1dd      	bne.n	800243a <QMsm_enterHistory_+0x1a>
        }
    }

    /* retrace the entry path in reverse (desired) order... */
    while (i > 0) {
 800247e:	e00b      	b.n	8002498 <QMsm_enterHistory_+0x78>
        --i;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3b01      	subs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
        (void)(*epath[i]->entryAction)(me); /* run entry action in epath[i] */
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3328      	adds	r3, #40	; 0x28
 800248c:	443b      	add	r3, r7
 800248e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
    while (i > 0) {
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	dcf0      	bgt.n	8002480 <QMsm_enterHistory_+0x60>
            QS_OBJ_PRE_(me);
            QS_FUN_PRE_(epath[i]->stateHandler); /* entered state handler */
        QS_END_PRE_()
    }

    me->state.obj = hist; /* set current state to the transition target */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	605a      	str	r2, [r3, #4]

    /* initial tran. present? */
    QState r;
    if (hist->initAction != Q_ACTION_CAST(0)) {
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <QMsm_enterHistory_+0x98>
        r = (*hist->initAction)(me); /* execute the transition action */
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
 80024b4:	61b8      	str	r0, [r7, #24]
 80024b6:	e001      	b.n	80024bc <QMsm_enterHistory_+0x9c>
    }
    else {
        r = (QState)Q_RET_NULL;
 80024b8:	2307      	movs	r3, #7
 80024ba:	61bb      	str	r3, [r7, #24]
    }
    return r;
 80024bc:	69bb      	ldr	r3, [r7, #24]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	080032b8 	.word	0x080032b8

080024cc <QF_add_>:
* @note The priority of the active object @p a should be set before calling
* this function.
*
* @sa QF_remove_()
*/
void QF_add_(QActive * const a) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    uint_fast8_t const p = (uint_fast8_t)a->prio;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7f1b      	ldrb	r3, [r3, #28]
 80024d8:	60fb      	str	r3, [r7, #12]
    /*! @pre the priority of the active object must not be zero and cannot
    * exceed the maximum #QF_MAX_ACTIVE. Also, the priority of the active
    * object must not be already in use. QF requires each active object to
    * have a __unique__ priority.
    */
    Q_REQUIRE_ID(100, (0U < p)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <QF_add_+0x26>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d805      	bhi.n	80024f2 <QF_add_+0x26>
 80024e6:	4a0d      	ldr	r2, [pc, #52]	; (800251c <QF_add_+0x50>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <QF_add_+0x2e>
 80024f2:	2164      	movs	r1, #100	; 0x64
 80024f4:	480a      	ldr	r0, [pc, #40]	; (8002520 <QF_add_+0x54>)
 80024f6:	f7fe fd93 	bl	8001020 <Q_onAssert>
                       && (p <= QF_MAX_ACTIVE)
                       && (QF_active_[p] == (QActive *)0));
    QF_CRIT_STAT_
    QF_CRIT_E_();
 80024fa:	233f      	movs	r3, #63	; 0x3f
 80024fc:	b672      	cpsid	i
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	b662      	cpsie	i
    QF_active_[p] = a; /* register the active object at this priority */
 8002504:	4905      	ldr	r1, [pc, #20]	; (800251c <QF_add_+0x50>)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    QF_CRIT_X_();
 800250e:	2300      	movs	r3, #0
 8002510:	f383 8811 	msr	BASEPRI, r3
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000130 	.word	0x20000130
 8002520:	080032dc 	.word	0x080032dc

08002524 <QF_bzero>:
* variables upon startup. This is done to avoid problems with non-standard
* startup code provided with some compilers and toolsets (e.g., TI DSPs or
* Microchip MPLAB), which does not zero the uninitialized variables, as
* required by the ANSI C standard.
*/
void QF_bzero(void * const start, uint_fast16_t len) {
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	e008      	b.n	800254a <QF_bzero+0x26>
        *ptr = 0U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
        ++ptr;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3301      	adds	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3b01      	subs	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f3      	bne.n	8002538 <QF_bzero+0x14>
    }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <QPSet_insert>:
static inline bool QPSet_hasElement(QPSet * const me, uint_fast8_t const n) {
    return (me->bits & ((QPSetBits)1 << (n - 1U))) != 0U;
}

/*! Insert element @p n_ into the set @p me, n = 1U..32U */
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3b01      	subs	r3, #1
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <QActive_post_>:
                   uint_fast16_t const margin, void const * const sender)
#else
bool QActive_post_(QActive * const me, QEvt const * const e,
                   uint_fast16_t const margin)
#endif
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <QActive_post_+0x1a>
 800259a:	2164      	movs	r1, #100	; 0x64
 800259c:	483d      	ldr	r0, [pc, #244]	; (8002694 <QActive_post_+0x10c>)
 800259e:	f7fe fd3f 	bl	8001020 <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80025a2:	233f      	movs	r3, #63	; 0x3f
 80025a4:	b672      	cpsid	i
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	7ddb      	ldrb	r3, [r3, #23]
 80025b0:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10e      	bne.n	80025da <QActive_post_+0x52>
        if (nFree > 0U) {
 80025bc:	7dbb      	ldrb	r3, [r7, #22]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <QActive_post_+0x40>
            status = true; /* can post */
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
 80025c6:	e012      	b.n	80025ee <QActive_post_+0x66>
        }
        else {
            status = false; /* cannot post */
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 80025cc:	2300      	movs	r3, #0
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	216e      	movs	r1, #110	; 0x6e
 80025d4:	482f      	ldr	r0, [pc, #188]	; (8002694 <QActive_post_+0x10c>)
 80025d6:	f7fe fd23 	bl	8001020 <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	7dba      	ldrb	r2, [r7, #22]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d902      	bls.n	80025ea <QActive_post_+0x62>
        status = true; /* can post */
 80025e4:	2301      	movs	r3, #1
 80025e6:	75fb      	strb	r3, [r7, #23]
 80025e8:	e001      	b.n	80025ee <QActive_post_+0x66>
    }
    else {
        status = false; /* cannot post, but don't assert */
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	789b      	ldrb	r3, [r3, #2]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <QActive_post_+0x7c>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	78db      	ldrb	r3, [r3, #3]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d038      	beq.n	800267c <QActive_post_+0xf4>

        --nFree; /* one free entry just used up */
 800260a:	7dbb      	ldrb	r3, [r7, #22]
 800260c:	3b01      	subs	r3, #1
 800260e:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	7dba      	ldrb	r2, [r7, #22]
 8002614:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	7e1b      	ldrb	r3, [r3, #24]
 800261a:	7dba      	ldrb	r2, [r7, #22]
 800261c:	429a      	cmp	r2, r3
 800261e:	d202      	bcs.n	8002626 <QActive_post_+0x9e>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	7dba      	ldrb	r2, [r7, #22]
 8002624:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
#endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <QActive_post_+0xba>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	7f1b      	ldrb	r3, [r3, #28]
 8002638:	4619      	mov	r1, r3
 800263a:	4817      	ldr	r0, [pc, #92]	; (8002698 <QActive_post_+0x110>)
 800263c:	f7ff ff8f 	bl	800255e <QPSet_insert>
 8002640:	e018      	b.n	8002674 <QActive_post_+0xec>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	7d5b      	ldrb	r3, [r3, #21]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	7d5b      	ldrb	r3, [r3, #21]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <QActive_post_+0xde>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	7d1a      	ldrb	r2, [r3, #20]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	7d5b      	ldrb	r3, [r3, #21]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8002674:	2300      	movs	r3, #0
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	e005      	b.n	8002688 <QActive_post_+0x100>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
#endif

        QF_CRIT_X_();
 800267c:	2300      	movs	r3, #0
 800267e:	f383 8811 	msr	BASEPRI, r3

        QF_gc(e); /* recycle the event to avoid a leak */
 8002682:	68b8      	ldr	r0, [r7, #8]
 8002684:	f000 f96e 	bl	8002964 <QF_gc>
    }

    return status;
 8002688:	7dfb      	ldrb	r3, [r7, #23]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	080032e4 	.word	0x080032e4
 8002698:	2000021c 	.word	0x2000021c

0800269c <QActive_postLIFO_>:
* @attention
* This function should be called only via the macro QACTIVE_POST_LIFO().
*
* @sa QActive_post_(), QACTIVE_POST(), QACTIVE_POST_X()
*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80026a6:	233f      	movs	r3, #63	; 0x3f
 80026a8:	b672      	cpsid	i
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7ddb      	ldrb	r3, [r3, #23]
 80026b4:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <QActive_postLIFO_+0x2e>
 80026bc:	2300      	movs	r3, #0
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	21d2      	movs	r1, #210	; 0xd2
 80026c4:	4826      	ldr	r0, [pc, #152]	; (8002760 <QActive_postLIFO_+0xc4>)
 80026c6:	f7fe fcab 	bl	8001020 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	789b      	ldrb	r3, [r3, #2]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	78db      	ldrb	r3, [r3, #3]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e1b      	ldrb	r3, [r3, #24]
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d202      	bcs.n	80026fc <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
#endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7f1b      	ldrb	r3, [r3, #28]
 8002712:	4619      	mov	r1, r3
 8002714:	4813      	ldr	r0, [pc, #76]	; (8002764 <QActive_postLIFO_+0xc8>)
 8002716:	f7ff ff22 	bl	800255e <QPSet_insert>
 800271a:	e019      	b.n	8002750 <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7d9b      	ldrb	r3, [r3, #22]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	b2da      	uxtb	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7d9b      	ldrb	r3, [r3, #22]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7d1b      	ldrb	r3, [r3, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	d102      	bne.n	800273e <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	759a      	strb	r2, [r3, #22]
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7d9b      	ldrb	r3, [r3, #22]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8002750:	2300      	movs	r3, #0
 8002752:	f383 8811 	msr	BASEPRI, r3
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	080032e4 	.word	0x080032e4
 8002764:	2000021c 	.word	0x2000021c

08002768 <QActive_get_>:
* queue implementation and is sometimes customized in the QF port
* (file qf_port.h). Depending on the definition of the macro
* QACTIVE_EQUEUE_WAIT_(), the function might block the calling thread when
* no events are available.
*/
QEvt const *QActive_get_(QActive * const me) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002770:	233f      	movs	r3, #63	; 0x3f
 8002772:	b672      	cpsid	i
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <QActive_get_+0x22>
 8002782:	2100      	movs	r1, #0
 8002784:	4823      	ldr	r0, [pc, #140]	; (8002814 <QActive_get_+0xac>)
 8002786:	f7fe fc4b 	bl	8001020 <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7ddb      	ldrb	r3, [r3, #23]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3301      	adds	r3, #1
 8002798:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7afa      	ldrb	r2, [r7, #11]
 800279e:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7d1b      	ldrb	r3, [r3, #20]
 80027a4:	7afa      	ldrb	r2, [r7, #11]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d81a      	bhi.n	80027e0 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7d9b      	ldrb	r3, [r3, #22]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7d9b      	ldrb	r3, [r3, #22]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7d1a      	ldrb	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7d9b      	ldrb	r3, [r3, #22]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	759a      	strb	r2, [r3, #22]
 80027de:	e010      	b.n	8002802 <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 80027e6:	7afa      	ldrb	r2, [r7, #11]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d007      	beq.n	8002802 <QActive_get_+0x9a>
 80027f2:	2300      	movs	r3, #0
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f44f 719b 	mov.w	r1, #310	; 0x136
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <QActive_get_+0xac>)
 80027fe:	f7fe fc0f 	bl	8001020 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8002802:	2300      	movs	r3, #0
 8002804:	f383 8811 	msr	BASEPRI, r3
    return e;
 8002808:	68fb      	ldr	r3, [r7, #12]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	080032e4 	.word	0x080032e4

08002818 <QF_poolInit>:
*
* @sa QF initialization example for QF_init()
*/
void QF_poolInit(void * const poolSto, uint_fast32_t const poolSize,
                 uint_fast16_t const evtSize)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <QF_poolInit+0x78>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d903      	bls.n	8002834 <QF_poolInit+0x1c>
 800282c:	21c8      	movs	r1, #200	; 0xc8
 800282e:	4819      	ldr	r0, [pc, #100]	; (8002894 <QF_poolInit+0x7c>)
 8002830:	f7fe fbf6 	bl	8001020 <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <QF_poolInit+0x78>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <QF_poolInit+0x4a>
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <QF_poolInit+0x78>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	4915      	ldr	r1, [pc, #84]	; (8002898 <QF_poolInit+0x80>)
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	330c      	adds	r3, #12
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4293      	cmp	r3, r2
 8002858:	d803      	bhi.n	8002862 <QF_poolInit+0x4a>
 800285a:	21c9      	movs	r1, #201	; 0xc9
 800285c:	480d      	ldr	r0, [pc, #52]	; (8002894 <QF_poolInit+0x7c>)
 800285e:	f7fe fbdf 	bl	8001020 <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_pool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_pool_[QF_maxPool_], poolSto, poolSize, evtSize);
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <QF_poolInit+0x78>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <QF_poolInit+0x80>)
 8002870:	1898      	adds	r0, r3, r2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	f000 f8b8 	bl	80029ec <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <QF_poolInit+0x78>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	4a03      	ldr	r2, [pc, #12]	; (8002890 <QF_poolInit+0x78>)
 8002884:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_pool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
#endif /* Q_SPY*/
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200001f0 	.word	0x200001f0
 8002894:	080032ec 	.word	0x080032ec
 8002898:	200001b4 	.word	0x200001b4

0800289c <QF_newX_>:
* The application code should not call this function directly.
* The only allowed use is thorough the macros Q_NEW() or Q_NEW_X().
*/
QEvt *QF_newX_(uint_fast16_t const evtSize,
               uint_fast16_t const margin, enum_t const sig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
    uint_fast8_t idx;

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e00f      	b.n	80028ce <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_pool_[idx])) {
 80028ae:	492a      	ldr	r1, [pc, #168]	; (8002958 <QF_newX_+0xbc>)
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	330c      	adds	r3, #12
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d908      	bls.n	80028da <QF_newX_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <QF_newX_+0xc0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d3ea      	bcc.n	80028ae <QF_newX_+0x12>
 80028d8:	e000      	b.n	80028dc <QF_newX_+0x40>
            break;
 80028da:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(310, idx < QF_maxPool_);
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <QF_newX_+0xc0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d304      	bcc.n	80028f0 <QF_newX_+0x54>
 80028e6:	f44f 719b 	mov.w	r1, #310	; 0x136
 80028ea:	481d      	ldr	r0, [pc, #116]	; (8002960 <QF_newX_+0xc4>)
 80028ec:	f7fe fb98 	bl	8001020 <Q_onAssert>
#ifdef Q_SPY
    QF_EPOOL_GET_(QF_pool_[idx], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
#else
    QF_EPOOL_GET_(QF_pool_[idx], e,
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <QF_newX_+0xbc>)
 80028fc:	1898      	adds	r0, r3, r2
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002904:	4293      	cmp	r3, r2
 8002906:	d001      	beq.n	800290c <QF_newX_+0x70>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	e000      	b.n	800290e <QF_newX_+0x72>
 800290c:	2300      	movs	r3, #0
 800290e:	2200      	movs	r2, #0
 8002910:	4619      	mov	r1, r3
 8002912:	f000 f915 	bl	8002b40 <QMPool_get>
 8002916:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    /* was e allocated correctly? */
    QS_CRIT_STAT_
    if (e != (QEvt *)0) {
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <QF_newX_+0x9e>
        e->sig = (QSignal)sig;     /* set signal for this event */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	b29a      	uxth	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3301      	adds	r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2200      	movs	r2, #0
 8002936:	70da      	strb	r2, [r3, #3]
 8002938:	e009      	b.n	800294e <QF_newX_+0xb2>
    else {
        /* This assertion means that the event allocation failed,
         * and this failure cannot be tolerated. The most frequent
         * reason is an event leak in the application.
         */
        Q_ASSERT_ID(320, margin != QF_NO_MARGIN);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002940:	4293      	cmp	r3, r2
 8002942:	d104      	bne.n	800294e <QF_newX_+0xb2>
 8002944:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <QF_newX_+0xc4>)
 800294a:	f7fe fb69 	bl	8001020 <Q_onAssert>
            QS_TIME_PRE_();        /* timestamp */
            QS_EVS_PRE_(evtSize);  /* the size of the event */
            QS_SIG_PRE_(sig);      /* the signal of the event */
        QS_END_PRE_()
    }
    return e; /* can't be NULL if we can't tolerate failed allocation */
 800294e:	693b      	ldr	r3, [r7, #16]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200001b4 	.word	0x200001b4
 800295c:	200001f0 	.word	0x200001f0
 8002960:	080032ec 	.word	0x080032ec

08002964 <QF_gc>:
* dynamic events to the "raw" thread-safe queues (see ::QEQueue). Such
* queues are processed outside of QF and the automatic garbage collection
* is **NOT** performed for these events. In this case you need to call
* QF_gc() explicitly.
*/
void QF_gc(QEvt const * const e) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	789b      	ldrb	r3, [r3, #2]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d031      	beq.n	80029d8 <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8002974:	233f      	movs	r3, #63	; 0x3f
 8002976:	b672      	cpsid	i
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	78db      	ldrb	r3, [r3, #3]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d90a      	bls.n	800299e <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 8002996:	2300      	movs	r3, #0
 8002998:	f383 8811 	msr	BASEPRI, r3
#else
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
#endif
        }
    }
}
 800299c:	e01c      	b.n	80029d8 <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	789b      	ldrb	r3, [r3, #2]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80029a6:	2300      	movs	r3, #0
 80029a8:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <QF_gc+0x7c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d304      	bcc.n	80029c0 <QF_gc+0x5c>
 80029b6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80029ba:	480a      	ldr	r0, [pc, #40]	; (80029e4 <QF_gc+0x80>)
 80029bc:	f7fe fb30 	bl	8001020 <Q_onAssert>
            QF_EPOOL_PUT_(QF_pool_[idx], QF_EVT_CONST_CAST_(e), 0U);
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <QF_gc+0x84>)
 80029cc:	4413      	add	r3, r2
 80029ce:	2200      	movs	r2, #0
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f87c 	bl	8002ad0 <QMPool_put>
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200001f0 	.word	0x200001f0
 80029e4:	080032ec 	.word	0x080032ec
 80029e8:	200001b4 	.word	0x200001b4

080029ec <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
    /*! @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <QMPool_init+0x22>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d903      	bls.n	8002a0e <QMPool_init+0x22>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f113 0f05 	cmn.w	r3, #5
 8002a0c:	d903      	bls.n	8002a16 <QMPool_init+0x2a>
 8002a0e:	2164      	movs	r1, #100	; 0x64
 8002a10:	482e      	ldr	r0, [pc, #184]	; (8002acc <QMPool_init+0xe0>)
 8002a12:	f7fe fb05 	bl	8001020 <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	601a      	str	r2, [r3, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8002a26:	e008      	b.n	8002a3a <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	899b      	ldrh	r3, [r3, #12]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3301      	adds	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	899a      	ldrh	r2, [r3, #12]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d3f0      	bcc.n	8002a28 <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	899b      	ldrh	r3, [r3, #12]
 8002a4a:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d203      	bcs.n	8002a5c <QMPool_init+0x70>
 8002a54:	216e      	movs	r1, #110	; 0x6e
 8002a56:	481d      	ldr	r0, [pc, #116]	; (8002acc <QMPool_init+0xe0>)
 8002a58:	f7fe fae2 	bl	8001020 <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 8002a70:	e012      	b.n	8002a98 <QMPool_init+0xac>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	441a      	add	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	89db      	ldrh	r3, [r3, #14]
 8002a90:	3301      	adds	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d2e8      	bcs.n	8002a72 <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	89da      	ldrh	r2, [r3, #14]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	89da      	ldrh	r2, [r3, #14]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	605a      	str	r2, [r3, #4]
    me->end   = fb;              /* the last block in this pool */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	080032f4 	.word	0x080032f4

08002ad0 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b, uint_fast8_t const qs_id) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter (outside Q_SPY build configuration) */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8a1b      	ldrh	r3, [r3, #16]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	89db      	ldrh	r3, [r3, #14]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d209      	bcs.n	8002afe <QMPool_put+0x2e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d304      	bcc.n	8002afe <QMPool_put+0x2e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d903      	bls.n	8002b06 <QMPool_put+0x36>
 8002afe:	21c8      	movs	r1, #200	; 0xc8
 8002b00:	480e      	ldr	r0, [pc, #56]	; (8002b3c <QMPool_put+0x6c>)
 8002b02:	f7fe fa8d 	bl	8001020 <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002b06:	233f      	movs	r3, #63	; 0x3f
 8002b08:	b672      	cpsid	i
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	601a      	str	r2, [r3, #0]
    ++me->nFree;            /* one more free block in this pool */
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8a1b      	ldrh	r3, [r3, #16]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f383 8811 	msr	BASEPRI, r3
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	080032f4 	.word	0x080032f4

08002b40 <QMPool_get>:
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get(QMPool * const me, uint_fast16_t const margin,
                 uint_fast8_t const qs_id)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
    (void)qs_id; /* unused parameter, if Q_SPY not defined */

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002b4c:	233f      	movs	r3, #63	; 0x3f
 8002b4e:	b672      	cpsid	i
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	b662      	cpsie	i

    /* have more free blocks than the requested margin? */
    QFreeBlock *fb;
    if (me->nFree > (QMPoolCtr)margin) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8a1b      	ldrh	r3, [r3, #16]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d94d      	bls.n	8002c00 <QMPool_get+0xc0>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	617b      	str	r3, [r7, #20]

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_CRIT_(310, fb != (QFreeBlock *)0);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <QMPool_get+0x40>
 8002b70:	2300      	movs	r3, #0
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002b7a:	4826      	ldr	r0, [pc, #152]	; (8002c14 <QMPool_get+0xd4>)
 8002b7c:	f7fe fa50 	bl	8001020 <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8a1b      	ldrh	r3, [r3, #16]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) {
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8a1b      	ldrh	r3, [r3, #16]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10e      	bne.n	8002bbc <QMPool_get+0x7c>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_CRIT_(320, fb_next == (QFreeBlock *)0);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <QMPool_get+0x74>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002bae:	4819      	ldr	r0, [pc, #100]	; (8002c14 <QMPool_get+0xd4>)
 8002bb0:	f7fe fa36 	bl	8001020 <Q_onAssert>

            me->nMin = 0U; /* remember that the pool got empty */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	825a      	strh	r2, [r3, #18]
 8002bba:	e01d      	b.n	8002bf8 <QMPool_get+0xb8>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_CRIT_(330, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d304      	bcc.n	8002bd0 <QMPool_get+0x90>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d907      	bls.n	8002be0 <QMPool_get+0xa0>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002bda:	480e      	ldr	r0, [pc, #56]	; (8002c14 <QMPool_get+0xd4>)
 8002bdc:	f7fe fa20 	bl	8001020 <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8a5a      	ldrh	r2, [r3, #18]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8a1b      	ldrh	r3, [r3, #16]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d904      	bls.n	8002bf8 <QMPool_get+0xb8>
                me->nMin = me->nFree; /* remember the new minimum */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8a1b      	ldrh	r3, [r3, #16]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e001      	b.n	8002c04 <QMPool_get+0xc4>
            QS_MPC_PRE_(me->nMin);  /* min # free blocks ever in the pool */
        QS_END_NOCRIT_PRE_()
    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
            QS_OBJ_PRE_(me);        /* this memory pool */
            QS_MPC_PRE_(me->nFree); /* # of free blocks in the pool */
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8002c04:	2300      	movs	r3, #0
 8002c06:	f383 8811 	msr	BASEPRI, r3

    return fb;  /* return the block or NULL pointer to the caller */
 8002c0a:	697b      	ldr	r3, [r7, #20]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	080032f4 	.word	0x080032f4

08002c18 <QPSet_insert>:
static inline void QPSet_insert(QPSet * const me, uint_fast8_t const n) {
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
    me->bits |= ((QPSetBits)1 << (n - 1U));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <QF_psInit>:
*
* @usage
* The following example shows the typical initialization sequence of QF:
* @include qf_main.c
*/
void QF_psInit(QSubscrList * const subscrSto, enum_t const maxSignal) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    QF_subscrList_   = subscrSto;
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <QF_psInit+0x2c>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6013      	str	r3, [r2, #0]
    QF_maxPubSignal_ = maxSignal;
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <QF_psInit+0x30>)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fc5f 	bl	8002524 <QF_bzero>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200001f4 	.word	0x200001f4
 8002c74:	200001f8 	.word	0x200001f8

08002c78 <QActive_subscribe>:
* @include qf_subscribe.c
*
* @sa
* QF_publish_(), QActive_unsubscribe(), and QActive_unsubscribeAll()
*/
void QActive_subscribe(QActive const * const me, enum_t const sig) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
    uint_fast8_t const p = (uint_fast8_t)me->prio;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7f1b      	ldrb	r3, [r3, #28]
 8002c86:	60fb      	str	r3, [r7, #12]

    Q_REQUIRE_ID(300, ((enum_t)Q_USER_SIG <= sig)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	dd11      	ble.n	8002cb2 <QActive_subscribe+0x3a>
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <QActive_subscribe+0x70>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	da0c      	bge.n	8002cb2 <QActive_subscribe+0x3a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <QActive_subscribe+0x3a>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d806      	bhi.n	8002cb2 <QActive_subscribe+0x3a>
 8002ca4:	4a11      	ldr	r2, [pc, #68]	; (8002cec <QActive_subscribe+0x74>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d004      	beq.n	8002cbc <QActive_subscribe+0x44>
 8002cb2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002cb6:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <QActive_subscribe+0x78>)
 8002cb8:	f7fe f9b2 	bl	8001020 <Q_onAssert>
              && (sig < QF_maxPubSignal_)
              && (0U < p) && (p <= QF_MAX_ACTIVE)
              && (QF_active_[p] == me));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002cbc:	233f      	movs	r3, #63	; 0x3f
 8002cbe:	b672      	cpsid	i
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	b662      	cpsie	i
        QS_SIG_PRE_(sig);  /* the signal of this event */
        QS_OBJ_PRE_(me);   /* this active object */
    QS_END_NOCRIT_PRE_()

    /* set the priority bit */
    QPSet_insert(&QF_PTR_AT_(QF_subscrList_, sig), p);
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <QActive_subscribe+0x7c>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ffa0 	bl	8002c18 <QPSet_insert>

    QF_CRIT_X_();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f383 8811 	msr	BASEPRI, r3
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200001f8 	.word	0x200001f8
 8002cec:	20000130 	.word	0x20000130
 8002cf0:	080032fc 	.word	0x080032fc
 8002cf4:	200001f4 	.word	0x200001f4

08002cf8 <QEQueue_init>:
* objects in the built-int QV and QK kernels, as well as other
* QP ports to OSes/RTOSes that do provide a suitable message queue.
*/
void QEQueue_init(QEQueue * const me, QEvt const * * const qSto,
                  uint_fast16_t const qLen)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <QEQueue_init+0x32>
        me->head = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	7adb      	ldrb	r3, [r3, #11]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	731a      	strb	r2, [r3, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <QMActive_ctor>:
*
* @note  Must be called only ONCE before QMSM_INIT().
*
* @sa QHsm_ctor()
*/
void QMActive_ctor(QMActive * const me, QStateHandler initial) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]

    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8002d56:	2120      	movs	r1, #32
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fbe3 	bl	8002524 <QF_bzero>
    * in the code for QHsm_init_() and QHsm_dispatch_() implemetations,
    * which is expensive. To avoid this code size penalty, in case QHsm is
    * not used in a given project, the call to QMsm_ctor() avoids pulling
    * in the code for QHsm.
    */
    QMsm_ctor(QMSM_CAST_(&me->super.super), initial);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f9ea 	bl	800213c <QMsm_ctor>

    me->super.super.vptr = &vtable.super; /* hook vptr to QMActive vtable */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <QMActive_ctor+0x2c>)
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08003304 	.word	0x08003304

08002d7c <QF_tickX_>:
*/
void QF_tickX_(uint_fast8_t const tickRate, void const * const sender)
#else
void QF_tickX_(uint_fast8_t const tickRate)
#endif
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <QF_tickX_+0x12c>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002d8e:	233f      	movs	r3, #63	; 0x3f
 8002d90:	b672      	cpsid	i
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d123      	bne.n	8002dec <QF_tickX_+0x70>

            /* any new time events armed since the last run of QF_tickX_()? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) {
 8002da4:	4a40      	ldr	r2, [pc, #256]	; (8002ea8 <QF_tickX_+0x12c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	3308      	adds	r3, #8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d071      	beq.n	8002e98 <QF_tickX_+0x11c>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <QF_tickX_+0x4c>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	216e      	movs	r1, #110	; 0x6e
 8002dc2:	483a      	ldr	r0, [pc, #232]	; (8002eac <QF_tickX_+0x130>)
 8002dc4:	f7fe f92c 	bl	8001020 <Q_onAssert>
                prev->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8002dc8:	4a37      	ldr	r2, [pc, #220]	; (8002ea8 <QF_tickX_+0x12c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4413      	add	r3, r2
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	605a      	str	r2, [r3, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 8002dd8:	4a33      	ldr	r2, [pc, #204]	; (8002ea8 <QF_tickX_+0x12c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	3308      	adds	r3, #8
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	899b      	ldrh	r3, [r3, #12]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d111      	bne.n	8002e1a <QF_tickX_+0x9e>
            prev->next = t->next;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	e038      	b.n	8002e8c <QF_tickX_+0x110>
        }
        else {
            --t->ctr;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	899b      	ldrh	r3, [r3, #12]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	819a      	strh	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	899b      	ldrh	r3, [r3, #12]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d125      	bne.n	8002e7e <QF_tickX_+0x102>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	89db      	ldrh	r3, [r3, #14]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <QF_tickX_+0xd2>
                    t->ctr = t->interval; /* rearm the time event */
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	89da      	ldrh	r2, [r3, #14]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	819a      	strh	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e00b      	b.n	8002e66 <QF_tickX_+0xea>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	78db      	ldrb	r3, [r3, #3]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8002e66:	2300      	movs	r3, #0
 8002e68:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	6939      	ldr	r1, [r7, #16]
 8002e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	4798      	blx	r3
 8002e7c:	e006      	b.n	8002e8c <QF_tickX_+0x110>
            }
            else {
                prev = t;         /* advance to this time event */
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 8002e82:	2300      	movs	r3, #0
 8002e84:	f383 8811 	msr	BASEPRI, r3

                /* prevent merging critical sections, see NOTE1 below  */
                QF_CRIT_EXIT_NOP();
 8002e88:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8002e8c:	233f      	movs	r3, #63	; 0x3f
 8002e8e:	b672      	cpsid	i
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	b662      	cpsie	i
    for (;;) {
 8002e96:	e77f      	b.n	8002d98 <QF_tickX_+0x1c>
                break; /* all currently armed time evts. processed */
 8002e98:	bf00      	nop
    }
    QF_CRIT_X_();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f383 8811 	msr	BASEPRI, r3
}
 8002ea0:	bf00      	nop
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200001fc 	.word	0x200001fc
 8002eac:	08003318 	.word	0x08003318

08002eb0 <QTimeEvt_ctorX>:
* object **before** arming the Time Event. The ideal place for initializing
* the time event(s) associated with a given AO is the AO's constructor.
*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint_fast8_t tickRate)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig >= (enum_t)Q_USER_SIG)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	dd02      	ble.n	8002eca <QTimeEvt_ctorX+0x1a>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d904      	bls.n	8002ed4 <QTimeEvt_ctorX+0x24>
 8002eca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ece:	480f      	ldr	r0, [pc, #60]	; (8002f0c <QTimeEvt_ctorX+0x5c>)
 8002ed0:	f7fe f8a6 	bl	8001020 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	819a      	strh	r2, [r3, #12]
    me->interval  = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	81da      	strh	r2, [r3, #14]
    me->super.sig = (QSignal)sig;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	70da      	strb	r2, [r3, #3]
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	08003318 	.word	0x08003318

08002f10 <QTimeEvt_armX>:
* machine of an active object:
* @include qf_state.c
*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	803b      	strh	r3, [r7, #0]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	78db      	ldrb	r3, [r3, #3]
 8002f24:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	60fb      	str	r3, [r7, #12]
    QTimeEvtCtr const ctr = me->ctr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	899b      	ldrh	r3, [r3, #12]
 8002f30:	817b      	strh	r3, [r7, #10]
#endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <QTimeEvt_armX+0x44>
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <QTimeEvt_armX+0x44>
 8002f40:	887b      	ldrh	r3, [r7, #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <QTimeEvt_armX+0x44>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d803      	bhi.n	8002f54 <QTimeEvt_armX+0x44>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d804      	bhi.n	8002f5e <QTimeEvt_armX+0x4e>
 8002f54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002f58:	4818      	ldr	r0, [pc, #96]	; (8002fbc <QTimeEvt_armX+0xac>)
 8002f5a:	f7fe f861 	bl	8001020 <Q_onAssert>
#ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002f5e:	233f      	movs	r3, #63	; 0x3f
 8002f60:	b672      	cpsid	i
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	b662      	cpsie	i
    me->ctr = nTicks;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	883a      	ldrh	r2, [r7, #0]
 8002f72:	81da      	strh	r2, [r3, #14]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in the QF_tickX() function.
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	78db      	ldrb	r3, [r3, #3]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db16      	blt.n	8002fae <QTimeEvt_armX+0x9e>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	78db      	ldrb	r3, [r3, #3]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QF_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QF_tickX()
        * function.
        */
        me->next = (QTimeEvt *)QF_timeEvtHead_[tickRate].act;
 8002f90:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <QTimeEvt_armX+0xb0>)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4413      	add	r3, r2
 8002f98:	3308      	adds	r3, #8
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	605a      	str	r2, [r3, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <QTimeEvt_armX+0xb0>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3308      	adds	r3, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f383 8811 	msr	BASEPRI, r3
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	08003318 	.word	0x08003318
 8002fc0:	200001fc 	.word	0x200001fc

08002fc4 <QTimeEvt_disarm>:
* state machine.
*
* @note
* there is no harm in disarming an already disarmed time event
*/
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
#ifdef Q_SPY
    uint_fast8_t const qs_id = QACTIVE_CAST_(me->act)->prio;
#endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002fcc:	233f      	movs	r3, #63	; 0x3f
 8002fce:	b672      	cpsid	i
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	b662      	cpsie	i

    /* is the time event actually armed? */
    bool wasArmed;
    if (me->ctr != 0U) {
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	899b      	ldrh	r3, [r3, #12]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <QTimeEvt_disarm+0x38>
        wasArmed = true;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ |= QTE_WAS_DISARMED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	78db      	ldrb	r3, [r3, #3]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	70da      	strb	r2, [r3, #3]
            QS_TEC_PRE_(me->ctr);      /* the number of ticks */
            QS_TEC_PRE_(me->interval); /* the interval */
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

        me->ctr = 0U;  /* schedule removal from the list */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	819a      	strh	r2, [r3, #12]
 8002ffa:	e009      	b.n	8003010 <QTimeEvt_disarm+0x4c>
    }
    else { /* the time event was already disarmed automatically */
        wasArmed = false;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ &= (uint8_t)(~QTE_WAS_DISARMED & 0xFFU);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	78db      	ldrb	r3, [r3, #3]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300a:	b2da      	uxtb	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	70da      	strb	r2, [r3, #3]
            QS_OBJ_PRE_(me->act);      /* the target AO */
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE);
        QS_END_NOCRIT_PRE_()

    }
    QF_CRIT_X_();
 8003010:	2300      	movs	r3, #0
 8003012:	f383 8811 	msr	BASEPRI, r3

    return wasArmed;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet * const me) {
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
    return me->bits != 0U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <QPSet_remove>:

/*! Remove element n_ from the set @p me, n = 1U..32U */
static inline void QPSet_remove(QPSet * const me, uint_fast8_t const n) {
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
    me->bits &= (QPSetBits)(~((QPSetBits)1 << (n - 1U)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <QPSet_findMax>:

/*! Find the maximum element in the set @p me
* @note if the set @p me is empty, the function returns zero.
*/
static inline uint_fast8_t QPSet_findMax(QPSet * const me) {
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	f1c3 0320 	rsb	r3, r3, #32
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <QF_init>:
*
* @note QF_init() clears the internal QF variables, so that the framework
* can start correctly even if the startup code fails to clear the
* uninitialized data (as is required by the C Standard).
*/
void QF_init(void) {
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
    QF_maxPool_      = 0U;
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <QF_init+0x38>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    QF_subscrList_   = (QSubscrList *)0;
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <QF_init+0x3c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
    QF_maxPubSignal_ = 0;
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <QF_init+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

    QF_bzero(&QF_timeEvtHead_[0], sizeof(QF_timeEvtHead_));
 80030aa:	2120      	movs	r1, #32
 80030ac:	480a      	ldr	r0, [pc, #40]	; (80030d8 <QF_init+0x44>)
 80030ae:	f7ff fa39 	bl	8002524 <QF_bzero>
    QF_bzero(&QF_active_[0],      sizeof(QF_active_));
 80030b2:	2184      	movs	r1, #132	; 0x84
 80030b4:	4809      	ldr	r0, [pc, #36]	; (80030dc <QF_init+0x48>)
 80030b6:	f7ff fa35 	bl	8002524 <QF_bzero>
    QF_bzero(&QV_readySet_,       sizeof(QV_readySet_));
 80030ba:	2104      	movs	r1, #4
 80030bc:	4808      	ldr	r0, [pc, #32]	; (80030e0 <QF_init+0x4c>)
 80030be:	f7ff fa31 	bl	8002524 <QF_bzero>

#ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 80030c2:	f7fe fffd 	bl	80020c0 <QV_init>
#endif
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200001f0 	.word	0x200001f0
 80030d0:	200001f4 	.word	0x200001f4
 80030d4:	200001f8 	.word	0x200001f8
 80030d8:	200001fc 	.word	0x200001fc
 80030dc:	20000130 	.word	0x20000130
 80030e0:	2000021c 	.word	0x2000021c

080030e4 <QF_run>:
* QF_run() is typically called from main() after you initialize
* the QF and start at least one active object with QACTIVE_START().
*
* @returns In QV, the QF_run() function does not return.
*/
int_t QF_run(void) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
#ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
#endif

    QF_onStartup(); /* application-specific startup callback */
 80030ea:	f7fd ff69 	bl	8000fc0 <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 80030ee:	233f      	movs	r3, #63	; 0x3f
 80030f0:	b672      	cpsid	i
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QV_readySet_)) {
 80030f8:	481a      	ldr	r0, [pc, #104]	; (8003164 <QF_run+0x80>)
 80030fa:	f7ff ff93 	bl	8003024 <QPSet_notEmpty>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d027      	beq.n	8003154 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QV_readySet_);
 8003104:	4817      	ldr	r0, [pc, #92]	; (8003164 <QF_run+0x80>)
 8003106:	f7ff ffb4 	bl	8003072 <QPSet_findMax>
 800310a:	60f8      	str	r0, [r7, #12]
            QActive * const a = QF_active_[p];
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <QF_run+0x84>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
#endif /* Q_SPY */

            QF_INT_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 800311c:	68b8      	ldr	r0, [r7, #8]
 800311e:	f7ff fb23 	bl	8002768 <QActive_get_>
 8003122:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4610      	mov	r0, r2
 8003130:	4798      	blx	r3
            QF_gc(e);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fc16 	bl	8002964 <QF_gc>

            QF_INT_DISABLE();
 8003138:	233f      	movs	r3, #63	; 0x3f
 800313a:	b672      	cpsid	i
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d6      	bne.n	80030f8 <QF_run+0x14>
                QPSet_remove(&QV_readySet_, p);
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	4805      	ldr	r0, [pc, #20]	; (8003164 <QF_run+0x80>)
 800314e:	f7ff ff7a 	bl	8003046 <QPSet_remove>
 8003152:	e7d1      	b.n	80030f8 <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 8003154:	f7fd ff5a 	bl	800100c <QV_onIdle>

            QF_INT_DISABLE();
 8003158:	233f      	movs	r3, #63	; 0x3f
 800315a:	b672      	cpsid	i
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	b662      	cpsie	i
        if (QPSet_notEmpty(&QV_readySet_)) {
 8003162:	e7c9      	b.n	80030f8 <QF_run+0x14>
 8003164:	2000021c 	.word	0x2000021c
 8003168:	20000130 	.word	0x20000130

0800316c <QActive_start_>:
*/
void QActive_start_(QActive * const me, uint_fast8_t prio,
                    QEvt const * * const qSto, uint_fast16_t const qLen,
                    void * const stkSto, uint_fast16_t const stkSize,
                    void const * const par)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
    (void)stkSize; /* unused parameter */

    /*! @pre The priority must be in range and the stack storage must not
    * be provided, because the QV kernel does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, (0U < prio) && (prio <= QF_MAX_ACTIVE)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <QActive_start_+0x20>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b20      	cmp	r3, #32
 8003184:	d802      	bhi.n	800318c <QActive_start_+0x20>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <QActive_start_+0x2a>
 800318c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003190:	4811      	ldr	r0, [pc, #68]	; (80031d8 <QActive_start_+0x6c>)
 8003192:	f7fd ff45 	bl	8001020 <Q_onAssert>
                      && (stkSto == (void *)0));

    QEQueue_init(&me->eQueue, qSto, qLen); /* initialize the built-in queue */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	330c      	adds	r3, #12
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fdaa 	bl	8002cf8 <QEQueue_init>
    me->prio = (uint8_t)prio; /* set the current priority of the AO */
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	771a      	strb	r2, [r3, #28]
    QF_add_(me); /* make QF aware of this active object */
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff f98d 	bl	80024cc <QF_add_>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <QActive_start_+0x56>
 80031ba:	21e1      	movs	r1, #225	; 0xe1
 80031bc:	4806      	ldr	r0, [pc, #24]	; (80031d8 <QActive_start_+0x6c>)
 80031be:	f7fd ff2f 	bl	8001020 <Q_onAssert>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	6a39      	ldr	r1, [r7, #32]
 80031cc:	4610      	mov	r0, r2
 80031ce:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	08003320 	.word	0x08003320

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d0d      	ldr	r5, [pc, #52]	; (8003214 <__libc_init_array+0x38>)
 80031e0:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e2:	1b64      	subs	r4, r4, r5
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	2600      	movs	r6, #0
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	4d0b      	ldr	r5, [pc, #44]	; (800321c <__libc_init_array+0x40>)
 80031ee:	4c0c      	ldr	r4, [pc, #48]	; (8003220 <__libc_init_array+0x44>)
 80031f0:	f000 f820 	bl	8003234 <_init>
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	2600      	movs	r6, #0
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	0800332c 	.word	0x0800332c
 8003218:	0800332c 	.word	0x0800332c
 800321c:	0800332c 	.word	0x0800332c
 8003220:	08003330 	.word	0x08003330

08003224 <memset>:
 8003224:	4402      	add	r2, r0
 8003226:	4603      	mov	r3, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	d100      	bne.n	800322e <memset+0xa>
 800322c:	4770      	bx	lr
 800322e:	f803 1b01 	strb.w	r1, [r3], #1
 8003232:	e7f9      	b.n	8003228 <memset+0x4>

08003234 <_init>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

08003240 <_fini>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr
