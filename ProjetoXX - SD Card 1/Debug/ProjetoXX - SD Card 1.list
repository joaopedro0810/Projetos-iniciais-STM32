
ProjetoXX - SD Card 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ddc  08006ddc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006de4  08006de4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20000240  20000240  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1b9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237e  00000000  00000000  0002d259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a48  00000000  00000000  00030138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223d9  00000000  00000000  00030b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec9d  00000000  00000000  00052f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c74fc  00000000  00000000  00061bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001290f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e14  00000000  00000000  00129144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bc4 	.word	0x08006bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006bc4 	.word	0x08006bc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb08 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f864 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f912 	bl	8000704 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f8e8 	bl	80006b4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80004e4:	f000 f8c6 	bl	8000674 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004e8:	f003 fede 	bl	80042a8 <MX_FATFS_Init>

  FATFS meuFATFS;
  FIL 	meuArquivo;
  UINT 	testeByte;

  if (f_mount(&meuFATFS, SDPath, 1) == FR_OK)
 80004ec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80004f0:	2201      	movs	r2, #1
 80004f2:	4926      	ldr	r1, [pc, #152]	; (800058c <main+0xc0>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f005 fe5b 	bl	80061b0 <f_mount>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d144      	bne.n	800058a <main+0xbe>
  {
	  HAL_GPIO_TogglePin(LED_D2_GPIO_Port, LED_D2_Pin);
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	4823      	ldr	r0, [pc, #140]	; (8000590 <main+0xc4>)
 8000504:	f001 f9eb 	bl	80018de <HAL_GPIO_TogglePin>

	  /**
	   * LEITURA
	   */

	  char caminho[] = "Joao.txt";
 8000508:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800050c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000510:	4a20      	ldr	r2, [pc, #128]	; (8000594 <main+0xc8>)
 8000512:	ca07      	ldmia	r2, {r0, r1, r2}
 8000514:	c303      	stmia	r3!, {r0, r1}
 8000516:	701a      	strb	r2, [r3, #0]
	  f_open(&meuArquivo, caminho, (FA_READ | FA_OPEN_ALWAYS));
 8000518:	4639      	mov	r1, r7
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2211      	movs	r2, #17
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fe8b 	bl	800623c <f_open>
	  f_read(&meuArquivo, rxDados, sizeof(rxDados), &testeByte);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	f107 0010 	add.w	r0, r7, #16
 800052e:	221e      	movs	r2, #30
 8000530:	4919      	ldr	r1, [pc, #100]	; (8000598 <main+0xcc>)
 8000532:	f006 f841 	bl	80065b8 <f_read>
	  f_close(&meuArquivo);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4618      	mov	r0, r3
 800053c:	f006 f9f9 	bl	8006932 <f_close>

	  /**
	   * PEGA O ADC1
	   */

	  buffer1[0] = rxDados[5];
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <main+0xcc>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <main+0xd0>)
 8000546:	701a      	strb	r2, [r3, #0]
	  buffer1[1] = rxDados[6];
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0xcc>)
 800054a:	799a      	ldrb	r2, [r3, #6]
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <main+0xd0>)
 800054e:	705a      	strb	r2, [r3, #1]
	  buffer1[2] = rxDados[7];
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <main+0xcc>)
 8000552:	79da      	ldrb	r2, [r3, #7]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0xd0>)
 8000556:	709a      	strb	r2, [r3, #2]
	  buffer1[3] = rxDados[8];
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0xcc>)
 800055a:	7a1a      	ldrb	r2, [r3, #8]
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0xd0>)
 800055e:	70da      	strb	r2, [r3, #3]

	  adc1 = atoi(buffer1);
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <main+0xd0>)
 8000562:	f006 fa6c 	bl	8006a3e <atoi>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <main+0xd4>)
 800056c:	801a      	strh	r2, [r3, #0]
	  adc1++;
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <main+0xd4>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <main+0xd4>)
 8000578:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(500);
 800057a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057e:	f000 fb25 	bl	8000bcc <HAL_Delay>

	  HAL_GPIO_TogglePin(LED_D2_GPIO_Port, LED_D2_Pin);
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <main+0xc4>)
 8000586:	f001 f9aa 	bl	80018de <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058a:	e7fe      	b.n	800058a <main+0xbe>
 800058c:	20000200 	.word	0x20000200
 8000590:	40020000 	.word	0x40020000
 8000594:	08006bdc 	.word	0x08006bdc
 8000598:	200001d0 	.word	0x200001d0
 800059c:	200001f0 	.word	0x200001f0
 80005a0:	200001f4 	.word	0x200001f4

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 fa72 	bl	8006a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a26      	ldr	r2, [pc, #152]	; (800066c <SystemClock_Config+0xc8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xcc>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000618:	23c0      	movs	r3, #192	; 0xc0
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f973 	bl	8001914 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f8b6 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fbd6 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800065e:	f000 f8a1 	bl	80007a4 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <MX_SDIO_SD_Init+0x3c>)
 800067c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <MX_SDIO_SD_Init+0x38>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	40012c00 	.word	0x40012c00

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_DMA_Init+0x4c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_DMA_Init+0x4c>)
 80006c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_DMA_Init+0x4c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	203b      	movs	r0, #59	; 0x3b
 80006dc:	f000 fb75 	bl	8000dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006e0:	203b      	movs	r0, #59	; 0x3b
 80006e2:	f000 fb8e 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2045      	movs	r0, #69	; 0x45
 80006ec:	f000 fb6d 	bl	8000dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006f0:	2045      	movs	r0, #69	; 0x45
 80006f2:	f000 fb86 	bl	8000e02 <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0x98>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0x98>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0x98>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0x98>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0x98>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_GPIO_Init+0x98>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <MX_GPIO_Init+0x98>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_GPIO_Init+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0x9c>)
 8000774:	f001 f89a 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0x9c>)
 8000790:	f000 fef0 	bl	8001574 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a68      	ldr	r2, [pc, #416]	; (80009c0 <HAL_SD_MspInit+0x1c0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	f040 80c9 	bne.w	80009b6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	4b66      	ldr	r3, [pc, #408]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 800082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082c:	4a65      	ldr	r2, [pc, #404]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 800082e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000832:	6453      	str	r3, [r2, #68]	; 0x44
 8000834:	4b63      	ldr	r3, [pc, #396]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a5e      	ldr	r2, [pc, #376]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
 8000850:	4b5c      	ldr	r3, [pc, #368]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b58      	ldr	r3, [pc, #352]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a57      	ldr	r2, [pc, #348]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b55      	ldr	r3, [pc, #340]	; (80009c4 <HAL_SD_MspInit+0x1c4>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000878:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800087c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800088a:	230c      	movs	r3, #12
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	484c      	ldr	r0, [pc, #304]	; (80009c8 <HAL_SD_MspInit+0x1c8>)
 8000896:	f000 fe6d 	bl	8001574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089a:	2304      	movs	r3, #4
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008aa:	230c      	movs	r3, #12
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4845      	ldr	r0, [pc, #276]	; (80009cc <HAL_SD_MspInit+0x1cc>)
 80008b6:	f000 fe5d 	bl	8001574 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008bc:	4a45      	ldr	r2, [pc, #276]	; (80009d4 <HAL_SD_MspInit+0x1d4>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80008c0:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008da:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ea:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008ee:	2220      	movs	r2, #32
 80008f0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 8000900:	2203      	movs	r2, #3
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 8000906:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800090c:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 800090e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000914:	482e      	ldr	r0, [pc, #184]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 8000916:	f000 fa8f 	bl	8000e38 <HAL_DMA_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000920:	f7ff ff40 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
 800092a:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <HAL_SD_MspInit+0x1d0>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000932:	4a2a      	ldr	r2, [pc, #168]	; (80009dc <HAL_SD_MspInit+0x1dc>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000940:	2240      	movs	r2, #64	; 0x40
 8000942:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000958:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 800095c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000960:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000964:	2220      	movs	r2, #32
 8000966:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000970:	2204      	movs	r2, #4
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000976:	2203      	movs	r2, #3
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 800097c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 8000984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 800098c:	f000 fa54 	bl	8000e38 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000996:	f7ff ff05 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_SD_MspInit+0x1d8>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2031      	movs	r0, #49	; 0x31
 80009ac:	f000 fa0d 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80009b0:	2031      	movs	r0, #49	; 0x31
 80009b2:	f000 fa26 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	20000110 	.word	0x20000110
 80009d4:	40026458 	.word	0x40026458
 80009d8:	20000170 	.word	0x20000170
 80009dc:	400264a0 	.word	0x400264a0

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f8ae 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <SDIO_IRQHandler+0x10>)
 8000a3a:	f001 fe07 	bl	800264c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000008c 	.word	0x2000008c

08000a48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <DMA2_Stream3_IRQHandler+0x10>)
 8000a4e:	f000 fb1b 	bl	8001088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000110 	.word	0x20000110

08000a5c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <DMA2_Stream6_IRQHandler+0x10>)
 8000a62:	f000 fb11 	bl	8001088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000170 	.word	0x20000170

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f005 ffc7 	bl	8006a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd01 	bl	80004cc <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ad8:	08006dec 	.word	0x08006dec
  ldr r2, =_sbss
 8000adc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ae0:	20000240 	.word	0x20000240

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f94f 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe48 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f967 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f92f 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200001f8 	.word	0x200001f8

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200001f8 	.word	0x200001f8

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff3e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff31 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff feb6 	bl	8000bb4 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e099      	b.n	8000f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e74:	e00f      	b.n	8000e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e76:	f7ff fe9d 	bl	8000bb4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d908      	bls.n	8000e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2220      	movs	r2, #32
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e078      	b.n	8000f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e8      	bne.n	8000e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <HAL_DMA_Init+0x158>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d107      	bne.n	8000f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f023 0307 	bic.w	r3, r3, #7
 8000f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d117      	bne.n	8000f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fa9d 	bl	800147c <DMA_CheckFifoParam>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f56:	2301      	movs	r3, #1
 8000f58:	e016      	b.n	8000f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fa54 	bl	8001410 <DMA_CalcBaseAndBitshift>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f70:	223f      	movs	r2, #63	; 0x3f
 8000f72:	409a      	lsls	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	f010803f 	.word	0xf010803f

08000f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_DMA_Start_IT+0x26>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e040      	b.n	800103c <HAL_DMA_Start_IT+0xa8>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d12f      	bne.n	800102e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 f9e6 	bl	80013b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	223f      	movs	r2, #63	; 0x3f
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0216 	orr.w	r2, r2, #22
 8001002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0208 	orr.w	r2, r2, #8
 800101a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e005      	b.n	800103a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001036:	2302      	movs	r3, #2
 8001038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d004      	beq.n	8001062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00c      	b.n	800107c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2205      	movs	r2, #5
 8001066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001094:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <HAL_DMA_IRQHandler+0x248>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a8e      	ldr	r2, [pc, #568]	; (80012d4 <HAL_DMA_IRQHandler+0x24c>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0a9b      	lsrs	r3, r3, #10
 80010a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	2208      	movs	r2, #8
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01a      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0204 	bic.w	r2, r2, #4
 80010da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	2208      	movs	r2, #8
 80010e2:	409a      	lsls	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2201      	movs	r2, #1
 80010fa:	409a      	lsls	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d012      	beq.n	800112a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	2204      	movs	r2, #4
 8001130:	409a      	lsls	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	2204      	movs	r2, #4
 800114e:	409a      	lsls	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001158:	f043 0204 	orr.w	r2, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2210      	movs	r2, #16
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d043      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03c      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2210      	movs	r2, #16
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d018      	beq.n	80011ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d024      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	4798      	blx	r3
 80011b6:	e01f      	b.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01b      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
 80011c8:	e016      	b.n	80011f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0208 	bic.w	r2, r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2220      	movs	r2, #32
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 808f 	beq.w	8001328 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8087 	beq.w	8001328 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	2220      	movs	r2, #32
 8001220:	409a      	lsls	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b05      	cmp	r3, #5
 8001230:	d136      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0216 	bic.w	r2, r2, #22
 8001240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <HAL_DMA_IRQHandler+0x1da>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0208 	bic.w	r2, r2, #8
 8001270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	223f      	movs	r2, #63	; 0x3f
 8001278:	409a      	lsls	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001292:	2b00      	cmp	r3, #0
 8001294:	d07e      	beq.n	8001394 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
        }
        return;
 800129e:	e079      	b.n	8001394 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d01d      	beq.n	80012ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d031      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
 80012cc:	e02c      	b.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000
 80012d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
 80012e8:	e01e      	b.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10f      	bne.n	8001318 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0210 	bic.w	r2, r2, #16
 8001306:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	2b00      	cmp	r3, #0
 800132e:	d032      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d022      	beq.n	8001382 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2205      	movs	r2, #5
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3301      	adds	r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	d307      	bcc.n	8001370 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f2      	bne.n	8001354 <HAL_DMA_IRQHandler+0x2cc>
 800136e:	e000      	b.n	8001372 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001370:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
 8001392:	e000      	b.n	8001396 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001394:	bf00      	nop
    }
  }
}
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b40      	cmp	r3, #64	; 0x40
 80013e0:	d108      	bne.n	80013f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013f2:	e007      	b.n	8001404 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	60da      	str	r2, [r3, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3b10      	subs	r3, #16
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <DMA_CalcBaseAndBitshift+0x64>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <DMA_CalcBaseAndBitshift+0x68>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d909      	bls.n	8001452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	1d1a      	adds	r2, r3, #4
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	659a      	str	r2, [r3, #88]	; 0x58
 8001450:	e007      	b.n	8001462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	aaaaaaab 	.word	0xaaaaaaab
 8001478:	08006c3c 	.word	0x08006c3c

0800147c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d11f      	bne.n	80014d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d856      	bhi.n	800154a <DMA_CheckFifoParam+0xce>
 800149c:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <DMA_CheckFifoParam+0x28>)
 800149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a2:	bf00      	nop
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	080014c7 	.word	0x080014c7
 80014ac:	080014b5 	.word	0x080014b5
 80014b0:	0800154b 	.word	0x0800154b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d046      	beq.n	800154e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014c4:	e043      	b.n	800154e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ce:	d140      	bne.n	8001552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014d4:	e03d      	b.n	8001552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014de:	d121      	bne.n	8001524 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d837      	bhi.n	8001556 <DMA_CheckFifoParam+0xda>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <DMA_CheckFifoParam+0x70>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	08001503 	.word	0x08001503
 80014f4:	080014fd 	.word	0x080014fd
 80014f8:	08001515 	.word	0x08001515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001500:	e030      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d025      	beq.n	800155a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001512:	e022      	b.n	800155a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800151c:	d11f      	bne.n	800155e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001522:	e01c      	b.n	800155e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d903      	bls.n	8001532 <DMA_CheckFifoParam+0xb6>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d003      	beq.n	8001538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001530:	e018      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
      break;
 8001536:	e015      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
      break;
 8001548:	e00b      	b.n	8001562 <DMA_CheckFifoParam+0xe6>
      break;
 800154a:	bf00      	nop
 800154c:	e00a      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 800154e:	bf00      	nop
 8001550:	e008      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 8001552:	bf00      	nop
 8001554:	e006      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 8001556:	bf00      	nop
 8001558:	e004      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 800155a:	bf00      	nop
 800155c:	e002      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;   
 800155e:	bf00      	nop
 8001560:	e000      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 8001562:	bf00      	nop
    }
  } 
  
  return status; 
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e16b      	b.n	8001868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 815a 	bne.w	8001862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80b4 	beq.w	8001862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b60      	ldr	r3, [pc, #384]	; (8001880 <HAL_GPIO_Init+0x30c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a5f      	ldr	r2, [pc, #380]	; (8001880 <HAL_GPIO_Init+0x30c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_GPIO_Init+0x30c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a5b      	ldr	r2, [pc, #364]	; (8001884 <HAL_GPIO_Init+0x310>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_GPIO_Init+0x314>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d02b      	beq.n	800179a <HAL_GPIO_Init+0x226>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a51      	ldr	r2, [pc, #324]	; (800188c <HAL_GPIO_Init+0x318>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d025      	beq.n	8001796 <HAL_GPIO_Init+0x222>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a50      	ldr	r2, [pc, #320]	; (8001890 <HAL_GPIO_Init+0x31c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01f      	beq.n	8001792 <HAL_GPIO_Init+0x21e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4f      	ldr	r2, [pc, #316]	; (8001894 <HAL_GPIO_Init+0x320>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x21a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4e      	ldr	r2, [pc, #312]	; (8001898 <HAL_GPIO_Init+0x324>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x216>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4d      	ldr	r2, [pc, #308]	; (800189c <HAL_GPIO_Init+0x328>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x212>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <HAL_GPIO_Init+0x32c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x20e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_GPIO_Init+0x330>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x20a>
 800177a:	2307      	movs	r3, #7
 800177c:	e00e      	b.n	800179c <HAL_GPIO_Init+0x228>
 800177e:	2308      	movs	r3, #8
 8001780:	e00c      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001782:	2306      	movs	r3, #6
 8001784:	e00a      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001786:	2305      	movs	r3, #5
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x228>
 800178a:	2304      	movs	r3, #4
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x228>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x228>
 800179a:	2300      	movs	r3, #0
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ac:	4935      	ldr	r1, [pc, #212]	; (8001884 <HAL_GPIO_Init+0x310>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_GPIO_Init+0x334>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_GPIO_Init+0x334>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	f67f ae90 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40021400 	.word	0x40021400
 80018a0:	40021800 	.word	0x40021800
 80018a4:	40021c00 	.word	0x40021c00
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	619a      	str	r2, [r3, #24]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018f0:	887a      	ldrh	r2, [r7, #2]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4013      	ands	r3, r2
 80018f6:	041a      	lsls	r2, r3, #16
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	400b      	ands	r3, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e267      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d075      	beq.n	8001a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001932:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001946:	2b08      	cmp	r3, #8
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194a:	4b82      	ldr	r3, [pc, #520]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001956:	d10b      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b7e      	ldr	r3, [pc, #504]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d05b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x108>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d157      	bne.n	8001a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e242      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x74>
 800197a:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a75      	ldr	r2, [pc, #468]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e01d      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b70      	ldr	r3, [pc, #448]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6f      	ldr	r2, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6c      	ldr	r2, [pc, #432]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 80019ac:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a68      	ldr	r2, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a65      	ldr	r2, [pc, #404]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f8f2 	bl	8000bb4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff f8ee 	bl	8000bb4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e207      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0xc0>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8de 	bl	8000bb4 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff f8da 	bl	8000bb4 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1f3      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0xe8>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a42:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e1c7      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e03a      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x244>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f893 	bl	8000bb4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f88f 	bl	8000bb4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1a8      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4925      	ldr	r1, [pc, #148]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_RCC_OscConfig+0x244>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f872 	bl	8000bb4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f86e 	bl	8000bb4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e187      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d036      	beq.n	8001b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d016      	beq.n	8001b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_RCC_OscConfig+0x248>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f852 	bl	8000bb4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff f84e 	bl	8000bb4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e167      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_OscConfig+0x240>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x200>
 8001b32:	e01b      	b.n	8001b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_OscConfig+0x248>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f83b 	bl	8000bb4 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	e00e      	b.n	8001b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff f837 	bl	8000bb4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d907      	bls.n	8001b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e150      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470000 	.word	0x42470000
 8001b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ea      	bne.n	8001b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8097 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7e:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a7c      	ldr	r2, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b74      	ldr	r3, [pc, #464]	; (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a73      	ldr	r2, [pc, #460]	; (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7fe fff7 	bl	8000bb4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7fe fff3 	bl	8000bb4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e10c      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x474>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2ea>
 8001bf0:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a63      	ldr	r2, [pc, #396]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x324>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x30c>
 8001c06:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0x324>
 8001c20:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2c:	4b55      	ldr	r3, [pc, #340]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	4a54      	ldr	r2, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c32:	f023 0304 	bic.w	r3, r3, #4
 8001c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d015      	beq.n	8001c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7fe ffb8 	bl	8000bb4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7fe ffb4 	bl	8000bb4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0cb      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0ee      	beq.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7fe ffa2 	bl	8000bb4 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7fe ff9e 	bl	8000bb4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e0b5      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ee      	bne.n	8001c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a1 	beq.w	8001df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d05c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d141      	bne.n	8001d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe ff72 	bl	8000bb4 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7fe ff6e 	bl	8000bb4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e087      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	491b      	ldr	r1, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe ff47 	bl	8000bb4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe ff43 	bl	8000bb4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e05c      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x416>
 8001d48:	e054      	b.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_OscConfig+0x478>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe ff30 	bl	8000bb4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d58:	f7fe ff2c 	bl	8000bb4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e045      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
 8001d76:	e03d      	b.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e038      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4ec>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d028      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d121      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d11a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0cc      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d90c      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d044      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4934      	ldr	r1, [pc, #208]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fe5e 	bl	8000bb4 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe fe5a 	bl	8000bb4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20c      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fdbe 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08006c2c 	.word	0x08006c2c
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd4:	b090      	sub	sp, #64	; 0x40
 8001fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d00d      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	f200 80a1 	bhi.w	800213c <HAL_RCC_GetSysClockFreq+0x16c>
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x3a>
 8002002:	e09b      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_GetSysClockFreq+0x184>)
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002008:	e09b      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800200e:	e098      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002010:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201a:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d028      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	2200      	movs	r2, #0
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	627a      	str	r2, [r7, #36]	; 0x24
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002038:	2100      	movs	r1, #0
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800203c:	fb03 f201 	mul.w	r2, r3, r1
 8002040:	2300      	movs	r3, #0
 8002042:	fb00 f303 	mul.w	r3, r0, r3
 8002046:	4413      	add	r3, r2
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <HAL_RCC_GetSysClockFreq+0x188>)
 800204a:	fba0 1202 	umull	r1, r2, r0, r2
 800204e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002050:	460a      	mov	r2, r1
 8002052:	62ba      	str	r2, [r7, #40]	; 0x28
 8002054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002056:	4413      	add	r3, r2
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205c:	2200      	movs	r2, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	61fa      	str	r2, [r7, #28]
 8002062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800206a:	f7fe f8ad 	bl	80001c8 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4613      	mov	r3, r2
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002076:	e053      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	2200      	movs	r2, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	617a      	str	r2, [r7, #20]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800208a:	f04f 0b00 	mov.w	fp, #0
 800208e:	4652      	mov	r2, sl
 8002090:	465b      	mov	r3, fp
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	0159      	lsls	r1, r3, #5
 800209c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a0:	0150      	lsls	r0, r2, #5
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	ebb2 080a 	subs.w	r8, r2, sl
 80020aa:	eb63 090b 	sbc.w	r9, r3, fp
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020c2:	ebb2 0408 	subs.w	r4, r2, r8
 80020c6:	eb63 0509 	sbc.w	r5, r3, r9
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	00eb      	lsls	r3, r5, #3
 80020d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d8:	00e2      	lsls	r2, r4, #3
 80020da:	4614      	mov	r4, r2
 80020dc:	461d      	mov	r5, r3
 80020de:	eb14 030a 	adds.w	r3, r4, sl
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	eb45 030b 	adc.w	r3, r5, fp
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f6:	4629      	mov	r1, r5
 80020f8:	028b      	lsls	r3, r1, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002100:	4621      	mov	r1, r4
 8002102:	028a      	lsls	r2, r1, #10
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	2200      	movs	r2, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	60fa      	str	r2, [r7, #12]
 8002110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002114:	f7fe f858 	bl	80001c8 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetSysClockFreq+0x184>)
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002144:	4618      	mov	r0, r3
 8002146:	3740      	adds	r7, #64	; 0x40
 8002148:	46bd      	mov	sp, r7
 800214a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	00f42400 	.word	0x00f42400
 8002158:	017d7840 	.word	0x017d7840

0800215c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e022      	b.n	80021b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe fb3d 	bl	8000800 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f814 	bl	80021bc <HAL_SD_InitCard>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00a      	b.n	80021b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80021d8:	2376      	movs	r3, #118	; 0x76
 80021da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681d      	ldr	r5, [r3, #0]
 80021e0:	466c      	mov	r4, sp
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f4:	4628      	mov	r0, r5
 80021f6:	f001 fae4 	bl	80037c2 <SDIO_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e04f      	b.n	80022ac <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_SD_InitCard+0xf8>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fb1c 	bl	8003854 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_SD_InitCard+0xf8>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002222:	2002      	movs	r0, #2
 8002224:	f7fe fcd2 	bl	8000bcc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 f805 	bl	8003238 <SD_PowerON>
 800222e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e02e      	b.n	80022ac <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 ff24 	bl	800309c <SD_InitCard>
 8002254:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e01b      	b.n	80022ac <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227c:	4618      	mov	r0, r3
 800227e:	f001 fb7b 	bl	8003978 <SDMMC_CmdBlockLength>
 8002282:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00f      	beq.n	80022aa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_SD_InitCard+0xfc>)
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdb0      	pop	{r4, r5, r7, pc}
 80022b4:	422580a0 	.word	0x422580a0
 80022b8:	004005ff 	.word	0x004005ff

080022bc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	; 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0c0      	b.n	8002466 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 80b9 	bne.w	8002464 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80022f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	441a      	add	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	429a      	cmp	r2, r3
 8002304:	d907      	bls.n	8002316 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0a7      	b.n	8002466 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a4c      	ldr	r2, [pc, #304]	; (8002470 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a4b      	ldr	r2, [pc, #300]	; (8002474 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2200      	movs	r2, #0
 8002350:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3380      	adds	r3, #128	; 0x80
 8002380:	4619      	mov	r1, r3
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	f7fe fe03 	bl	8000f94 <HAL_DMA_Start_IT>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d017      	beq.n	80023c4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e050      	b.n	8002466 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d002      	beq.n	80023d8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	025b      	lsls	r3, r3, #9
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
 80023dc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	025b      	lsls	r3, r3, #9
 80023e2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80023e4:	2390      	movs	r3, #144	; 0x90
 80023e6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80023e8:	2302      	movs	r3, #2
 80023ea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f107 0210 	add.w	r2, r7, #16
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 fa8e 	bl	8003920 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d90a      	bls.n	8002420 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2282      	movs	r2, #130	; 0x82
 800240e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002416:	4618      	mov	r0, r3
 8002418:	f001 faf2 	bl	8003a00 <SDMMC_CmdReadMultiBlock>
 800241c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800241e:	e009      	b.n	8002434 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2281      	movs	r2, #129	; 0x81
 8002424:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fac5 	bl	80039bc <SDMMC_CmdReadSingleBlock>
 8002432:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e002      	b.n	8002466 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3730      	adds	r7, #48	; 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	08002eab 	.word	0x08002eab
 8002474:	08002f1d 	.word	0x08002f1d
 8002478:	004005ff 	.word	0x004005ff
 800247c:	4225858c 	.word	0x4225858c

08002480 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0c5      	b.n	8002634 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	f040 80be 	bne.w	8002632 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80024bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	441a      	add	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d907      	bls.n	80024da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0ac      	b.n	8002634 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	4a4e      	ldr	r2, [pc, #312]	; (800263c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	4a4d      	ldr	r2, [pc, #308]	; (8002640 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800250c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	2200      	movs	r2, #0
 8002514:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	2b01      	cmp	r3, #1
 800251c:	d002      	beq.n	8002524 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d90a      	bls.n	8002540 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	22a0      	movs	r2, #160	; 0xa0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002536:	4618      	mov	r0, r3
 8002538:	f001 faa6 	bl	8003a88 <SDMMC_CmdWriteMultiBlock>
 800253c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800253e:	e009      	b.n	8002554 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2290      	movs	r2, #144	; 0x90
 8002544:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800254c:	4618      	mov	r0, r3
 800254e:	f001 fa79 	bl	8003a44 <SDMMC_CmdWriteSingleBlock>
 8002552:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a39      	ldr	r2, [pc, #228]	; (8002644 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e059      	b.n	8002634 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3380      	adds	r3, #128	; 0x80
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	025b      	lsls	r3, r3, #9
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	f7fe fce9 	bl	8000f94 <HAL_DMA_Start_IT>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01c      	beq.n	8002602 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80025d6:	f023 0302 	bic.w	r3, r3, #2
 80025da:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e018      	b.n	8002634 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800260e:	2390      	movs	r3, #144	; 0x90
 8002610:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800261a:	2301      	movs	r3, #1
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f107 0210 	add.w	r2, r7, #16
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f979 	bl	8003920 <SDIO_ConfigData>

      return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3730      	adds	r7, #48	; 0x30
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	08002e81 	.word	0x08002e81
 8002640:	08002f1d 	.word	0x08002f1d
 8002644:	004005ff 	.word	0x004005ff
 8002648:	4225858c 	.word	0x4225858c

0800264c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_SD_IRQHandler+0x2e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 ffff 	bl	8003676 <SD_Read_IT>
 8002678:	e165      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 808f 	beq.w	80027a8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002692:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80026a2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80026a6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d039      	beq.n	8002736 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <HAL_SD_IRQHandler+0x8a>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d011      	beq.n	80026fa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f9f6 	bl	8003acc <SDMMC_CmdStopTransfer>
 80026e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f92f 	bl	8002958 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8002702:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_SD_IRQHandler+0xda>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f001 fe64 	bl	80043f4 <HAL_SD_RxCpltCallback>
 800272c:	e10b      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f001 fe56 	bl	80043e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002734:	e107      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8102 	beq.w	8002946 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d011      	beq.n	8002770 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f001 f9bb 	bl	8003acc <SDMMC_CmdStopTransfer>
 8002756:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8f4 	bl	8002958 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80e5 	bne.w	8002946 <HAL_SD_IRQHandler+0x2fa>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80df 	bne.w	8002946 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0208 	bic.w	r2, r2, #8
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 fe1d 	bl	80043e0 <HAL_SD_TxCpltCallback>
}
 80027a6:	e0ce      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_SD_IRQHandler+0x17c>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 ffa9 	bl	8003718 <SD_Write_IT>
 80027c6:	e0be      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ce:	f240 233a 	movw	r3, #570	; 0x23a
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80b6 	beq.w	8002946 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	f043 0202 	orr.w	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	f043 0208 	orr.w	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	f043 0208 	orr.w	r2, r3, #8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f240 723a 	movw	r2, #1850	; 0x73a
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f924 	bl	8003acc <SDMMC_CmdStopTransfer>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f855 	bl	8002958 <HAL_SD_ErrorCallback>
}
 80028ae:	e04a      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d045      	beq.n	8002946 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_SD_IRQHandler+0x282>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d011      	beq.n	80028f2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_SD_IRQHandler+0x304>)
 80028d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fbb2 	bl	8001044 <HAL_DMA_Abort_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02f      	beq.n	8002946 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fb68 	bl	8002fc0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80028f0:	e029      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <HAL_SD_IRQHandler+0x2ba>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_SD_IRQHandler+0x308>)
 800290c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fb96 	bl	8001044 <HAL_DMA_Abort_IT>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fb83 	bl	800302e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002928:	e00d      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f001 fd44 	bl	80043cc <HAL_SD_AbortCallback>
}
 8002944:	e7ff      	b.n	8002946 <HAL_SD_IRQHandler+0x2fa>
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	08002fc1 	.word	0x08002fc1
 8002954:	0800302f 	.word	0x0800302f

08002958 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	0f9b      	lsrs	r3, r3, #30
 800297c:	b2da      	uxtb	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	b2da      	uxtb	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002998:	0e1b      	lsrs	r3, r3, #24
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029cc:	0d1b      	lsrs	r3, r3, #20
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ea:	0bdb      	lsrs	r3, r3, #15
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fc:	0b9b      	lsrs	r3, r3, #14
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a0e:	0b5b      	lsrs	r3, r3, #13
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	0b1b      	lsrs	r3, r3, #12
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d163      	bne.n	8002b04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a40:	009a      	lsls	r2, r3, #2
 8002a42:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002a4c:	0f92      	lsrs	r2, r2, #30
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a58:	0edb      	lsrs	r3, r3, #27
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6a:	0e1b      	lsrs	r3, r3, #24
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7c:	0d5b      	lsrs	r3, r3, #21
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa0:	0bdb      	lsrs	r3, r3, #15
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7e1b      	ldrb	r3, [r3, #24]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ace:	fb03 f202 	mul.w	r2, r3, r2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	7a1b      	ldrb	r3, [r3, #8]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002af0:	0a52      	lsrs	r2, r2, #9
 8002af2:	fb03 f202 	mul.w	r2, r3, r2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60
 8002b02:	e031      	b.n	8002b68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d11d      	bne.n	8002b48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	3301      	adds	r3, #1
 8002b28:	029a      	lsls	r2, r3, #10
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	661a      	str	r2, [r3, #96]	; 0x60
 8002b46:	e00f      	b.n	8002b68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_SD_GetCardCSD+0x344>)
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e09d      	b.n	8002ca4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6c:	0b9b      	lsrs	r3, r3, #14
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	09db      	lsrs	r3, r3, #7
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	0fdb      	lsrs	r3, r3, #31
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	0f5b      	lsrs	r3, r3, #29
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	0d9b      	lsrs	r3, r3, #22
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	0d5b      	lsrs	r3, r3, #21
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	0c1b      	lsrs	r3, r3, #16
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	0bdb      	lsrs	r3, r3, #15
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	0b9b      	lsrs	r3, r3, #14
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	0b5b      	lsrs	r3, r3, #13
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	0b1b      	lsrs	r3, r3, #12
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	004005ff 	.word	0x004005ff

08002cb4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d02e      	beq.n	8002d8a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d106      	bne.n	8002d42 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8002d40:	e029      	b.n	8002d96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d10a      	bne.n	8002d60 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fb2a 	bl	80033a4 <SD_WideBus_Enable>
 8002d50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d5e:	e01a      	b.n	8002d96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fb67 	bl	800343a <SD_WideBus_Disable>
 8002d6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7a:	e00c      	b.n	8002d96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
 8002d88:	e005      	b.n	8002d96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002db4:	e01f      	b.n	8002df6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681d      	ldr	r5, [r3, #0]
 8002ddc:	466c      	mov	r4, sp
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 fce6 	bl	80037c2 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fdba 	bl	8003978 <SDMMC_CmdBlockLength>
 8002e04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00c      	beq.n	8002e26 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	004005ff 	.word	0x004005ff

08002e40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa7e 	bl	8003354 <SD_SendStatus>
 8002e58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	0a5b      	lsrs	r3, r3, #9
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002e76:	693b      	ldr	r3, [r7, #16]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	2b82      	cmp	r3, #130	; 0x82
 8002ebe:	d111      	bne.n	8002ee4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fe01 	bl	8003acc <SDMMC_CmdStopTransfer>
 8002eca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fd3a 	bl	8002958 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0208 	bic.w	r2, r2, #8
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f240 523a 	movw	r2, #1338	; 0x53a
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f001 fa71 	bl	80043f4 <HAL_SD_RxCpltCallback>
#endif
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fa36 	bl	800139c <HAL_DMA_GetError>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d03e      	beq.n	8002fb4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d002      	beq.n	8002f52 <SD_DMAError+0x36>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d12d      	bne.n	8002fae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <SD_DMAError+0xa0>)
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002f68:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7ff ff62 	bl	8002e40 <HAL_SD_GetCardState>
 8002f7c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d002      	beq.n	8002f8a <SD_DMAError+0x6e>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d10a      	bne.n	8002fa0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fd9c 	bl	8003acc <SDMMC_CmdStopTransfer>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff fcd2 	bl	8002958 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	004005ff 	.word	0x004005ff

08002fc0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff ff31 	bl	8002e40 <HAL_SD_GetCardState>
 8002fde:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b06      	cmp	r3, #6
 8002ff2:	d002      	beq.n	8002ffa <SD_DMATxAbort+0x3a>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10a      	bne.n	8003010 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fd64 	bl	8003acc <SDMMC_CmdStopTransfer>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	431a      	orrs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f001 f9d7 	bl	80043cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800301e:	e002      	b.n	8003026 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff fc99 	bl	8002958 <HAL_SD_ErrorCallback>
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f240 523a 	movw	r2, #1338	; 0x53a
 8003044:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fefa 	bl	8002e40 <HAL_SD_GetCardState>
 800304c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b06      	cmp	r3, #6
 8003060:	d002      	beq.n	8003068 <SD_DMARxAbort+0x3a>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10a      	bne.n	800307e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fd2d 	bl	8003acc <SDMMC_CmdStopTransfer>
 8003072:	4602      	mov	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f001 f9a0 	bl	80043cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800308c:	e002      	b.n	8003094 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fc62 	bl	8002958 <HAL_SD_ErrorCallback>
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800309c:	b5b0      	push	{r4, r5, r7, lr}
 800309e:	b094      	sub	sp, #80	; 0x50
 80030a0:	af04      	add	r7, sp, #16
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80030a4:	2301      	movs	r3, #1
 80030a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fbdf 	bl	8003870 <SDIO_GetPowerState>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030bc:	e0b8      	b.n	8003230 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d02f      	beq.n	8003126 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fe08 	bl	8003ce0 <SDMMC_CmdSendCID>
 80030d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <SD_InitCard+0x40>
    {
      return errorstate;
 80030d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030da:	e0a9      	b.n	8003230 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fc09 	bl	80038fa <SDIO_GetResponse>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2104      	movs	r1, #4
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fc00 	bl	80038fa <SDIO_GetResponse>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2108      	movs	r1, #8
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fbf7 	bl	80038fa <SDIO_GetResponse>
 800310c:	4602      	mov	r2, r0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	210c      	movs	r1, #12
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fbee 	bl	80038fa <SDIO_GetResponse>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	2b03      	cmp	r3, #3
 800312c:	d00d      	beq.n	800314a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f107 020e 	add.w	r2, r7, #14
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fe0e 	bl	8003d5a <SDMMC_CmdSetRelAdd>
 800313e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <SD_InitCard+0xae>
    {
      return errorstate;
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	e072      	b.n	8003230 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	2b03      	cmp	r3, #3
 8003150:	d036      	beq.n	80031c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003152:	89fb      	ldrh	r3, [r7, #14]
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f000 fdd8 	bl	8003d1c <SDMMC_CmdSendCSD>
 800316c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003176:	e05b      	b.n	8003230 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fbbb 	bl	80038fa <SDIO_GetResponse>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2104      	movs	r1, #4
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fbb2 	bl	80038fa <SDIO_GetResponse>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2108      	movs	r1, #8
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fba9 	bl	80038fa <SDIO_GetResponse>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	210c      	movs	r1, #12
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fba0 	bl	80038fa <SDIO_GetResponse>
 80031ba:	4602      	mov	r2, r0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2104      	movs	r1, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fb97 	bl	80038fa <SDIO_GetResponse>
 80031cc:	4603      	mov	r3, r0
 80031ce:	0d1a      	lsrs	r2, r3, #20
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fbc6 	bl	800296c <HAL_SD_GetCardCSD>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031ea:	e021      	b.n	8003230 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	2200      	movs	r2, #0
 80031f8:	461c      	mov	r4, r3
 80031fa:	4615      	mov	r5, r2
 80031fc:	4622      	mov	r2, r4
 80031fe:	462b      	mov	r3, r5
 8003200:	4608      	mov	r0, r1
 8003202:	f000 fc85 	bl	8003b10 <SDMMC_CmdSelDesel>
 8003206:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <SD_InitCard+0x176>
  {
    return errorstate;
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	e00e      	b.n	8003230 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681d      	ldr	r5, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	466c      	mov	r4, sp
 800321a:	f103 0210 	add.w	r2, r3, #16
 800321e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003224:	3304      	adds	r3, #4
 8003226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003228:	4628      	mov	r0, r5
 800322a:	f000 faca 	bl	80037c2 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3740      	adds	r7, #64	; 0x40
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}

08003238 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fc80 	bl	8003b56 <SDMMC_CmdGoIdleState>
 8003256:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <SD_PowerON+0x2a>
  {
    return errorstate;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	e072      	b.n	8003348 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fc93 	bl	8003b92 <SDMMC_CmdOperCond>
 800326c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fc69 	bl	8003b56 <SDMMC_CmdGoIdleState>
 8003284:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <SD_PowerON+0x5e>
    {
      return errorstate;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	e05b      	b.n	8003348 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329a:	2b01      	cmp	r3, #1
 800329c:	d137      	bne.n	800330e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fc93 	bl	8003bd0 <SDMMC_CmdAppCommand>
 80032aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d02d      	beq.n	800330e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032b6:	e047      	b.n	8003348 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fc86 	bl	8003bd0 <SDMMC_CmdAppCommand>
 80032c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	e03b      	b.n	8003348 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	491e      	ldr	r1, [pc, #120]	; (8003350 <SD_PowerON+0x118>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fc9c 	bl	8003c14 <SDMMC_CmdAppOperCommand>
 80032dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032e8:	e02e      	b.n	8003348 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fb02 	bl	80038fa <SDIO_GetResponse>
 80032f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	0fdb      	lsrs	r3, r3, #31
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <SD_PowerON+0xcc>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <SD_PowerON+0xce>
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]

    count++;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003314:	4293      	cmp	r3, r2
 8003316:	d802      	bhi.n	800331e <SD_PowerON+0xe6>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0cc      	beq.n	80032b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003324:	4293      	cmp	r3, r2
 8003326:	d902      	bls.n	800332e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332c:	e00c      	b.n	8003348 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
 800333e:	e002      	b.n	8003346 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	c1100000 	.word	0xc1100000

08003354 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003368:	e018      	b.n	800339c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 fd10 	bl	8003d9c <SDMMC_CmdSendStatus>
 800337c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	e009      	b.n	800339c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fab3 	bl	80038fa <SDIO_GetResponse>
 8003394:	4602      	mov	r2, r0
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fa9d 	bl	80038fa <SDIO_GetResponse>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ca:	d102      	bne.n	80033d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80033cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d0:	e02f      	b.n	8003432 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f879 	bl	80034d0 <SD_FindSCR>
 80033de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	e023      	b.n	8003432 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01c      	beq.n	800342e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f000 fbe5 	bl	8003bd0 <SDMMC_CmdAppCommand>
 8003406:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	e00f      	b.n	8003432 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fc1e 	bl	8003c5a <SDMMC_CmdBusWidth>
 800341e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	e003      	b.n	8003432 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800342a:	2300      	movs	r3, #0
 800342c:	e001      	b.n	8003432 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800342e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fa52 	bl	80038fa <SDIO_GetResponse>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003460:	d102      	bne.n	8003468 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003466:	e02f      	b.n	80034c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f82e 	bl	80034d0 <SD_FindSCR>
 8003474:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	e023      	b.n	80034c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01c      	beq.n	80034c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fb9a 	bl	8003bd0 <SDMMC_CmdAppCommand>
 800349c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	e00f      	b.n	80034c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fbd3 	bl	8003c5a <SDMMC_CmdBusWidth>
 80034b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	e003      	b.n	80034c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e001      	b.n	80034c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b08f      	sub	sp, #60	; 0x3c
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80034da:	f7fd fb6b 	bl	8000bb4 <HAL_GetTick>
 80034de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2108      	movs	r1, #8
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fa3e 	bl	8003978 <SDMMC_CmdBlockLength>
 80034fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	e0b2      	b.n	800366e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f000 fb5b 	bl	8003bd0 <SDMMC_CmdAppCommand>
 800351a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	e0a3      	b.n	800366e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800352c:	2308      	movs	r3, #8
 800352e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003530:	2330      	movs	r3, #48	; 0x30
 8003532:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003534:	2302      	movs	r3, #2
 8003536:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800353c:	2301      	movs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f107 0210 	add.w	r2, r7, #16
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9e8 	bl	8003920 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fba2 	bl	8003c9e <SDMMC_CmdSendSCR>
 800355a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02a      	beq.n	80035b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	e083      	b.n	800366e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	f107 0208 	add.w	r2, r7, #8
 8003580:	18d4      	adds	r4, r2, r3
 8003582:	4608      	mov	r0, r1
 8003584:	f000 f948 	bl	8003818 <SDIO_ReadFIFO>
 8003588:	4603      	mov	r3, r0
 800358a:	6023      	str	r3, [r4, #0]
      index++;
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	3301      	adds	r3, #1
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
 8003592:	e006      	b.n	80035a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035a2:	f7fd fb07 	bl	8000bb4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d102      	bne.n	80035b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80035b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035b6:	e05a      	b.n	800366e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0cf      	beq.n	8003566 <SD_FindSCR+0x96>
 80035c6:	e000      	b.n	80035ca <SD_FindSCR+0xfa>
      break;
 80035c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2208      	movs	r2, #8
 80035de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80035e0:	2308      	movs	r3, #8
 80035e2:	e044      	b.n	800366e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80035fa:	2302      	movs	r3, #2
 80035fc:	e037      	b.n	800366e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2220      	movs	r2, #32
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003614:	2320      	movs	r3, #32
 8003616:	e02a      	b.n	800366e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003620:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	061a      	lsls	r2, r3, #24
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800362e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003638:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0e1b      	lsrs	r3, r3, #24
 800363e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	601a      	str	r2, [r3, #0]
    scr++;
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	3304      	adds	r3, #4
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	061a      	lsls	r2, r3, #24
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003656:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003660:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	373c      	adds	r7, #60	; 0x3c
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03f      	beq.n	8003710 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e033      	b.n	80036fe <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f8bc 	bl	8003818 <SDIO_ReadFIFO>
 80036a0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3301      	adds	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3301      	adds	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	3b01      	subs	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0e1b      	lsrs	r3, r3, #24
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3301      	adds	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b07      	cmp	r3, #7
 8003702:	d9c8      	bls.n	8003696 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d043      	beq.n	80037ba <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e037      	b.n	80037a8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3301      	adds	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3b01      	subs	r3, #1
 8003748:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	021a      	lsls	r2, r3, #8
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3b01      	subs	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	041a      	lsls	r2, r3, #16
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3301      	adds	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3b01      	subs	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	061a      	lsls	r2, r3, #24
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3301      	adds	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3b01      	subs	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f107 0208 	add.w	r2, r7, #8
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f848 	bl	8003832 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3301      	adds	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	d9c4      	bls.n	8003738 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80037c2:	b084      	sub	sp, #16
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	f107 001c 	add.w	r0, r7, #28
 80037d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80037d8:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80037da:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80037dc:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80037e0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80037e4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80037e8:	431a      	orrs	r2, r3
             Init.ClockDiv
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80037ec:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80037fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	b004      	add	sp, #16
 8003816:	4770      	bx	lr

08003818 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2203      	movs	r2, #3
 8003860:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0303 	and.w	r3, r3, #3
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80038b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80038b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038c6:	f023 030f 	bic.w	r3, r3, #15
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	b2db      	uxtb	r3, r3
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3314      	adds	r3, #20
 8003908:	461a      	mov	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
}  
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003946:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800394c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003952:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800396a:	2300      	movs	r3, #0

}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003986:	2310      	movs	r3, #16
 8003988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ff74 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	2110      	movs	r1, #16
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa18 	bl	8003de0 <SDMMC_GetCmdResp1>
 80039b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039b2:	69fb      	ldr	r3, [r7, #28]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80039ca:	2311      	movs	r3, #17
 80039cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039ce:	2340      	movs	r3, #64	; 0x40
 80039d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff52 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	2111      	movs	r1, #17
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f9f6 	bl	8003de0 <SDMMC_GetCmdResp1>
 80039f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039f6:	69fb      	ldr	r3, [r7, #28]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003a0e:	2312      	movs	r3, #18
 8003a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a12:	2340      	movs	r3, #64	; 0x40
 8003a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ff30 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a30:	2112      	movs	r1, #18
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f9d4 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003a52:	2318      	movs	r3, #24
 8003a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a56:	2340      	movs	r3, #64	; 0x40
 8003a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff0e 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	2118      	movs	r1, #24
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9b2 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003a96:	2319      	movs	r3, #25
 8003a98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff feec 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	2119      	movs	r1, #25
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f990 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003ad8:	230c      	movs	r3, #12
 8003ada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fecb 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <SDMMC_CmdStopTransfer+0x40>)
 8003af8:	210c      	movs	r1, #12
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f970 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003b00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b02:	69fb      	ldr	r3, [r7, #28]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	05f5e100 	.word	0x05f5e100

08003b10 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003b20:	2307      	movs	r3, #7
 8003b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b24:	2340      	movs	r3, #64	; 0x40
 8003b26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b30:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b32:	f107 0310 	add.w	r3, r7, #16
 8003b36:	4619      	mov	r1, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fea7 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	2107      	movs	r1, #7
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f94b 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3728      	adds	r7, #40	; 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b088      	sub	sp, #32
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fe86 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb65 	bl	8004250 <SDMMC_GetCmdError>
 8003b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b88:	69fb      	ldr	r3, [r7, #28]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b088      	sub	sp, #32
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003b9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ba4:	2340      	movs	r3, #64	; 0x40
 8003ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fe67 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 faf8 	bl	80041b4 <SDMMC_GetCmdResp7>
 8003bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003bde:	2337      	movs	r3, #55	; 0x37
 8003be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003be2:	2340      	movs	r3, #64	; 0x40
 8003be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bf0:	f107 0308 	add.w	r3, r7, #8
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff fe48 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	2137      	movs	r1, #55	; 0x37
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8ec 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003c2a:	2329      	movs	r3, #41	; 0x29
 8003c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe22 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f9ff 	bl	800404c <SDMMC_GetCmdResp3>
 8003c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c50:	69fb      	ldr	r3, [r7, #28]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b088      	sub	sp, #32
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003c68:	2306      	movs	r3, #6
 8003c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c6c:	2340      	movs	r3, #64	; 0x40
 8003c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe03 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	2106      	movs	r1, #6
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8a7 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c94:	69fb      	ldr	r3, [r7, #28]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003caa:	2333      	movs	r3, #51	; 0x33
 8003cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fde2 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	2133      	movs	r1, #51	; 0x33
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f886 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003cec:	2302      	movs	r3, #2
 8003cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003cf0:	23c0      	movs	r3, #192	; 0xc0
 8003cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fdc1 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f956 	bl	8003fbc <SDMMC_GetCmdResp2>
 8003d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d12:	69fb      	ldr	r3, [r7, #28]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003d2a:	2309      	movs	r3, #9
 8003d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d2e:	23c0      	movs	r3, #192	; 0xc0
 8003d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	4619      	mov	r1, r3
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fda2 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f937 	bl	8003fbc <SDMMC_GetCmdResp2>
 8003d4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d50:	69fb      	ldr	r3, [r7, #28]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b088      	sub	sp, #32
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d6c:	2340      	movs	r3, #64	; 0x40
 8003d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fd83 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	2103      	movs	r1, #3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f99c 	bl	80040c8 <SDMMC_GetCmdResp6>
 8003d90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d92:	69fb      	ldr	r3, [r7, #28]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003daa:	230d      	movs	r3, #13
 8003dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fd62 	bl	800388c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	210d      	movs	r1, #13
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f806 	bl	8003de0 <SDMMC_GetCmdResp1>
 8003dd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	460b      	mov	r3, r1
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dee:	4b70      	ldr	r3, [pc, #448]	; (8003fb0 <SDMMC_GetCmdResp1+0x1d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a70      	ldr	r2, [pc, #448]	; (8003fb4 <SDMMC_GetCmdResp1+0x1d4>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	0a5a      	lsrs	r2, r3, #9
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	61fa      	str	r2, [r7, #28]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e10:	e0c9      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ef      	beq.n	8003e02 <SDMMC_GetCmdResp1+0x22>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ea      	bne.n	8003e02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e3e:	2304      	movs	r3, #4
 8003e40:	e0b1      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0a6      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	22c5      	movs	r2, #197	; 0xc5
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fd3e 	bl	80038e0 <SDIO_GetCommandResponse>
 8003e64:	4603      	mov	r3, r0
 8003e66:	461a      	mov	r2, r3
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d001      	beq.n	8003e72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e099      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e72:	2100      	movs	r1, #0
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff fd40 	bl	80038fa <SDIO_GetResponse>
 8003e7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <SDMMC_GetCmdResp1+0x1d8>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e08d      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da02      	bge.n	8003e96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e94:	e087      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	e080      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	e079      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec0:	e071      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed0:	e069      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee0:	e061      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef0:	e059      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f00:	e051      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f10:	e049      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f20:	e041      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f30:	e039      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f40:	e031      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f50:	e029      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003f5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f60:	e021      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f70:	e019      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003f7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f80:	e011      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003f8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f90:	e009      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003f9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003fa0:	e001      	b.n	8003fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	10624dd3 	.word	0x10624dd3
 8003fb8:	fdffe008 	.word	0xfdffe008

08003fbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <SDMMC_GetCmdResp2+0x88>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <SDMMC_GetCmdResp2+0x8c>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0a5b      	lsrs	r3, r3, #9
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e5a      	subs	r2, r3, #1
 8003fde:	60fa      	str	r2, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003fe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fe8:	e026      	b.n	8004038 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ef      	beq.n	8003fda <SDMMC_GetCmdResp2+0x1e>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ea      	bne.n	8003fda <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004016:	2304      	movs	r3, #4
 8004018:	e00e      	b.n	8004038 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800402c:	2301      	movs	r3, #1
 800402e:	e003      	b.n	8004038 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	22c5      	movs	r2, #197	; 0xc5
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	20000000 	.word	0x20000000
 8004048:	10624dd3 	.word	0x10624dd3

0800404c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <SDMMC_GetCmdResp3+0x74>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <SDMMC_GetCmdResp3+0x78>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	fb02 f303 	mul.w	r3, r2, r3
 8004068:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	60fa      	str	r2, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004078:	e01b      	b.n	80040b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ef      	beq.n	800406a <SDMMC_GetCmdResp3+0x1e>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ea      	bne.n	800406a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2204      	movs	r2, #4
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040a6:	2304      	movs	r3, #4
 80040a8:	e003      	b.n	80040b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	22c5      	movs	r2, #197	; 0xc5
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000000 	.word	0x20000000
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	460b      	mov	r3, r1
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040d6:	4b35      	ldr	r3, [pc, #212]	; (80041ac <SDMMC_GetCmdResp6+0xe4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <SDMMC_GetCmdResp6+0xe8>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	0a5b      	lsrs	r3, r3, #9
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040fa:	e052      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ef      	beq.n	80040ec <SDMMC_GetCmdResp6+0x24>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1ea      	bne.n	80040ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2204      	movs	r2, #4
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004128:	2304      	movs	r3, #4
 800412a:	e03a      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800413e:	2301      	movs	r3, #1
 8004140:	e02f      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff fbcc 	bl	80038e0 <SDIO_GetCommandResponse>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	7afb      	ldrb	r3, [r7, #11]
 800414e:	4293      	cmp	r3, r2
 8004150:	d001      	beq.n	8004156 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004152:	2301      	movs	r3, #1
 8004154:	e025      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	22c5      	movs	r2, #197	; 0xc5
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800415c:	2100      	movs	r1, #0
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fbcb 	bl	80038fa <SDIO_GetResponse>
 8004164:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800417a:	2300      	movs	r3, #0
 800417c:	e011      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800418c:	e009      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419c:	e001      	b.n	80041a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800419e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000000 	.word	0x20000000
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <SDMMC_GetCmdResp7+0x94>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a22      	ldr	r2, [pc, #136]	; (800424c <SDMMC_GetCmdResp7+0x98>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0a5b      	lsrs	r3, r3, #9
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	60fa      	str	r2, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041e0:	e02c      	b.n	800423c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ef      	beq.n	80041d2 <SDMMC_GetCmdResp7+0x1e>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ea      	bne.n	80041d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800420e:	2304      	movs	r3, #4
 8004210:	e014      	b.n	800423c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004224:	2301      	movs	r3, #1
 8004226:	e009      	b.n	800423c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2240      	movs	r2, #64	; 0x40
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800423a:	2300      	movs	r3, #0
  
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000000 	.word	0x20000000
 800424c:	10624dd3 	.word	0x10624dd3

08004250 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <SDMMC_GetCmdError+0x50>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <SDMMC_GetCmdError+0x54>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	60fa      	str	r2, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800427c:	e009      	b.n	8004292 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f1      	beq.n	800426e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	22c5      	movs	r2, #197	; 0xc5
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000000 	.word	0x20000000
 80042a4:	10624dd3 	.word	0x10624dd3

080042a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80042ac:	4904      	ldr	r1, [pc, #16]	; (80042c0 <MX_FATFS_Init+0x18>)
 80042ae:	4805      	ldr	r0, [pc, #20]	; (80042c4 <MX_FATFS_Init+0x1c>)
 80042b0:	f002 fbb6 	bl	8006a20 <FATFS_LinkDriver>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <MX_FATFS_Init+0x20>)
 80042ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000200 	.word	0x20000200
 80042c4:	08006c44 	.word	0x08006c44
 80042c8:	200001fc 	.word	0x200001fc

080042cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80042d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80042e6:	f000 f896 	bl	8004416 <BSP_SD_IsDetected>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d001      	beq.n	80042f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e012      	b.n	800431a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80042f4:	480b      	ldr	r0, [pc, #44]	; (8004324 <BSP_SD_Init+0x48>)
 80042f6:	f7fd ff31 	bl	800215c <HAL_SD_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004308:	4806      	ldr	r0, [pc, #24]	; (8004324 <BSP_SD_Init+0x48>)
 800430a:	f7fe fcff 	bl	8002d0c <HAL_SD_ConfigWideBusOperation>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004318:	79fb      	ldrb	r3, [r7, #7]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2000008c 	.word	0x2000008c

08004328 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	4806      	ldr	r0, [pc, #24]	; (8004358 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004340:	f7fd ffbc 	bl	80022bc <HAL_SD_ReadBlocks_DMA>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	2000008c 	.word	0x2000008c

0800435c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	4806      	ldr	r0, [pc, #24]	; (800438c <BSP_SD_WriteBlocks_DMA+0x30>)
 8004374:	f7fe f884 	bl	8002480 <HAL_SD_WriteBlocks_DMA>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004382:	7dfb      	ldrb	r3, [r7, #23]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	2000008c 	.word	0x2000008c

08004390 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004394:	4805      	ldr	r0, [pc, #20]	; (80043ac <BSP_SD_GetCardState+0x1c>)
 8004396:	f7fe fd53 	bl	8002e40 <HAL_SD_GetCardState>
 800439a:	4603      	mov	r3, r0
 800439c:	2b04      	cmp	r3, #4
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000008c 	.word	0x2000008c

080043b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4803      	ldr	r0, [pc, #12]	; (80043c8 <BSP_SD_GetCardInfo+0x18>)
 80043bc:	f7fe fc7a 	bl	8002cb4 <HAL_SD_GetCardInfo>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2000008c 	.word	0x2000008c

080043cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80043d4:	f000 f818 	bl	8004408 <BSP_SD_AbortCallback>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80043e8:	f000 f98c 	bl	8004704 <BSP_SD_WriteCpltCallback>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80043fc:	f000 f98e 	bl	800471c <BSP_SD_ReadCpltCallback>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0

}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800441c:	2301      	movs	r3, #1
 800441e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	b2db      	uxtb	r3, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004438:	f7fc fbbc 	bl	8000bb4 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800443e:	e006      	b.n	800444e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004440:	f7ff ffa6 	bl	8004390 <BSP_SD_GetCardState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800444a:	2300      	movs	r3, #0
 800444c:	e009      	b.n	8004462 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800444e:	f7fc fbb1 	bl	8000bb4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d8f0      	bhi.n	8004440 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <SD_CheckStatus+0x38>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800447c:	f7ff ff88 	bl	8004390 <BSP_SD_GetCardState>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <SD_CheckStatus+0x38>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <SD_CheckStatus+0x38>)
 8004494:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004496:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <SD_CheckStatus+0x38>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b2db      	uxtb	r3, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000009 	.word	0x20000009

080044a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80044b2:	f7ff ff13 	bl	80042dc <BSP_SD_Init>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ffd4 	bl	800446c <SD_CheckStatus>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <SD_initialize+0x34>)
 80044ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <SD_initialize+0x34>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	b2db      	uxtb	r3, r3
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000009 	.word	0x20000009

080044e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ffbd 	bl	800446c <SD_CheckStatus>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004510:	f247 5030 	movw	r0, #30000	; 0x7530
 8004514:	f7ff ff8c 	bl	8004430 <SD_CheckStatusWithTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	da01      	bge.n	8004522 <SD_read+0x26>
  {
    return res;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	e03b      	b.n	800459a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	68b8      	ldr	r0, [r7, #8]
 8004528:	f7ff fefe 	bl	8004328 <BSP_SD_ReadBlocks_DMA>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d132      	bne.n	8004598 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <SD_read+0xa8>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004538:	f7fc fb3c 	bl	8000bb4 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800453e:	bf00      	nop
 8004540:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <SD_read+0xa8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d108      	bne.n	800455a <SD_read+0x5e>
 8004548:	f7fc fb34 	bl	8000bb4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f247 522f 	movw	r2, #29999	; 0x752f
 8004556:	4293      	cmp	r3, r2
 8004558:	d9f2      	bls.n	8004540 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <SD_read+0xa8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
 8004566:	e017      	b.n	8004598 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <SD_read+0xa8>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800456e:	f7fc fb21 	bl	8000bb4 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004574:	e007      	b.n	8004586 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004576:	f7ff ff0b 	bl	8004390 <BSP_SD_GetCardState>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <SD_read+0x8a>
          {
            res = RES_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004584:	e008      	b.n	8004598 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004586:	f7fc fb15 	bl	8000bb4 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f247 522f 	movw	r2, #29999	; 0x752f
 8004594:	4293      	cmp	r3, r2
 8004596:	d9ee      	bls.n	8004576 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000208 	.word	0x20000208

080045a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <SD_write+0xa8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80045c2:	f247 5030 	movw	r0, #30000	; 0x7530
 80045c6:	f7ff ff33 	bl	8004430 <SD_CheckStatusWithTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da01      	bge.n	80045d4 <SD_write+0x2c>
  {
    return res;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	e038      	b.n	8004646 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	68b8      	ldr	r0, [r7, #8]
 80045da:	f7ff febf 	bl	800435c <BSP_SD_WriteBlocks_DMA>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d12f      	bne.n	8004644 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80045e4:	f7fc fae6 	bl	8000bb4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80045ea:	bf00      	nop
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <SD_write+0xa8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <SD_write+0x5e>
 80045f4:	f7fc fade 	bl	8000bb4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8004602:	4293      	cmp	r3, r2
 8004604:	d9f2      	bls.n	80045ec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <SD_write+0xa8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
 8004612:	e017      	b.n	8004644 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <SD_write+0xa8>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800461a:	f7fc facb 	bl	8000bb4 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004620:	e007      	b.n	8004632 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004622:	f7ff feb5 	bl	8004390 <BSP_SD_GetCardState>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <SD_write+0x8a>
          {
            res = RES_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
            break;
 8004630:	e008      	b.n	8004644 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004632:	f7fc fabf 	bl	8000bb4 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004640:	4293      	cmp	r3, r2
 8004642:	d9ee      	bls.n	8004622 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000204 	.word	0x20000204

08004654 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	603a      	str	r2, [r7, #0]
 800465e:	71fb      	strb	r3, [r7, #7]
 8004660:	460b      	mov	r3, r1
 8004662:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800466a:	4b25      	ldr	r3, [pc, #148]	; (8004700 <SD_ioctl+0xac>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <SD_ioctl+0x28>
 8004678:	2303      	movs	r3, #3
 800467a:	e03c      	b.n	80046f6 <SD_ioctl+0xa2>

  switch (cmd)
 800467c:	79bb      	ldrb	r3, [r7, #6]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d834      	bhi.n	80046ec <SD_ioctl+0x98>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <SD_ioctl+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	08004699 	.word	0x08004699
 800468c:	080046a1 	.word	0x080046a1
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046d3 	.word	0x080046d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800469e:	e028      	b.n	80046f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fe83 	bl	80043b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046b6:	e01c      	b.n	80046f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fe77 	bl	80043b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046d0:	e00f      	b.n	80046f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80046d2:	f107 030c 	add.w	r3, r7, #12
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fe6a 	bl	80043b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	0a5a      	lsrs	r2, r3, #9
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046ea:	e002      	b.n	80046f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80046f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3730      	adds	r7, #48	; 0x30
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000009 	.word	0x20000009

08004704 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <BSP_SD_WriteCpltCallback+0x14>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000204 	.word	0x20000204

0800471c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <BSP_SD_ReadCpltCallback+0x14>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000208 	.word	0x20000208

08004734 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	4a08      	ldr	r2, [pc, #32]	; (8004764 <disk_status+0x30>)
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	79fa      	ldrb	r2, [r7, #7]
 800474c:	4905      	ldr	r1, [pc, #20]	; (8004764 <disk_status+0x30>)
 800474e:	440a      	add	r2, r1
 8004750:	7a12      	ldrb	r2, [r2, #8]
 8004752:	4610      	mov	r0, r2
 8004754:	4798      	blx	r3
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]
  return stat;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000234 	.word	0x20000234

08004768 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <disk_initialize+0x48>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <disk_initialize+0x48>)
 8004784:	2101      	movs	r1, #1
 8004786:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <disk_initialize+0x48>)
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	79fa      	ldrb	r2, [r7, #7]
 8004796:	4906      	ldr	r1, [pc, #24]	; (80047b0 <disk_initialize+0x48>)
 8004798:	440a      	add	r2, r1
 800479a:	7a12      	ldrb	r2, [r2, #8]
 800479c:	4610      	mov	r0, r2
 800479e:	4798      	blx	r3
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000234 	.word	0x20000234

080047b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <disk_read+0x3c>)
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	689c      	ldr	r4, [r3, #8]
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <disk_read+0x3c>)
 80047d4:	4413      	add	r3, r2
 80047d6:	7a18      	ldrb	r0, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	47a0      	blx	r4
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000234 	.word	0x20000234

080047f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <disk_write+0x3c>)
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68dc      	ldr	r4, [r3, #12]
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	4a07      	ldr	r2, [pc, #28]	; (8004830 <disk_write+0x3c>)
 8004814:	4413      	add	r3, r2
 8004816:	7a18      	ldrb	r0, [r3, #8]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	47a0      	blx	r4
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]
  return res;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
}
 8004826:	4618      	mov	r0, r3
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd90      	pop	{r4, r7, pc}
 800482e:	bf00      	nop
 8004830:	20000234 	.word	0x20000234

08004834 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	603a      	str	r2, [r7, #0]
 800483e:	71fb      	strb	r3, [r7, #7]
 8004840:	460b      	mov	r3, r1
 8004842:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <disk_ioctl+0x38>)
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	79fa      	ldrb	r2, [r7, #7]
 8004852:	4906      	ldr	r1, [pc, #24]	; (800486c <disk_ioctl+0x38>)
 8004854:	440a      	add	r2, r1
 8004856:	7a10      	ldrb	r0, [r2, #8]
 8004858:	79b9      	ldrb	r1, [r7, #6]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	4798      	blx	r3
 800485e:	4603      	mov	r3, r0
 8004860:	73fb      	strb	r3, [r7, #15]
  return res;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000234 	.word	0x20000234

08004870 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3301      	adds	r3, #1
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004880:	89fb      	ldrh	r3, [r7, #14]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	b21a      	sxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	b21b      	sxth	r3, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	b21b      	sxth	r3, r3
 8004890:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004892:	89fb      	ldrh	r3, [r7, #14]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3303      	adds	r3, #3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	3202      	adds	r2, #2
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	3201      	adds	r2, #1
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	887a      	ldrh	r2, [r7, #2]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	1c53      	adds	r3, r2, #1
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	6179      	str	r1, [r7, #20]
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f1      	bne.n	800498e <mem_cpy+0x1a>
	}
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	617a      	str	r2, [r7, #20]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f3      	bne.n	80049c6 <mem_set+0x10>
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	61fa      	str	r2, [r7, #28]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	61ba      	str	r2, [r7, #24]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	1acb      	subs	r3, r1, r3
 8004a18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <mem_cmp+0x40>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0eb      	beq.n	8004a04 <mem_cmp+0x18>

	return r;
 8004a2c:	697b      	ldr	r3, [r7, #20]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a44:	e002      	b.n	8004a4c <chk_chr+0x12>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <chk_chr+0x26>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d1f2      	bne.n	8004a46 <chk_chr+0xc>
	return *str;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	781b      	ldrb	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e029      	b.n	8004ad8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a84:	4a27      	ldr	r2, [pc, #156]	; (8004b24 <chk_lock+0xb4>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	4413      	add	r3, r2
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01d      	beq.n	8004ace <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a92:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <chk_lock+0xb4>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	4413      	add	r3, r2
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d116      	bne.n	8004ad2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <chk_lock+0xb4>)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4413      	add	r3, r2
 8004aac:	3304      	adds	r3, #4
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d10c      	bne.n	8004ad2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <chk_lock+0xb4>)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	4413      	add	r3, r2
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d102      	bne.n	8004ad2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004acc:	e007      	b.n	8004ade <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d9d2      	bls.n	8004a84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d109      	bne.n	8004af8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <chk_lock+0x80>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d101      	bne.n	8004af4 <chk_lock+0x84>
 8004af0:	2300      	movs	r3, #0
 8004af2:	e010      	b.n	8004b16 <chk_lock+0xa6>
 8004af4:	2312      	movs	r3, #18
 8004af6:	e00e      	b.n	8004b16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d108      	bne.n	8004b10 <chk_lock+0xa0>
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <chk_lock+0xb4>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	4413      	add	r3, r2
 8004b06:	330c      	adds	r3, #12
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	d101      	bne.n	8004b14 <chk_lock+0xa4>
 8004b10:	2310      	movs	r3, #16
 8004b12:	e000      	b.n	8004b16 <chk_lock+0xa6>
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000214 	.word	0x20000214

08004b28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	e002      	b.n	8004b3a <enq_lock+0x12>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3301      	adds	r3, #1
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d806      	bhi.n	8004b4e <enq_lock+0x26>
 8004b40:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <enq_lock+0x40>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	4413      	add	r3, r2
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f2      	bne.n	8004b34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000214 	.word	0x20000214

08004b6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e01f      	b.n	8004bbc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b7c:	4a41      	ldr	r2, [pc, #260]	; (8004c84 <inc_lock+0x118>)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	4413      	add	r3, r2
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d113      	bne.n	8004bb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	; (8004c84 <inc_lock+0x118>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d109      	bne.n	8004bb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004ba2:	4a38      	ldr	r2, [pc, #224]	; (8004c84 <inc_lock+0x118>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	4413      	add	r3, r2
 8004baa:	3308      	adds	r3, #8
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d006      	beq.n	8004bc4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d9dc      	bls.n	8004b7c <inc_lock+0x10>
 8004bc2:	e000      	b.n	8004bc6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004bc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d132      	bne.n	8004c32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e002      	b.n	8004bd8 <inc_lock+0x6c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d806      	bhi.n	8004bec <inc_lock+0x80>
 8004bde:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <inc_lock+0x118>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f2      	bne.n	8004bd2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d101      	bne.n	8004bf6 <inc_lock+0x8a>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e040      	b.n	8004c78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4922      	ldr	r1, [pc, #136]	; (8004c84 <inc_lock+0x118>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	440b      	add	r3, r1
 8004c02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	491e      	ldr	r1, [pc, #120]	; (8004c84 <inc_lock+0x118>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	440b      	add	r3, r1
 8004c10:	3304      	adds	r3, #4
 8004c12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	491a      	ldr	r1, [pc, #104]	; (8004c84 <inc_lock+0x118>)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	440b      	add	r3, r1
 8004c20:	3308      	adds	r3, #8
 8004c22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <inc_lock+0x118>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	4413      	add	r3, r2
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	2200      	movs	r2, #0
 8004c30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <inc_lock+0xe0>
 8004c38:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <inc_lock+0x118>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4413      	add	r3, r2
 8004c40:	330c      	adds	r3, #12
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <inc_lock+0xe0>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e015      	b.n	8004c78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <inc_lock+0xf8>
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <inc_lock+0x118>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4413      	add	r3, r2
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	e001      	b.n	8004c68 <inc_lock+0xfc>
 8004c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c68:	4906      	ldr	r1, [pc, #24]	; (8004c84 <inc_lock+0x118>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	440b      	add	r3, r1
 8004c70:	330c      	adds	r3, #12
 8004c72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	20000214 	.word	0x20000214

08004c88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d825      	bhi.n	8004ce8 <dec_lock+0x60>
		n = Files[i].ctr;
 8004c9c:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <dec_lock+0x74>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	4413      	add	r3, r2
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb0:	d101      	bne.n	8004cb6 <dec_lock+0x2e>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <dec_lock+0x3a>
 8004cbc:	89fb      	ldrh	r3, [r7, #14]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <dec_lock+0x74>)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	4413      	add	r3, r2
 8004cca:	330c      	adds	r3, #12
 8004ccc:	89fa      	ldrh	r2, [r7, #14]
 8004cce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <dec_lock+0x5a>
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <dec_lock+0x74>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	4413      	add	r3, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	737b      	strb	r3, [r7, #13]
 8004ce6:	e001      	b.n	8004cec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004ce8:	2302      	movs	r3, #2
 8004cea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004cec:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000214 	.word	0x20000214

08004d00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e010      	b.n	8004d30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d0e:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <clear_lock+0x44>)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4413      	add	r3, r2
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d105      	bne.n	8004d2a <clear_lock+0x2a>
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <clear_lock+0x44>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4413      	add	r3, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d9eb      	bls.n	8004d0e <clear_lock+0xe>
	}
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000214 	.word	0x20000214

08004d48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d034      	beq.n	8004dc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7858      	ldrb	r0, [r3, #1]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	f7ff fd40 	bl	80047f4 <disk_write>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
 8004d7e:	e022      	b.n	8004dc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	1ad2      	subs	r2, r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d217      	bcs.n	8004dc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	789b      	ldrb	r3, [r3, #2]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	e010      	b.n	8004dc0 <sync_window+0x78>
					wsect += fs->fsize;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4413      	add	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7858      	ldrb	r0, [r3, #1]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004db2:	2301      	movs	r3, #1
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	f7ff fd1d 	bl	80047f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d8eb      	bhi.n	8004d9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d01b      	beq.n	8004e20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ffad 	bl	8004d48 <sync_window>
 8004dee:	4603      	mov	r3, r0
 8004df0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d113      	bne.n	8004e20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7858      	ldrb	r0, [r3, #1]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e02:	2301      	movs	r3, #1
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	f7ff fcd5 	bl	80047b4 <disk_read>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff87 	bl	8004d48 <sync_window>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d158      	bne.n	8004ef6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d148      	bne.n	8004ede <sync_fs+0xb2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d144      	bne.n	8004ede <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3330      	adds	r3, #48	; 0x30
 8004e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fda9 	bl	80049b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3330      	adds	r3, #48	; 0x30
 8004e68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fd38 	bl	80048e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3330      	adds	r3, #48	; 0x30
 8004e7a:	4921      	ldr	r1, [pc, #132]	; (8004f00 <sync_fs+0xd4>)
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fd4d 	bl	800491c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3330      	adds	r3, #48	; 0x30
 8004e86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e8a:	491e      	ldr	r1, [pc, #120]	; (8004f04 <sync_fs+0xd8>)
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fd45 	bl	800491c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3330      	adds	r3, #48	; 0x30
 8004e96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7ff fd3b 	bl	800491c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3330      	adds	r3, #48	; 0x30
 8004eaa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7ff fd31 	bl	800491c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7858      	ldrb	r0, [r3, #1]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f7ff fc8e 	bl	80047f4 <disk_write>
			fs->fsi_flag = 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fca4 	bl	8004834 <disk_ioctl>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <sync_fs+0xca>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	41615252 	.word	0x41615252
 8004f04:	61417272 	.word	0x61417272

08004f08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	3b02      	subs	r3, #2
 8004f16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	3b02      	subs	r3, #2
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d301      	bcc.n	8004f28 <clust2sect+0x20>
 8004f24:	2300      	movs	r3, #0
 8004f26:	e008      	b.n	8004f3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	895b      	ldrh	r3, [r3, #10]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	fb03 f202 	mul.w	r2, r3, r2
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	4413      	add	r3, r2
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d904      	bls.n	8004f66 <get_fat+0x20>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f66:	2301      	movs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e08f      	b.n	800508c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d062      	beq.n	8005040 <get_fat+0xfa>
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	dc7c      	bgt.n	8005078 <get_fat+0x132>
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d002      	beq.n	8004f88 <get_fat+0x42>
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d042      	beq.n	800500c <get_fat+0xc6>
 8004f86:	e077      	b.n	8005078 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0a5b      	lsrs	r3, r3, #9
 8004f9e:	4413      	add	r3, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6938      	ldr	r0, [r7, #16]
 8004fa4:	f7ff ff14 	bl	8004dd0 <move_window>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d167      	bne.n	800507e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	60fa      	str	r2, [r7, #12]
 8004fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	0a5b      	lsrs	r3, r3, #9
 8004fca:	4413      	add	r3, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6938      	ldr	r0, [r7, #16]
 8004fd0:	f7ff fefe 	bl	8004dd0 <move_window>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d153      	bne.n	8005082 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	461a      	mov	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <get_fat+0xbc>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	e002      	b.n	8005008 <get_fat+0xc2>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005008:	617b      	str	r3, [r7, #20]
			break;
 800500a:	e03f      	b.n	800508c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	4413      	add	r3, r2
 8005016:	4619      	mov	r1, r3
 8005018:	6938      	ldr	r0, [r7, #16]
 800501a:	f7ff fed9 	bl	8004dd0 <move_window>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d130      	bne.n	8005086 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005032:	4413      	add	r3, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fc1b 	bl	8004870 <ld_word>
 800503a:	4603      	mov	r3, r0
 800503c:	617b      	str	r3, [r7, #20]
			break;
 800503e:	e025      	b.n	800508c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	09db      	lsrs	r3, r3, #7
 8005048:	4413      	add	r3, r2
 800504a:	4619      	mov	r1, r3
 800504c:	6938      	ldr	r0, [r7, #16]
 800504e:	f7ff febf 	bl	8004dd0 <move_window>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d118      	bne.n	800508a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005066:	4413      	add	r3, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fc19 	bl	80048a0 <ld_dword>
 800506e:	4603      	mov	r3, r0
 8005070:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005074:	617b      	str	r3, [r7, #20]
			break;
 8005076:	e009      	b.n	800508c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e006      	b.n	800508c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800508a:	bf00      	nop
		}
	}

	return val;
 800508c:	697b      	ldr	r3, [r7, #20]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005096:	b590      	push	{r4, r7, lr}
 8005098:	b089      	sub	sp, #36	; 0x24
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80050a2:	2302      	movs	r3, #2
 80050a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f240 80d2 	bls.w	8005252 <put_fat+0x1bc>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	f080 80cc 	bcs.w	8005252 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	f000 8096 	beq.w	80051f0 <put_fat+0x15a>
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	f300 80cd 	bgt.w	8005264 <put_fat+0x1ce>
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d002      	beq.n	80050d4 <put_fat+0x3e>
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d06e      	beq.n	80051b0 <put_fat+0x11a>
 80050d2:	e0c7      	b.n	8005264 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4413      	add	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	0a5b      	lsrs	r3, r3, #9
 80050ea:	4413      	add	r3, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff fe6e 	bl	8004dd0 <move_window>
 80050f4:	4603      	mov	r3, r0
 80050f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050f8:	7ffb      	ldrb	r3, [r7, #31]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 80ab 	bne.w	8005256 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	1c59      	adds	r1, r3, #1
 800510a:	61b9      	str	r1, [r7, #24]
 800510c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <put_fat+0xa4>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b25b      	sxtb	r3, r3
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	b25a      	sxtb	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	b25b      	sxtb	r3, r3
 8005132:	4313      	orrs	r3, r2
 8005134:	b25b      	sxtb	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e001      	b.n	800513e <put_fat+0xa8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	0a5b      	lsrs	r3, r3, #9
 8005150:	4413      	add	r3, r2
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff fe3b 	bl	8004dd0 <move_window>
 800515a:	4603      	mov	r3, r0
 800515c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800515e:	7ffb      	ldrb	r3, [r7, #31]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d17a      	bne.n	800525a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	4413      	add	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <put_fat+0xf0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e00e      	b.n	80051a4 <put_fat+0x10e>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	b25b      	sxtb	r3, r3
 800518c:	f023 030f 	bic.w	r3, r3, #15
 8005190:	b25a      	sxtb	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	b25b      	sxtb	r3, r3
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	b25b      	sxtb	r3, r3
 800519e:	4313      	orrs	r3, r2
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	70da      	strb	r2, [r3, #3]
			break;
 80051ae:	e059      	b.n	8005264 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	4413      	add	r3, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fe07 	bl	8004dd0 <move_window>
 80051c2:	4603      	mov	r3, r0
 80051c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d148      	bne.n	800525e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80051da:	4413      	add	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	b292      	uxth	r2, r2
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fb7f 	bl	80048e6 <st_word>
			fs->wflag = 1;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	70da      	strb	r2, [r3, #3]
			break;
 80051ee:	e039      	b.n	8005264 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1a      	ldr	r2, [r3, #32]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	09db      	lsrs	r3, r3, #7
 80051f8:	4413      	add	r3, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fde7 	bl	8004dd0 <move_window>
 8005202:	4603      	mov	r3, r0
 8005204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d12a      	bne.n	8005262 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005220:	4413      	add	r3, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fb3c 	bl	80048a0 <ld_dword>
 8005228:	4603      	mov	r3, r0
 800522a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800522e:	4323      	orrs	r3, r4
 8005230:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005240:	4413      	add	r3, r2
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fb69 	bl	800491c <st_dword>
			fs->wflag = 1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	70da      	strb	r2, [r3, #3]
			break;
 8005250:	e008      	b.n	8005264 <put_fat+0x1ce>
		}
	}
 8005252:	bf00      	nop
 8005254:	e006      	b.n	8005264 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005256:	bf00      	nop
 8005258:	e004      	b.n	8005264 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800525a:	bf00      	nop
 800525c:	e002      	b.n	8005264 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005262:	bf00      	nop
	return res;
 8005264:	7ffb      	ldrb	r3, [r7, #31]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3724      	adds	r7, #36	; 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}

0800526e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d904      	bls.n	8005294 <remove_chain+0x26>
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d301      	bcc.n	8005298 <remove_chain+0x2a>
 8005294:	2302      	movs	r3, #2
 8005296:	e04b      	b.n	8005330 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800529e:	f04f 32ff 	mov.w	r2, #4294967295
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	69b8      	ldr	r0, [r7, #24]
 80052a6:	f7ff fef6 	bl	8005096 <put_fat>
 80052aa:	4603      	mov	r3, r0
 80052ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80052ae:	7ffb      	ldrb	r3, [r7, #31]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <remove_chain+0x4a>
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	e03b      	b.n	8005330 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff fe43 	bl	8004f46 <get_fat>
 80052c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d031      	beq.n	800532c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <remove_chain+0x64>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e02e      	b.n	8005330 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d101      	bne.n	80052de <remove_chain+0x70>
 80052da:	2301      	movs	r3, #1
 80052dc:	e028      	b.n	8005330 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80052de:	2200      	movs	r2, #0
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f7ff fed7 	bl	8005096 <put_fat>
 80052e8:	4603      	mov	r3, r0
 80052ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80052ec:	7ffb      	ldrb	r3, [r7, #31]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <remove_chain+0x88>
 80052f2:	7ffb      	ldrb	r3, [r7, #31]
 80052f4:	e01c      	b.n	8005330 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	3b02      	subs	r3, #2
 8005300:	429a      	cmp	r2, r3
 8005302:	d20b      	bcs.n	800531c <remove_chain+0xae>
			fs->free_clst++;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	791b      	ldrb	r3, [r3, #4]
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d3c6      	bcc.n	80052b8 <remove_chain+0x4a>
 800532a:	e000      	b.n	800532e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800532c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10d      	bne.n	800536a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <create_chain+0x2c>
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	429a      	cmp	r2, r3
 8005362:	d31b      	bcc.n	800539c <create_chain+0x64>
 8005364:	2301      	movs	r3, #1
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e018      	b.n	800539c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fdea 	bl	8004f46 <get_fat>
 8005372:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d801      	bhi.n	800537e <create_chain+0x46>
 800537a:	2301      	movs	r3, #1
 800537c:	e070      	b.n	8005460 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d101      	bne.n	800538a <create_chain+0x52>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	e06a      	b.n	8005460 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	429a      	cmp	r2, r3
 8005392:	d201      	bcs.n	8005398 <create_chain+0x60>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e063      	b.n	8005460 <create_chain+0x128>
		scl = clst;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d307      	bcc.n	80053c0 <create_chain+0x88>
				ncl = 2;
 80053b0:	2302      	movs	r3, #2
 80053b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d901      	bls.n	80053c0 <create_chain+0x88>
 80053bc:	2300      	movs	r3, #0
 80053be:	e04f      	b.n	8005460 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80053c0:	69f9      	ldr	r1, [r7, #28]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fdbf 	bl	8004f46 <get_fat>
 80053c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00e      	beq.n	80053ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d003      	beq.n	80053de <create_chain+0xa6>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d101      	bne.n	80053e2 <create_chain+0xaa>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e03e      	b.n	8005460 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d1da      	bne.n	80053a0 <create_chain+0x68>
 80053ea:	2300      	movs	r3, #0
 80053ec:	e038      	b.n	8005460 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80053ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	69f9      	ldr	r1, [r7, #28]
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f7ff fe4d 	bl	8005096 <put_fat>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <create_chain+0xe2>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6938      	ldr	r0, [r7, #16]
 8005412:	f7ff fe40 	bl	8005096 <put_fat>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d116      	bne.n	800544e <create_chain+0x116>
		fs->last_clst = ncl;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	3b02      	subs	r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d804      	bhi.n	800543e <create_chain+0x106>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	1e5a      	subs	r2, r3, #1
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	791b      	ldrb	r3, [r3, #4]
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	711a      	strb	r2, [r3, #4]
 800544c:	e007      	b.n	800545e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d102      	bne.n	800545a <create_chain+0x122>
 8005454:	f04f 33ff 	mov.w	r3, #4294967295
 8005458:	e000      	b.n	800545c <create_chain+0x124>
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800545e:	69fb      	ldr	r3, [r7, #28]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	3304      	adds	r3, #4
 800547e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	0a5b      	lsrs	r3, r3, #9
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	8952      	ldrh	r2, [r2, #10]
 8005488:	fbb3 f3f2 	udiv	r3, r3, r2
 800548c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1d1a      	adds	r2, r3, #4
 8005492:	613a      	str	r2, [r7, #16]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <clmt_clust+0x3a>
 800549e:	2300      	movs	r3, #0
 80054a0:	e010      	b.n	80054c4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d307      	bcc.n	80054ba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3304      	adds	r3, #4
 80054b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054b8:	e7e9      	b.n	800548e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80054ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054e6:	d204      	bcs.n	80054f2 <dir_sdi+0x22>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80054f2:	2302      	movs	r3, #2
 80054f4:	e063      	b.n	80055be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <dir_sdi+0x46>
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d902      	bls.n	8005516 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	8912      	ldrh	r2, [r2, #8]
 8005524:	4293      	cmp	r3, r2
 8005526:	d301      	bcc.n	800552c <dir_sdi+0x5c>
 8005528:	2302      	movs	r3, #2
 800552a:	e048      	b.n	80055be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	61da      	str	r2, [r3, #28]
 8005534:	e029      	b.n	800558a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	895b      	ldrh	r3, [r3, #10]
 800553a:	025b      	lsls	r3, r3, #9
 800553c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800553e:	e019      	b.n	8005574 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6979      	ldr	r1, [r7, #20]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fcfe 	bl	8004f46 <get_fat>
 800554a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d101      	bne.n	8005558 <dir_sdi+0x88>
 8005554:	2301      	movs	r3, #1
 8005556:	e032      	b.n	80055be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d904      	bls.n	8005568 <dir_sdi+0x98>
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	429a      	cmp	r2, r3
 8005566:	d301      	bcc.n	800556c <dir_sdi+0x9c>
 8005568:	2302      	movs	r3, #2
 800556a:	e028      	b.n	80055be <dir_sdi+0xee>
			ofs -= csz;
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d2e1      	bcs.n	8005540 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800557c:	6979      	ldr	r1, [r7, #20]
 800557e:	6938      	ldr	r0, [r7, #16]
 8005580:	f7ff fcc2 	bl	8004f08 <clust2sect>
 8005584:	4602      	mov	r2, r0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <dir_sdi+0xcc>
 8005598:	2302      	movs	r3, #2
 800559a:	e010      	b.n	80055be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	0a5b      	lsrs	r3, r3, #9
 80055a4:	441a      	add	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b6:	441a      	add	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	3320      	adds	r3, #32
 80055dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <dir_next+0x28>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ec:	d301      	bcc.n	80055f2 <dir_next+0x2c>
 80055ee:	2304      	movs	r3, #4
 80055f0:	e0aa      	b.n	8005748 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 8098 	bne.w	800572e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	8912      	ldrh	r2, [r2, #8]
 8005618:	4293      	cmp	r3, r2
 800561a:	f0c0 8088 	bcc.w	800572e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	61da      	str	r2, [r3, #28]
 8005624:	2304      	movs	r3, #4
 8005626:	e08f      	b.n	8005748 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	0a5b      	lsrs	r3, r3, #9
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	8952      	ldrh	r2, [r2, #10]
 8005630:	3a01      	subs	r2, #1
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d17a      	bne.n	800572e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7ff fc80 	bl	8004f46 <get_fat>
 8005646:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d801      	bhi.n	8005652 <dir_next+0x8c>
 800564e:	2302      	movs	r3, #2
 8005650:	e07a      	b.n	8005748 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d101      	bne.n	800565e <dir_next+0x98>
 800565a:	2301      	movs	r3, #1
 800565c:	e074      	b.n	8005748 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	d358      	bcc.n	800571a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	61da      	str	r2, [r3, #28]
 8005674:	2304      	movs	r3, #4
 8005676:	e067      	b.n	8005748 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f7ff fe59 	bl	8005338 <create_chain>
 8005686:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <dir_next+0xcc>
 800568e:	2307      	movs	r3, #7
 8005690:	e05a      	b.n	8005748 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <dir_next+0xd6>
 8005698:	2302      	movs	r3, #2
 800569a:	e055      	b.n	8005748 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d101      	bne.n	80056a8 <dir_next+0xe2>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e04f      	b.n	8005748 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fb4d 	bl	8004d48 <sync_window>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <dir_next+0xf2>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e047      	b.n	8005748 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3330      	adds	r3, #48	; 0x30
 80056bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff f977 	bl	80049b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fc1a 	bl	8004f08 <clust2sect>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80056da:	e012      	b.n	8005702 <dir_next+0x13c>
						fs->wflag = 1;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff fb30 	bl	8004d48 <sync_window>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <dir_next+0x12c>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e02a      	b.n	8005748 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3301      	adds	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	62da      	str	r2, [r3, #44]	; 0x2c
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	895b      	ldrh	r3, [r3, #10]
 8005706:	461a      	mov	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4293      	cmp	r3, r2
 800570c:	d3e6      	bcc.n	80056dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fbf0 	bl	8004f08 <clust2sect>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005760:	2100      	movs	r1, #0
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff feb4 	bl	80054d0 <dir_sdi>
 8005768:	4603      	mov	r3, r0
 800576a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d12b      	bne.n	80057ca <dir_alloc+0x7a>
		n = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4619      	mov	r1, r3
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fb27 	bl	8004dd0 <move_window>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11d      	bne.n	80057c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2be5      	cmp	r3, #229	; 0xe5
 8005794:	d004      	beq.n	80057a0 <dir_alloc+0x50>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3301      	adds	r3, #1
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d102      	bne.n	80057b4 <dir_alloc+0x64>
 80057ae:	e00c      	b.n	80057ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80057b4:	2101      	movs	r1, #1
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ff05 	bl	80055c6 <dir_next>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0d7      	beq.n	8005776 <dir_alloc+0x26>
 80057c6:	e000      	b.n	80057ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80057c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d101      	bne.n	80057d4 <dir_alloc+0x84>
 80057d0:	2307      	movs	r3, #7
 80057d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	331a      	adds	r3, #26
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff f83f 	bl	8004870 <ld_word>
 80057f2:	4603      	mov	r3, r0
 80057f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d109      	bne.n	8005812 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff f834 	bl	8004870 <ld_word>
 8005808:	4603      	mov	r3, r0
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	331a      	adds	r3, #26
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	b292      	uxth	r2, r2
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff f857 	bl	80048e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d109      	bne.n	8005854 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f103 0214 	add.w	r2, r3, #20
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b29b      	uxth	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f7ff f849 	bl	80048e6 <st_word>
	}
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800586a:	2100      	movs	r1, #0
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff fe2f 	bl	80054d0 <dir_sdi>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <dir_find+0x24>
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	e03e      	b.n	80058fe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4619      	mov	r1, r3
 8005886:	6938      	ldr	r0, [r7, #16]
 8005888:	f7ff faa2 	bl	8004dd0 <move_window>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d12f      	bne.n	80058f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <dir_find+0x4e>
 80058a4:	2304      	movs	r3, #4
 80058a6:	75fb      	strb	r3, [r7, #23]
 80058a8:	e028      	b.n	80058fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	330b      	adds	r3, #11
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	330b      	adds	r3, #11
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <dir_find+0x86>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a18      	ldr	r0, [r3, #32]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3324      	adds	r3, #36	; 0x24
 80058d4:	220b      	movs	r2, #11
 80058d6:	4619      	mov	r1, r3
 80058d8:	f7ff f888 	bl	80049ec <mem_cmp>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80058e2:	2100      	movs	r1, #0
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fe6e 	bl	80055c6 <dir_next>
 80058ea:	4603      	mov	r3, r0
 80058ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0c5      	beq.n	8005880 <dir_find+0x24>
 80058f4:	e002      	b.n	80058fc <dir_find+0xa0>
		if (res != FR_OK) break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80058fa:	bf00      	nop

	return res;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005914:	2101      	movs	r1, #1
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff ff1a 	bl	8005750 <dir_alloc>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11c      	bne.n	8005960 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	4619      	mov	r1, r3
 800592c:	68b8      	ldr	r0, [r7, #8]
 800592e:	f7ff fa4f 	bl	8004dd0 <move_window>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d111      	bne.n	8005960 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	2220      	movs	r2, #32
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff f836 	bl	80049b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a18      	ldr	r0, [r3, #32]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3324      	adds	r3, #36	; 0x24
 8005952:	220b      	movs	r2, #11
 8005954:	4619      	mov	r1, r3
 8005956:	f7ff f80d 	bl	8004974 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2201      	movs	r2, #1
 800595e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3324      	adds	r3, #36	; 0x24
 8005980:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005982:	220b      	movs	r2, #11
 8005984:	2120      	movs	r1, #32
 8005986:	68b8      	ldr	r0, [r7, #8]
 8005988:	f7ff f815 	bl	80049b6 <mem_set>
	si = i = 0; ni = 8;
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	2308      	movs	r3, #8
 8005996:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	61fa      	str	r2, [r7, #28]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80059a6:	7efb      	ldrb	r3, [r7, #27]
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d94e      	bls.n	8005a4a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80059ac:	7efb      	ldrb	r3, [r7, #27]
 80059ae:	2b2f      	cmp	r3, #47	; 0x2f
 80059b0:	d006      	beq.n	80059c0 <create_name+0x54>
 80059b2:	7efb      	ldrb	r3, [r7, #27]
 80059b4:	2b5c      	cmp	r3, #92	; 0x5c
 80059b6:	d110      	bne.n	80059da <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80059b8:	e002      	b.n	80059c0 <create_name+0x54>
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b2f      	cmp	r3, #47	; 0x2f
 80059ca:	d0f6      	beq.n	80059ba <create_name+0x4e>
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b5c      	cmp	r3, #92	; 0x5c
 80059d6:	d0f0      	beq.n	80059ba <create_name+0x4e>
			break;
 80059d8:	e038      	b.n	8005a4c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80059da:	7efb      	ldrb	r3, [r7, #27]
 80059dc:	2b2e      	cmp	r3, #46	; 0x2e
 80059de:	d003      	beq.n	80059e8 <create_name+0x7c>
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d30c      	bcc.n	8005a02 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b0b      	cmp	r3, #11
 80059ec:	d002      	beq.n	80059f4 <create_name+0x88>
 80059ee:	7efb      	ldrb	r3, [r7, #27]
 80059f0:	2b2e      	cmp	r3, #46	; 0x2e
 80059f2:	d001      	beq.n	80059f8 <create_name+0x8c>
 80059f4:	2306      	movs	r3, #6
 80059f6:	e044      	b.n	8005a82 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80059f8:	2308      	movs	r3, #8
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	230b      	movs	r3, #11
 80059fe:	617b      	str	r3, [r7, #20]
			continue;
 8005a00:	e022      	b.n	8005a48 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005a02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	da04      	bge.n	8005a14 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005a0a:	7efb      	ldrb	r3, [r7, #27]
 8005a0c:	3b80      	subs	r3, #128	; 0x80
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <create_name+0x120>)
 8005a10:	5cd3      	ldrb	r3, [r2, r3]
 8005a12:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005a14:	7efb      	ldrb	r3, [r7, #27]
 8005a16:	4619      	mov	r1, r3
 8005a18:	481d      	ldr	r0, [pc, #116]	; (8005a90 <create_name+0x124>)
 8005a1a:	f7ff f80e 	bl	8004a3a <chk_chr>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <create_name+0xbc>
 8005a24:	2306      	movs	r3, #6
 8005a26:	e02c      	b.n	8005a82 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005a28:	7efb      	ldrb	r3, [r7, #27]
 8005a2a:	2b60      	cmp	r3, #96	; 0x60
 8005a2c:	d905      	bls.n	8005a3a <create_name+0xce>
 8005a2e:	7efb      	ldrb	r3, [r7, #27]
 8005a30:	2b7a      	cmp	r3, #122	; 0x7a
 8005a32:	d802      	bhi.n	8005a3a <create_name+0xce>
 8005a34:	7efb      	ldrb	r3, [r7, #27]
 8005a36:	3b20      	subs	r3, #32
 8005a38:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	613a      	str	r2, [r7, #16]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4413      	add	r3, r2
 8005a44:	7efa      	ldrb	r2, [r7, #27]
 8005a46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005a48:	e7a6      	b.n	8005998 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005a4a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	441a      	add	r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <create_name+0xf4>
 8005a5c:	2306      	movs	r3, #6
 8005a5e:	e010      	b.n	8005a82 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2be5      	cmp	r3, #229	; 0xe5
 8005a66:	d102      	bne.n	8005a6e <create_name+0x102>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005a6e:	7efb      	ldrb	r3, [r7, #27]
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d801      	bhi.n	8005a78 <create_name+0x10c>
 8005a74:	2204      	movs	r2, #4
 8005a76:	e000      	b.n	8005a7a <create_name+0x10e>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	330b      	adds	r3, #11
 8005a7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005a80:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08006c58 	.word	0x08006c58
 8005a90:	08006be8 	.word	0x08006be8

08005a94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005aa8:	e002      	b.n	8005ab0 <follow_path+0x1c>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ab6:	d0f8      	beq.n	8005aaa <follow_path+0x16>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b5c      	cmp	r3, #92	; 0x5c
 8005abe:	d0f4      	beq.n	8005aaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b1f      	cmp	r3, #31
 8005acc:	d80a      	bhi.n	8005ae4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2280      	movs	r2, #128	; 0x80
 8005ad2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff fcf9 	bl	80054d0 <dir_sdi>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]
 8005ae2:	e043      	b.n	8005b6c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ff3f 	bl	800596c <create_name>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d134      	bne.n	8005b62 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff feaf 	bl	800585c <dir_find>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d127      	bne.n	8005b66 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b16:	7afb      	ldrb	r3, [r7, #11]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d122      	bne.n	8005b66 <follow_path+0xd2>
 8005b20:	2305      	movs	r3, #5
 8005b22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b24:	e01f      	b.n	8005b66 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b26:	7afb      	ldrb	r3, [r7, #11]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11c      	bne.n	8005b6a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	799b      	ldrb	r3, [r3, #6]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005b3c:	2305      	movs	r3, #5
 8005b3e:	75fb      	strb	r3, [r7, #23]
 8005b40:	e014      	b.n	8005b6c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b50:	4413      	add	r3, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff fe42 	bl	80057de <ld_clust>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b60:	e7c0      	b.n	8005ae4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b62:	bf00      	nop
 8005b64:	e002      	b.n	8005b6c <follow_path+0xd8>
				break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b6a:	bf00      	nop
			}
		}
	}

	return res;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b087      	sub	sp, #28
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d031      	beq.n	8005bf0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e002      	b.n	8005b9a <get_ldnumber+0x24>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d903      	bls.n	8005baa <get_ldnumber+0x34>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b3a      	cmp	r3, #58	; 0x3a
 8005ba8:	d1f4      	bne.n	8005b94 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b3a      	cmp	r3, #58	; 0x3a
 8005bb0:	d11c      	bne.n	8005bec <get_ldnumber+0x76>
			tp = *path;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	60fa      	str	r2, [r7, #12]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	3b30      	subs	r3, #48	; 0x30
 8005bc2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d80e      	bhi.n	8005be8 <get_ldnumber+0x72>
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d10a      	bne.n	8005be8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <get_ldnumber+0x72>
					vol = (int)i;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3301      	adds	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	e002      	b.n	8005bf2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005bf0:	693b      	ldr	r3, [r7, #16]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	70da      	strb	r2, [r3, #3]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff f8d8 	bl	8004dd0 <move_window>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <check_fs+0x2a>
 8005c26:	2304      	movs	r3, #4
 8005c28:	e038      	b.n	8005c9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3330      	adds	r3, #48	; 0x30
 8005c2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fe1c 	bl	8004870 <ld_word>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <check_fs+0x48>
 8005c44:	2303      	movs	r3, #3
 8005c46:	e029      	b.n	8005c9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c4e:	2be9      	cmp	r3, #233	; 0xe9
 8005c50:	d009      	beq.n	8005c66 <check_fs+0x66>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c58:	2beb      	cmp	r3, #235	; 0xeb
 8005c5a:	d11e      	bne.n	8005c9a <check_fs+0x9a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c62:	2b90      	cmp	r3, #144	; 0x90
 8005c64:	d119      	bne.n	8005c9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3330      	adds	r3, #48	; 0x30
 8005c6a:	3336      	adds	r3, #54	; 0x36
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe fe17 	bl	80048a0 <ld_dword>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <check_fs+0xa4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <check_fs+0x82>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e00c      	b.n	8005c9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3330      	adds	r3, #48	; 0x30
 8005c86:	3352      	adds	r3, #82	; 0x52
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe fe09 	bl	80048a0 <ld_dword>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <check_fs+0xa8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <check_fs+0x9a>
 8005c96:	2300      	movs	r3, #0
 8005c98:	e000      	b.n	8005c9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c9a:	2302      	movs	r3, #2
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	00544146 	.word	0x00544146
 8005ca8:	33544146 	.word	0x33544146

08005cac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b096      	sub	sp, #88	; 0x58
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff ff58 	bl	8005b76 <get_ldnumber>
 8005cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da01      	bge.n	8005cd2 <find_volume+0x26>
 8005cce:	230b      	movs	r3, #11
 8005cd0:	e22d      	b.n	800612e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005cd2:	4aa1      	ldr	r2, [pc, #644]	; (8005f58 <find_volume+0x2ac>)
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <find_volume+0x3a>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	e223      	b.n	800612e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01a      	beq.n	8005d32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fd17 	bl	8004734 <disk_status>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <find_volume+0x82>
 8005d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	e1ff      	b.n	800612e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e1fd      	b.n	800612e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fd0f 	bl	8004768 <disk_initialize>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e1e6      	b.n	800612e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <find_volume+0xca>
 8005d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d72:	230a      	movs	r3, #10
 8005d74:	e1db      	b.n	800612e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d7e:	f7ff ff3f 	bl	8005c00 <check_fs>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d149      	bne.n	8005e24 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d90:	2300      	movs	r3, #0
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
 8005d94:	e01e      	b.n	8005dd4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005da4:	4413      	add	r3, r2
 8005da6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	3304      	adds	r3, #4
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d006      	beq.n	8005dc0 <find_volume+0x114>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	3308      	adds	r3, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fd72 	bl	80048a0 <ld_dword>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	e000      	b.n	8005dc2 <find_volume+0x116>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	3358      	adds	r3, #88	; 0x58
 8005dc8:	443b      	add	r3, r7
 8005dca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d9dd      	bls.n	8005d96 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005dda:	2300      	movs	r3, #0
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <find_volume+0x13e>
 8005de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de6:	3b01      	subs	r3, #1
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	3358      	adds	r3, #88	; 0x58
 8005df0:	443b      	add	r3, r7
 8005df2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005df6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <find_volume+0x15e>
 8005dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e02:	f7ff fefd 	bl	8005c00 <check_fs>
 8005e06:	4603      	mov	r3, r0
 8005e08:	e000      	b.n	8005e0c <find_volume+0x160>
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d905      	bls.n	8005e24 <find_volume+0x178>
 8005e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d9e2      	bls.n	8005dea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d101      	bne.n	8005e30 <find_volume+0x184>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e17e      	b.n	800612e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d901      	bls.n	8005e3c <find_volume+0x190>
 8005e38:	230d      	movs	r3, #13
 8005e3a:	e178      	b.n	800612e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	3330      	adds	r3, #48	; 0x30
 8005e40:	330b      	adds	r3, #11
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fd14 	bl	8004870 <ld_word>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	d001      	beq.n	8005e54 <find_volume+0x1a8>
 8005e50:	230d      	movs	r3, #13
 8005e52:	e16c      	b.n	800612e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	3330      	adds	r3, #48	; 0x30
 8005e58:	3316      	adds	r3, #22
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fd08 	bl	8004870 <ld_word>
 8005e60:	4603      	mov	r3, r0
 8005e62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <find_volume+0x1cc>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	3330      	adds	r3, #48	; 0x30
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fd15 	bl	80048a0 <ld_dword>
 8005e76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e7c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d005      	beq.n	8005e9c <find_volume+0x1f0>
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d001      	beq.n	8005e9c <find_volume+0x1f0>
 8005e98:	230d      	movs	r3, #13
 8005e9a:	e148      	b.n	800612e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	789b      	ldrb	r3, [r3, #2]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	895b      	ldrh	r3, [r3, #10]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <find_volume+0x224>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	895b      	ldrh	r3, [r3, #10]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	895b      	ldrh	r3, [r3, #10]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <find_volume+0x228>
 8005ed0:	230d      	movs	r3, #13
 8005ed2:	e12c      	b.n	800612e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	3330      	adds	r3, #48	; 0x30
 8005ed8:	3311      	adds	r3, #17
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fcc8 	bl	8004870 <ld_word>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	891b      	ldrh	r3, [r3, #8]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <find_volume+0x24e>
 8005ef6:	230d      	movs	r3, #13
 8005ef8:	e119      	b.n	800612e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	3330      	adds	r3, #48	; 0x30
 8005efe:	3313      	adds	r3, #19
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe fcb5 	bl	8004870 <ld_word>
 8005f06:	4603      	mov	r3, r0
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <find_volume+0x272>
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	3330      	adds	r3, #48	; 0x30
 8005f14:	3320      	adds	r3, #32
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fcc2 	bl	80048a0 <ld_dword>
 8005f1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	3330      	adds	r3, #48	; 0x30
 8005f22:	330e      	adds	r3, #14
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fca3 	bl	8004870 <ld_word>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <find_volume+0x28c>
 8005f34:	230d      	movs	r3, #13
 8005f36:	e0fa      	b.n	800612e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3c:	4413      	add	r3, r2
 8005f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f40:	8912      	ldrh	r2, [r2, #8]
 8005f42:	0912      	lsrs	r2, r2, #4
 8005f44:	b292      	uxth	r2, r2
 8005f46:	4413      	add	r3, r2
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d204      	bcs.n	8005f5c <find_volume+0x2b0>
 8005f52:	230d      	movs	r3, #13
 8005f54:	e0eb      	b.n	800612e <find_volume+0x482>
 8005f56:	bf00      	nop
 8005f58:	2000020c 	.word	0x2000020c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f64:	8952      	ldrh	r2, [r2, #10]
 8005f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <find_volume+0x2ca>
 8005f72:	230d      	movs	r3, #13
 8005f74:	e0db      	b.n	800612e <find_volume+0x482>
		fmt = FS_FAT32;
 8005f76:	2303      	movs	r3, #3
 8005f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d802      	bhi.n	8005f8c <find_volume+0x2e0>
 8005f86:	2302      	movs	r3, #2
 8005f88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d802      	bhi.n	8005f9c <find_volume+0x2f0>
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fa8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005faa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fae:	441a      	add	r2, r3
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005fb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	441a      	add	r2, r3
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005fbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d11e      	bne.n	8006004 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	3330      	adds	r3, #48	; 0x30
 8005fca:	332a      	adds	r3, #42	; 0x2a
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fc4f 	bl	8004870 <ld_word>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <find_volume+0x330>
 8005fd8:	230d      	movs	r3, #13
 8005fda:	e0a8      	b.n	800612e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	891b      	ldrh	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <find_volume+0x33c>
 8005fe4:	230d      	movs	r3, #13
 8005fe6:	e0a2      	b.n	800612e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	3330      	adds	r3, #48	; 0x30
 8005fec:	332c      	adds	r3, #44	; 0x2c
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fc56 	bl	80048a0 <ld_dword>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	647b      	str	r3, [r7, #68]	; 0x44
 8006002:	e01f      	b.n	8006044 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	891b      	ldrh	r3, [r3, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <find_volume+0x364>
 800600c:	230d      	movs	r3, #13
 800600e:	e08e      	b.n	800612e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	6a1a      	ldr	r2, [r3, #32]
 8006014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006016:	441a      	add	r2, r3
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800601c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006020:	2b02      	cmp	r3, #2
 8006022:	d103      	bne.n	800602c <find_volume+0x380>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	e00a      	b.n	8006042 <find_volume+0x396>
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	695a      	ldr	r2, [r3, #20]
 8006030:	4613      	mov	r3, r2
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4413      	add	r3, r2
 8006036:	085a      	lsrs	r2, r3, #1
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006042:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800604e:	0a5b      	lsrs	r3, r3, #9
 8006050:	429a      	cmp	r2, r3
 8006052:	d201      	bcs.n	8006058 <find_volume+0x3ac>
 8006054:	230d      	movs	r3, #13
 8006056:	e06a      	b.n	800612e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605a:	f04f 32ff 	mov.w	r2, #4294967295
 800605e:	611a      	str	r2, [r3, #16]
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	2280      	movs	r2, #128	; 0x80
 800606c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800606e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006072:	2b03      	cmp	r3, #3
 8006074:	d149      	bne.n	800610a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	3330      	adds	r3, #48	; 0x30
 800607a:	3330      	adds	r3, #48	; 0x30
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe fbf7 	bl	8004870 <ld_word>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d140      	bne.n	800610a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608a:	3301      	adds	r3, #1
 800608c:	4619      	mov	r1, r3
 800608e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006090:	f7fe fe9e 	bl	8004dd0 <move_window>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d137      	bne.n	800610a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2200      	movs	r2, #0
 800609e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	3330      	adds	r3, #48	; 0x30
 80060a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fbe1 	bl	8004870 <ld_word>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d127      	bne.n	800610a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	3330      	adds	r3, #48	; 0x30
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fbee 	bl	80048a0 <ld_dword>
 80060c4:	4603      	mov	r3, r0
 80060c6:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <find_volume+0x48c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d11e      	bne.n	800610a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	3330      	adds	r3, #48	; 0x30
 80060d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fbe3 	bl	80048a0 <ld_dword>
 80060da:	4603      	mov	r3, r0
 80060dc:	4a17      	ldr	r2, [pc, #92]	; (800613c <find_volume+0x490>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d113      	bne.n	800610a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	3330      	adds	r3, #48	; 0x30
 80060e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fbd8 	bl	80048a0 <ld_dword>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	3330      	adds	r3, #48	; 0x30
 80060fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fbce 	bl	80048a0 <ld_dword>
 8006104:	4602      	mov	r2, r0
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006110:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <find_volume+0x494>)
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <find_volume+0x494>)
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <find_volume+0x494>)
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006126:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006128:	f7fe fdea 	bl	8004d00 <clear_lock>
#endif
	return FR_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3758      	adds	r7, #88	; 0x58
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	41615252 	.word	0x41615252
 800613c:	61417272 	.word	0x61417272
 8006140:	20000210 	.word	0x20000210

08006144 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800614e:	2309      	movs	r3, #9
 8006150:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01c      	beq.n	8006192 <validate+0x4e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d018      	beq.n	8006192 <validate+0x4e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d013      	beq.n	8006192 <validate+0x4e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	889a      	ldrh	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	88db      	ldrh	r3, [r3, #6]
 8006174:	429a      	cmp	r2, r3
 8006176:	d10c      	bne.n	8006192 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fad8 	bl	8004734 <disk_status>
 8006184:	4603      	mov	r3, r0
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <validate+0x4e>
			res = FR_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <validate+0x5a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	e000      	b.n	80061a0 <validate+0x5c>
 800619e:	2300      	movs	r3, #0
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	6013      	str	r3, [r2, #0]
	return res;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80061c2:	f107 0310 	add.w	r3, r7, #16
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fcd5 	bl	8005b76 <get_ldnumber>
 80061cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da01      	bge.n	80061d8 <f_mount+0x28>
 80061d4:	230b      	movs	r3, #11
 80061d6:	e02b      	b.n	8006230 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061d8:	4a17      	ldr	r2, [pc, #92]	; (8006238 <f_mount+0x88>)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80061e8:	69b8      	ldr	r0, [r7, #24]
 80061ea:	f7fe fd89 	bl	8004d00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	490d      	ldr	r1, [pc, #52]	; (8006238 <f_mount+0x88>)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <f_mount+0x66>
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d001      	beq.n	800621a <f_mount+0x6a>
 8006216:	2300      	movs	r3, #0
 8006218:	e00a      	b.n	8006230 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800621a:	f107 010c 	add.w	r1, r7, #12
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	2200      	movs	r2, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fd41 	bl	8005cac <find_volume>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	2000020c 	.word	0x2000020c

0800623c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b098      	sub	sp, #96	; 0x60
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <f_open+0x18>
 8006250:	2309      	movs	r3, #9
 8006252:	e1ad      	b.n	80065b0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800625c:	79fa      	ldrb	r2, [r7, #7]
 800625e:	f107 0110 	add.w	r1, r7, #16
 8006262:	f107 0308 	add.w	r3, r7, #8
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fd20 	bl	8005cac <find_volume>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 8191 	bne.w	800659e <f_open+0x362>
		dj.obj.fs = fs;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	f107 0314 	add.w	r3, r7, #20
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fc03 	bl	8005a94 <follow_path>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006298:	2b00      	cmp	r3, #0
 800629a:	d11a      	bne.n	80062d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800629c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da03      	bge.n	80062ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80062a6:	2306      	movs	r3, #6
 80062a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80062ac:	e011      	b.n	80062d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe fbd2 	bl	8004a70 <chk_lock>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	f003 031c 	and.w	r3, r3, #28
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d07f      	beq.n	80063dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80062dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80062e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d10e      	bne.n	800630a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80062ec:	f7fe fc1c 	bl	8004b28 <enq_lock>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <f_open+0xc8>
 80062f6:	f107 0314 	add.w	r3, r7, #20
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fb03 	bl	8005906 <dir_register>
 8006300:	4603      	mov	r3, r0
 8006302:	e000      	b.n	8006306 <f_open+0xca>
 8006304:	2312      	movs	r3, #18
 8006306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	f043 0308 	orr.w	r3, r3, #8
 8006310:	71fb      	strb	r3, [r7, #7]
 8006312:	e010      	b.n	8006336 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006314:	7ebb      	ldrb	r3, [r7, #26]
 8006316:	f003 0311 	and.w	r3, r3, #17
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <f_open+0xea>
					res = FR_DENIED;
 800631e:	2307      	movs	r3, #7
 8006320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006324:	e007      	b.n	8006336 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <f_open+0xfa>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800633a:	2b00      	cmp	r3, #0
 800633c:	d168      	bne.n	8006410 <f_open+0x1d4>
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d063      	beq.n	8006410 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006348:	f7fd ffc0 	bl	80042cc <get_fattime>
 800634c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	330e      	adds	r3, #14
 8006352:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fae1 	bl	800491c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	3316      	adds	r3, #22
 800635e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe fadb 	bl	800491c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	330b      	adds	r3, #11
 800636a:	2220      	movs	r2, #32
 800636c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fa32 	bl	80057de <ld_clust>
 800637a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006380:	2200      	movs	r2, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff fa4a 	bl	800581c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	331c      	adds	r3, #28
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fac4 	bl	800491c <st_dword>
					fs->wflag = 1;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2201      	movs	r2, #1
 8006398:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d037      	beq.n	8006410 <f_open+0x1d4>
						dw = fs->winsect;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80063a6:	f107 0314 	add.w	r3, r7, #20
 80063aa:	2200      	movs	r2, #0
 80063ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe ff5d 	bl	800526e <remove_chain>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80063ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d126      	bne.n	8006410 <f_open+0x1d4>
							res = move_window(fs, dw);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fd02 	bl	8004dd0 <move_window>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d6:	3a01      	subs	r2, #1
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	e019      	b.n	8006410 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80063dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d115      	bne.n	8006410 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80063e4:	7ebb      	ldrb	r3, [r7, #26]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80063ee:	2304      	movs	r3, #4
 80063f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80063f4:	e00c      	b.n	8006410 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <f_open+0x1d4>
 8006400:	7ebb      	ldrb	r3, [r7, #26]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <f_open+0x1d4>
						res = FR_DENIED;
 800640a:	2307      	movs	r3, #7
 800640c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006414:	2b00      	cmp	r3, #0
 8006416:	d128      	bne.n	800646a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006428:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf14      	ite	ne
 8006442:	2301      	movne	r3, #1
 8006444:	2300      	moveq	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fb8b 	bl	8004b6c <inc_lock>
 8006456:	4602      	mov	r2, r0
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <f_open+0x22e>
 8006464:	2302      	movs	r3, #2
 8006466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800646a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 8095 	bne.w	800659e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff f9af 	bl	80057de <ld_clust>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	331c      	adds	r3, #28
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fa08 	bl	80048a0 <ld_dword>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	88da      	ldrh	r2, [r3, #6]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3330      	adds	r3, #48	; 0x30
 80064c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fa72 	bl	80049b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d060      	beq.n	800659e <f_open+0x362>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d05c      	beq.n	800659e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	895b      	ldrh	r3, [r3, #10]
 80064f0:	025b      	lsls	r3, r3, #9
 80064f2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006500:	e016      	b.n	8006530 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fd1d 	bl	8004f46 <get_fat>
 800650c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800650e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006510:	2b01      	cmp	r3, #1
 8006512:	d802      	bhi.n	800651a <f_open+0x2de>
 8006514:	2302      	movs	r3, #2
 8006516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800651a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d102      	bne.n	8006528 <f_open+0x2ec>
 8006522:	2301      	movs	r3, #1
 8006524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800652a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	657b      	str	r3, [r7, #84]	; 0x54
 8006530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <f_open+0x304>
 8006538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800653a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653c:	429a      	cmp	r2, r3
 800653e:	d8e0      	bhi.n	8006502 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006544:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800654a:	2b00      	cmp	r3, #0
 800654c:	d127      	bne.n	800659e <f_open+0x362>
 800654e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006554:	2b00      	cmp	r3, #0
 8006556:	d022      	beq.n	800659e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe fcd3 	bl	8004f08 <clust2sect>
 8006562:	6478      	str	r0, [r7, #68]	; 0x44
 8006564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <f_open+0x336>
						res = FR_INT_ERR;
 800656a:	2302      	movs	r3, #2
 800656c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006570:	e015      	b.n	800659e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006574:	0a5a      	lsrs	r2, r3, #9
 8006576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006578:	441a      	add	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	7858      	ldrb	r0, [r3, #1]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	2301      	movs	r3, #1
 800658e:	f7fe f911 	bl	80047b4 <disk_read>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <f_open+0x362>
 8006598:	2301      	movs	r3, #1
 800659a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800659e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <f_open+0x370>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80065ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3760      	adds	r7, #96	; 0x60
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08e      	sub	sp, #56	; 0x38
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f107 0214 	add.w	r2, r7, #20
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fdb3 	bl	8006144 <validate>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80065e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <f_read+0x44>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	7d5b      	ldrb	r3, [r3, #21]
 80065f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80065f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <f_read+0x4a>
 80065fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006600:	e115      	b.n	800682e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	7d1b      	ldrb	r3, [r3, #20]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <f_read+0x5a>
 800660e:	2307      	movs	r3, #7
 8006610:	e10d      	b.n	800682e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	429a      	cmp	r2, r3
 8006624:	f240 80fe 	bls.w	8006824 <f_read+0x26c>
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800662c:	e0fa      	b.n	8006824 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80c6 	bne.w	80067c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	0a5b      	lsrs	r3, r3, #9
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	8952      	ldrh	r2, [r2, #10]
 8006646:	3a01      	subs	r2, #1
 8006648:	4013      	ands	r3, r2
 800664a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d12f      	bne.n	80066b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
 8006660:	e013      	b.n	800668a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7fe fef9 	bl	8005468 <clmt_clust>
 8006676:	6338      	str	r0, [r7, #48]	; 0x30
 8006678:	e007      	b.n	800668a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f7fe fc5f 	bl	8004f46 <get_fat>
 8006688:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	2b01      	cmp	r3, #1
 800668e:	d804      	bhi.n	800669a <f_read+0xe2>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2202      	movs	r2, #2
 8006694:	755a      	strb	r2, [r3, #21]
 8006696:	2302      	movs	r3, #2
 8006698:	e0c9      	b.n	800682e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d104      	bne.n	80066ac <f_read+0xf4>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	755a      	strb	r2, [r3, #21]
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0c0      	b.n	800682e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f7fe fc24 	bl	8004f08 <clust2sect>
 80066c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <f_read+0x11a>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2202      	movs	r2, #2
 80066cc:	755a      	strb	r2, [r3, #21]
 80066ce:	2302      	movs	r3, #2
 80066d0:	e0ad      	b.n	800682e <f_read+0x276>
			sect += csect;
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0a5b      	lsrs	r3, r3, #9
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d039      	beq.n	800675a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	4413      	add	r3, r2
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	8952      	ldrh	r2, [r2, #10]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d905      	bls.n	8006700 <f_read+0x148>
					cc = fs->csize - csect;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	895b      	ldrh	r3, [r3, #10]
 80066f8:	461a      	mov	r2, r3
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	7858      	ldrb	r0, [r3, #1]
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800670a:	f7fe f853 	bl	80047b4 <disk_read>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <f_read+0x166>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	755a      	strb	r2, [r3, #21]
 800671a:	2301      	movs	r3, #1
 800671c:	e087      	b.n	800682e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	7d1b      	ldrb	r3, [r3, #20]
 8006722:	b25b      	sxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	da14      	bge.n	8006752 <f_read+0x19a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006732:	429a      	cmp	r2, r3
 8006734:	d90d      	bls.n	8006752 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	025b      	lsls	r3, r3, #9
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	18d0      	adds	r0, r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3330      	adds	r3, #48	; 0x30
 8006748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674c:	4619      	mov	r1, r3
 800674e:	f7fe f911 	bl	8004974 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	025b      	lsls	r3, r3, #9
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006758:	e050      	b.n	80067fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	429a      	cmp	r2, r3
 8006762:	d02e      	beq.n	80067c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	7d1b      	ldrb	r3, [r3, #20]
 8006768:	b25b      	sxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	da18      	bge.n	80067a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	7858      	ldrb	r0, [r3, #1]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	2301      	movs	r3, #1
 800677e:	f7fe f839 	bl	80047f4 <disk_write>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <f_read+0x1da>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	755a      	strb	r2, [r3, #21]
 800678e:	2301      	movs	r3, #1
 8006790:	e04d      	b.n	800682e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	7d1b      	ldrb	r3, [r3, #20]
 8006796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	7858      	ldrb	r0, [r3, #1]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067aa:	2301      	movs	r3, #1
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	f7fe f801 	bl	80047b4 <disk_read>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <f_read+0x20a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	755a      	strb	r2, [r3, #21]
 80067be:	2301      	movs	r3, #1
 80067c0:	e035      	b.n	800682e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80067d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d901      	bls.n	80067e2 <f_read+0x22a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f0:	4413      	add	r3, r2
 80067f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f4:	4619      	mov	r1, r3
 80067f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067f8:	f7fe f8bc 	bl	8004974 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	4413      	add	r3, r2
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	441a      	add	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	619a      	str	r2, [r3, #24]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	441a      	add	r2, r3
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f47f af01 	bne.w	800662e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3738      	adds	r7, #56	; 0x38
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f107 0208 	add.w	r2, r7, #8
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff fc7c 	bl	8006144 <validate>
 800684c:	4603      	mov	r3, r0
 800684e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d168      	bne.n	8006928 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7d1b      	ldrb	r3, [r3, #20]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d062      	beq.n	8006928 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	7d1b      	ldrb	r3, [r3, #20]
 8006866:	b25b      	sxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	da15      	bge.n	8006898 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	7858      	ldrb	r0, [r3, #1]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1a      	ldr	r2, [r3, #32]
 800687a:	2301      	movs	r3, #1
 800687c:	f7fd ffba 	bl	80047f4 <disk_write>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <f_sync+0x54>
 8006886:	2301      	movs	r3, #1
 8006888:	e04f      	b.n	800692a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7d1b      	ldrb	r3, [r3, #20]
 800688e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006892:	b2da      	uxtb	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006898:	f7fd fd18 	bl	80042cc <get_fattime>
 800689c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe fa92 	bl	8004dd0 <move_window>
 80068ac:	4603      	mov	r3, r0
 80068ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d138      	bne.n	8006928 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	330b      	adds	r3, #11
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	330b      	adds	r3, #11
 80068c6:	f042 0220 	orr.w	r2, r2, #32
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68f9      	ldr	r1, [r7, #12]
 80068da:	f7fe ff9f 	bl	800581c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f103 021c 	add.w	r2, r3, #28
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4619      	mov	r1, r3
 80068ea:	4610      	mov	r0, r2
 80068ec:	f7fe f816 	bl	800491c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3316      	adds	r3, #22
 80068f4:	6939      	ldr	r1, [r7, #16]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe f810 	bl	800491c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3312      	adds	r3, #18
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd ffef 	bl	80048e6 <st_word>
					fs->wflag = 1;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fa8b 	bl	8004e2c <sync_fs>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	7d1b      	ldrb	r3, [r3, #20]
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	b2da      	uxtb	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff ff7b 	bl	8006836 <f_sync>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d118      	bne.n	800697c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f107 0208 	add.w	r2, r7, #8
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fbf6 	bl	8006144 <validate>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10c      	bne.n	800697c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe f98e 	bl	8004c88 <dec_lock>
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d102      	bne.n	800697c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006996:	2301      	movs	r3, #1
 8006998:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800699e:	4b1f      	ldr	r3, [pc, #124]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069a0:	7a5b      	ldrb	r3, [r3, #9]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d131      	bne.n	8006a0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80069a8:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069aa:	7a5b      	ldrb	r3, [r3, #9]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069b2:	2100      	movs	r1, #0
 80069b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069b8:	7a5b      	ldrb	r3, [r3, #9]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069c8:	7a5b      	ldrb	r3, [r3, #9]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069d0:	4413      	add	r3, r2
 80069d2:	79fa      	ldrb	r2, [r7, #7]
 80069d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069d8:	7a5b      	ldrb	r3, [r3, #9]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	b2d1      	uxtb	r1, r2
 80069e0:	4a0e      	ldr	r2, [pc, #56]	; (8006a1c <FATFS_LinkDriverEx+0x94>)
 80069e2:	7251      	strb	r1, [r2, #9]
 80069e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80069e6:	7dbb      	ldrb	r3, [r7, #22]
 80069e8:	3330      	adds	r3, #48	; 0x30
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3301      	adds	r3, #1
 80069f4:	223a      	movs	r2, #58	; 0x3a
 80069f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3302      	adds	r3, #2
 80069fc:	222f      	movs	r2, #47	; 0x2f
 80069fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3303      	adds	r3, #3
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000234 	.word	0x20000234

08006a20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ffaa 	bl	8006988 <FATFS_LinkDriverEx>
 8006a34:	4603      	mov	r3, r0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <atoi>:
 8006a3e:	220a      	movs	r2, #10
 8006a40:	2100      	movs	r1, #0
 8006a42:	f000 b8b5 	b.w	8006bb0 <strtol>
	...

08006a48 <__errno>:
 8006a48:	4b01      	ldr	r3, [pc, #4]	; (8006a50 <__errno+0x8>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	2000000c 	.word	0x2000000c

08006a54 <__libc_init_array>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	4d0d      	ldr	r5, [pc, #52]	; (8006a8c <__libc_init_array+0x38>)
 8006a58:	4c0d      	ldr	r4, [pc, #52]	; (8006a90 <__libc_init_array+0x3c>)
 8006a5a:	1b64      	subs	r4, r4, r5
 8006a5c:	10a4      	asrs	r4, r4, #2
 8006a5e:	2600      	movs	r6, #0
 8006a60:	42a6      	cmp	r6, r4
 8006a62:	d109      	bne.n	8006a78 <__libc_init_array+0x24>
 8006a64:	4d0b      	ldr	r5, [pc, #44]	; (8006a94 <__libc_init_array+0x40>)
 8006a66:	4c0c      	ldr	r4, [pc, #48]	; (8006a98 <__libc_init_array+0x44>)
 8006a68:	f000 f8ac 	bl	8006bc4 <_init>
 8006a6c:	1b64      	subs	r4, r4, r5
 8006a6e:	10a4      	asrs	r4, r4, #2
 8006a70:	2600      	movs	r6, #0
 8006a72:	42a6      	cmp	r6, r4
 8006a74:	d105      	bne.n	8006a82 <__libc_init_array+0x2e>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7c:	4798      	blx	r3
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7ee      	b.n	8006a60 <__libc_init_array+0xc>
 8006a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a86:	4798      	blx	r3
 8006a88:	3601      	adds	r6, #1
 8006a8a:	e7f2      	b.n	8006a72 <__libc_init_array+0x1e>
 8006a8c:	08006de4 	.word	0x08006de4
 8006a90:	08006de4 	.word	0x08006de4
 8006a94:	08006de4 	.word	0x08006de4
 8006a98:	08006de8 	.word	0x08006de8

08006a9c <memset>:
 8006a9c:	4402      	add	r2, r0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d100      	bne.n	8006aa6 <memset+0xa>
 8006aa4:	4770      	bx	lr
 8006aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aaa:	e7f9      	b.n	8006aa0 <memset+0x4>

08006aac <_strtol_l.constprop.0>:
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab2:	d001      	beq.n	8006ab8 <_strtol_l.constprop.0+0xc>
 8006ab4:	2b24      	cmp	r3, #36	; 0x24
 8006ab6:	d906      	bls.n	8006ac6 <_strtol_l.constprop.0+0x1a>
 8006ab8:	f7ff ffc6 	bl	8006a48 <__errno>
 8006abc:	2316      	movs	r3, #22
 8006abe:	6003      	str	r3, [r0, #0]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006bac <_strtol_l.constprop.0+0x100>
 8006aca:	460d      	mov	r5, r1
 8006acc:	462e      	mov	r6, r5
 8006ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ad2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006ad6:	f017 0708 	ands.w	r7, r7, #8
 8006ada:	d1f7      	bne.n	8006acc <_strtol_l.constprop.0+0x20>
 8006adc:	2c2d      	cmp	r4, #45	; 0x2d
 8006ade:	d132      	bne.n	8006b46 <_strtol_l.constprop.0+0x9a>
 8006ae0:	782c      	ldrb	r4, [r5, #0]
 8006ae2:	2701      	movs	r7, #1
 8006ae4:	1cb5      	adds	r5, r6, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d05b      	beq.n	8006ba2 <_strtol_l.constprop.0+0xf6>
 8006aea:	2b10      	cmp	r3, #16
 8006aec:	d109      	bne.n	8006b02 <_strtol_l.constprop.0+0x56>
 8006aee:	2c30      	cmp	r4, #48	; 0x30
 8006af0:	d107      	bne.n	8006b02 <_strtol_l.constprop.0+0x56>
 8006af2:	782c      	ldrb	r4, [r5, #0]
 8006af4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006af8:	2c58      	cmp	r4, #88	; 0x58
 8006afa:	d14d      	bne.n	8006b98 <_strtol_l.constprop.0+0xec>
 8006afc:	786c      	ldrb	r4, [r5, #1]
 8006afe:	2310      	movs	r3, #16
 8006b00:	3502      	adds	r5, #2
 8006b02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b0a:	f04f 0c00 	mov.w	ip, #0
 8006b0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b12:	4666      	mov	r6, ip
 8006b14:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006b1c:	f1be 0f09 	cmp.w	lr, #9
 8006b20:	d816      	bhi.n	8006b50 <_strtol_l.constprop.0+0xa4>
 8006b22:	4674      	mov	r4, lr
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	dd24      	ble.n	8006b72 <_strtol_l.constprop.0+0xc6>
 8006b28:	f1bc 0f00 	cmp.w	ip, #0
 8006b2c:	db1e      	blt.n	8006b6c <_strtol_l.constprop.0+0xc0>
 8006b2e:	45b1      	cmp	r9, r6
 8006b30:	d31c      	bcc.n	8006b6c <_strtol_l.constprop.0+0xc0>
 8006b32:	d101      	bne.n	8006b38 <_strtol_l.constprop.0+0x8c>
 8006b34:	45a2      	cmp	sl, r4
 8006b36:	db19      	blt.n	8006b6c <_strtol_l.constprop.0+0xc0>
 8006b38:	fb06 4603 	mla	r6, r6, r3, r4
 8006b3c:	f04f 0c01 	mov.w	ip, #1
 8006b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b44:	e7e8      	b.n	8006b18 <_strtol_l.constprop.0+0x6c>
 8006b46:	2c2b      	cmp	r4, #43	; 0x2b
 8006b48:	bf04      	itt	eq
 8006b4a:	782c      	ldrbeq	r4, [r5, #0]
 8006b4c:	1cb5      	addeq	r5, r6, #2
 8006b4e:	e7ca      	b.n	8006ae6 <_strtol_l.constprop.0+0x3a>
 8006b50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b54:	f1be 0f19 	cmp.w	lr, #25
 8006b58:	d801      	bhi.n	8006b5e <_strtol_l.constprop.0+0xb2>
 8006b5a:	3c37      	subs	r4, #55	; 0x37
 8006b5c:	e7e2      	b.n	8006b24 <_strtol_l.constprop.0+0x78>
 8006b5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b62:	f1be 0f19 	cmp.w	lr, #25
 8006b66:	d804      	bhi.n	8006b72 <_strtol_l.constprop.0+0xc6>
 8006b68:	3c57      	subs	r4, #87	; 0x57
 8006b6a:	e7db      	b.n	8006b24 <_strtol_l.constprop.0+0x78>
 8006b6c:	f04f 3cff 	mov.w	ip, #4294967295
 8006b70:	e7e6      	b.n	8006b40 <_strtol_l.constprop.0+0x94>
 8006b72:	f1bc 0f00 	cmp.w	ip, #0
 8006b76:	da05      	bge.n	8006b84 <_strtol_l.constprop.0+0xd8>
 8006b78:	2322      	movs	r3, #34	; 0x22
 8006b7a:	6003      	str	r3, [r0, #0]
 8006b7c:	4646      	mov	r6, r8
 8006b7e:	b942      	cbnz	r2, 8006b92 <_strtol_l.constprop.0+0xe6>
 8006b80:	4630      	mov	r0, r6
 8006b82:	e79e      	b.n	8006ac2 <_strtol_l.constprop.0+0x16>
 8006b84:	b107      	cbz	r7, 8006b88 <_strtol_l.constprop.0+0xdc>
 8006b86:	4276      	negs	r6, r6
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	d0f9      	beq.n	8006b80 <_strtol_l.constprop.0+0xd4>
 8006b8c:	f1bc 0f00 	cmp.w	ip, #0
 8006b90:	d000      	beq.n	8006b94 <_strtol_l.constprop.0+0xe8>
 8006b92:	1e69      	subs	r1, r5, #1
 8006b94:	6011      	str	r1, [r2, #0]
 8006b96:	e7f3      	b.n	8006b80 <_strtol_l.constprop.0+0xd4>
 8006b98:	2430      	movs	r4, #48	; 0x30
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1b1      	bne.n	8006b02 <_strtol_l.constprop.0+0x56>
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	e7af      	b.n	8006b02 <_strtol_l.constprop.0+0x56>
 8006ba2:	2c30      	cmp	r4, #48	; 0x30
 8006ba4:	d0a5      	beq.n	8006af2 <_strtol_l.constprop.0+0x46>
 8006ba6:	230a      	movs	r3, #10
 8006ba8:	e7ab      	b.n	8006b02 <_strtol_l.constprop.0+0x56>
 8006baa:	bf00      	nop
 8006bac:	08006cd9 	.word	0x08006cd9

08006bb0 <strtol>:
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4802      	ldr	r0, [pc, #8]	; (8006bc0 <strtol+0x10>)
 8006bb8:	6800      	ldr	r0, [r0, #0]
 8006bba:	f7ff bf77 	b.w	8006aac <_strtol_l.constprop.0>
 8006bbe:	bf00      	nop
 8006bc0:	2000000c 	.word	0x2000000c

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
